!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	src/utils/htslib/cram/rANS_static.c	54;"	d	file:
ABSMAX	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
ABSMIN	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
AC_KSEQ_H	src/utils/htslib/htslib/kseq.h	29;"	d
AC_KSORT_H	src/utils/htslib/htslib/ksort.h	63;"	d
AC_VERSION_KHASH_H	src/utils/htslib/htslib/khash.h	126;"	d
ALLSPHINXOPTS	docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALLSPHINXOPTS	docs/make.bat	/^	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%$/;"	v
ALLSPHINXOPTS	docs/make.bat	/^set ALLSPHINXOPTS=-d %BUILDDIR%\/doctrees %SPHINXOPTS% .$/;"	v
ALL_DBS	src/utils/Contexts/ContextClosest.h	/^    typedef enum { EACH_DB, ALL_DBS } multiDbModeType;$/;"	e	enum:ContextClosest::__anon129
ALL_TIES	src/utils/Contexts/ContextClosest.h	/^    typedef enum { FIRST_TIE, LAST_TIE, ALL_TIES} tieModeType;$/;"	e	enum:ContextClosest::__anon127
ANNOTATE	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
ANNOTATEBED_H	src/annotateBed/annotateBed.h	13;"	d
ANTIMODE	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
ANY_STRAND	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^			ANY_STRAND } \/\/do no care about strand (Default value)$/;"	e	enum:FileRecordMergeMgr::__anon125
AP_delta	src/utils/htslib/cram/cram_structs.h	/^    int AP_delta;$/;"	m	struct:cram_block_compression_hdr
AR	src/utils/htslib/Makefile	/^AR     = ar$/;"	m
ASC	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef enum { UNSORTED, ASC, DESC} SORT_TYPE;$/;"	e	enum:KeyListOpsMethods::__anon139
AUTH_LIFETIME	src/utils/htslib/hfile_s3.c	53;"	d	file:
A_DIST	src/utils/Contexts/ContextClosest.h	/^    typedef enum { REF_DIST, A_DIST, B_DIST} strandedDistanceModeType;$/;"	e	enum:ContextClosest::__anon128
AddBlockedCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::AddBlockedCoverage(const vector<BED> &bedBlocks) {$/;"	f	class:BedGenomeCoverage
AddCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::AddCoverage(int start, int end) {$/;"	f	class:BedGenomeCoverage
AddFlank	src/flankBed/flankBed.cpp	/^void BedFlank::AddFlank(BED &bed, int leftFlank, int rightFlank) {$/;"	f	class:BedFlank
AddInterval	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::AddInterval(int index) {$/;"	f	class:MultiIntersectBed
AddInterval	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::AddInterval(int index) {$/;"	f	class:UnionBedGraphs
AddShift	src/shiftBed/shiftBed.cpp	/^void BedShift::AddShift(BED &bed) {$/;"	f	class:BedShift
AddSlop	src/slopBed/slopBed.cpp	/^void BedSlop::AddSlop(BED &bed) {$/;"	f	class:BedSlop
AddStrandedFlank	src/flankBed/flankBed.cpp	/^void BedFlank::AddStrandedFlank(BED &bed, int leftFlank, int rightFlank) {$/;"	f	class:BedFlank
AddTag	src/utils/BamTools/include/BamAlignment.hpp	/^		bool AddTag(const std::string& tag, const std::string& type, T data)$/;"	f	class:BamTools::BamAlignment
AddWindow	src/windowBed/windowBed.cpp	/^void BedWindow::AddWindow(const BED &a, CHRPOS &fudgeStart, CHRPOS &fudgeEnd) {$/;"	f	class:BedWindow
AlignedBases	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string AlignedBases, Qualities, ErrorString, TagData;$/;"	m	class:BamTools::BamAlignment
AlignmentFlag	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} AlignmentFlag;$/;"	v	typeref:struct:_AlignmentFlag_t
AllCharData	src/utils/BamTools/include/BamAlignment.hpp	/^			} AllCharData;$/;"	m	struct:BamTools::BamAlignment::_SupportData	typeref:struct:BamTools::BamAlignment::_SupportData::__anon126
AllFilesDone	src/multiIntersectBed/multiIntersectBed.cpp	/^bool MultiIntersectBed::AllFilesDone() {$/;"	f	class:MultiIntersectBed
AllFilesDone	src/unionBedGraphs/unionBedGraphs.cpp	/^bool UnionBedGraphs::AllFilesDone() {$/;"	f	class:UnionBedGraphs
AnnotateBed	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::AnnotateBed() {$/;"	f	class:BedAnnotate
B	obj/BamAncillary.h	/^VB/;"	v
B	src/utils/htslib/cram/cram_structs.h	/^	} B;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon85
BAMAUX_H	src/utils/BamTools/include/api/BamAux.h	4;"	d
BAMFILEREADER_H_	src/utils/FileRecordTools/FileReaders/BamFileReader.h	9;"	d
BAMRECORD_H_	src/utils/FileRecordTools/Records/BamRecord.h	9;"	d
BAMTOBED	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
BAM_AS_BAM	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	typedef enum { NOT_BAM, BAM_AS_BAM, BAM_AS_BED} printBamType;$/;"	e	enum:RecordOutputMgr::__anon2
BAM_AS_BED	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	typedef enum { NOT_BAM, BAM_AS_BAM, BAM_AS_BED} printBamType;$/;"	e	enum:RecordOutputMgr::__anon2
BAM_CBACK	src/utils/htslib/htslib/sam.h	74;"	d
BAM_CBASE_MATCH	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CBASE_MATCH=BAM_CEQUAL,$/;"	e	enum:cigar_op
BAM_CBASE_MISMATCH	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CBASE_MISMATCH=BAM_CDIFF$/;"	e	enum:cigar_op
BAM_CDEL	src/utils/htslib/htslib/sam.h	67;"	d
BAM_CDEL_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CDEL_=BAM_CDEL,$/;"	e	enum:cigar_op
BAM_CDIFF	src/utils/htslib/htslib/sam.h	73;"	d
BAM_CEQUAL	src/utils/htslib/htslib/sam.h	72;"	d
BAM_CHARD_CLIP	src/utils/htslib/htslib/sam.h	70;"	d
BAM_CHARD_CLIP_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CHARD_CLIP_=BAM_CHARD_CLIP,$/;"	e	enum:cigar_op
BAM_CIGAR_MASK	src/utils/htslib/htslib/sam.h	78;"	d
BAM_CIGAR_SHIFT	src/utils/htslib/htslib/sam.h	77;"	d
BAM_CIGAR_STR	src/utils/htslib/htslib/sam.h	76;"	d
BAM_CIGAR_TYPE	src/utils/htslib/htslib/sam.h	79;"	d
BAM_CINS	src/utils/htslib/htslib/sam.h	66;"	d
BAM_CINS_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CINS_=BAM_CINS,$/;"	e	enum:cigar_op
BAM_CMATCH	src/utils/htslib/htslib/sam.h	65;"	d
BAM_CMATCH_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CMATCH_=BAM_CMATCH,$/;"	e	enum:cigar_op
BAM_CPAD	src/utils/htslib/htslib/sam.h	71;"	d
BAM_CPAD_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CPAD_=BAM_CPAD,$/;"	e	enum:cigar_op
BAM_CREF_SKIP	src/utils/htslib/htslib/sam.h	68;"	d
BAM_CREF_SKIP_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CREF_SKIP_=BAM_CREF_SKIP,$/;"	e	enum:cigar_op
BAM_CSOFT_CLIP	src/utils/htslib/htslib/sam.h	69;"	d
BAM_CSOFT_CLIP_	src/utils/htslib/cram/cram_samtools.h	/^    BAM_CSOFT_CLIP_=BAM_CSOFT_CLIP,$/;"	e	enum:cigar_op
BAM_FDUP	src/utils/htslib/htslib/sam.h	132;"	d
BAM_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			GFF_FILE_TYPE, GZIP_FILE_TYPE, BAM_FILE_TYPE, VCF_FILE_TYPE} FILE_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon122
BAM_FMREVERSE	src/utils/htslib/htslib/sam.h	122;"	d
BAM_FMUNMAP	src/utils/htslib/htslib/sam.h	118;"	d
BAM_FPAIRED	src/utils/htslib/htslib/sam.h	112;"	d
BAM_FPROPER_PAIR	src/utils/htslib/htslib/sam.h	114;"	d
BAM_FQCFAIL	src/utils/htslib/htslib/sam.h	130;"	d
BAM_FREAD1	src/utils/htslib/htslib/sam.h	124;"	d
BAM_FREAD2	src/utils/htslib/htslib/sam.h	126;"	d
BAM_FREVERSE	src/utils/htslib/htslib/sam.h	120;"	d
BAM_FSECONDARY	src/utils/htslib/htslib/sam.h	128;"	d
BAM_FSUPPLEMENTARY	src/utils/htslib/htslib/sam.h	134;"	d
BAM_FUNMAP	src/utils/htslib/htslib/sam.h	116;"	d
BAM_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BAM_SCAN_BUFFER_SIZE	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	static const int BAM_SCAN_BUFFER_SIZE = 32768; \/\/ 32K$/;"	m	class:InputStreamMgr
BASES_PER_SLICE	src/utils/htslib/cram/cram_structs.h	87;"	d
BCF1_DIRTY_ALS	src/utils/htslib/htslib/vcf.h	170;"	d
BCF1_DIRTY_FLT	src/utils/htslib/htslib/vcf.h	171;"	d
BCF1_DIRTY_ID	src/utils/htslib/htslib/vcf.h	169;"	d
BCF1_DIRTY_INF	src/utils/htslib/htslib/vcf.h	172;"	d
BCF_BT_CHAR	src/utils/htslib/htslib/vcf.h	133;"	d
BCF_BT_FLOAT	src/utils/htslib/htslib/vcf.h	132;"	d
BCF_BT_INT16	src/utils/htslib/htslib/vcf.h	130;"	d
BCF_BT_INT32	src/utils/htslib/htslib/vcf.h	131;"	d
BCF_BT_INT8	src/utils/htslib/htslib/vcf.h	129;"	d
BCF_BT_NULL	src/utils/htslib/htslib/vcf.h	128;"	d
BCF_DT_CTG	src/utils/htslib/htslib/vcf.h	83;"	d
BCF_DT_ID	src/utils/htslib/htslib/vcf.h	82;"	d
BCF_DT_SAMPLE	src/utils/htslib/htslib/vcf.h	84;"	d
BCF_ERR_CHAR	src/utils/htslib/htslib/vcf.h	193;"	d
BCF_ERR_CTG_INVALID	src/utils/htslib/htslib/vcf.h	194;"	d
BCF_ERR_CTG_UNDEF	src/utils/htslib/htslib/vcf.h	189;"	d
BCF_ERR_LIMITS	src/utils/htslib/htslib/vcf.h	192;"	d
BCF_ERR_NCOLS	src/utils/htslib/htslib/vcf.h	191;"	d
BCF_ERR_TAG_INVALID	src/utils/htslib/htslib/vcf.h	195;"	d
BCF_ERR_TAG_UNDEF	src/utils/htslib/htslib/vcf.h	190;"	d
BCF_HL_CTG	src/utils/htslib/htslib/vcf.h	55;"	d
BCF_HL_FLT	src/utils/htslib/htslib/vcf.h	52;"	d
BCF_HL_FMT	src/utils/htslib/htslib/vcf.h	54;"	d
BCF_HL_GEN	src/utils/htslib/htslib/vcf.h	57;"	d
BCF_HL_INFO	src/utils/htslib/htslib/vcf.h	53;"	d
BCF_HL_STR	src/utils/htslib/htslib/vcf.h	56;"	d
BCF_HT_FLAG	src/utils/htslib/htslib/vcf.h	59;"	d
BCF_HT_INT	src/utils/htslib/htslib/vcf.h	60;"	d
BCF_HT_REAL	src/utils/htslib/htslib/vcf.h	61;"	d
BCF_HT_STR	src/utils/htslib/htslib/vcf.h	62;"	d
BCF_SR_AUX	src/utils/htslib/synced_bcf_reader.c	56;"	d	file:
BCF_SR_PAIR_ANY	src/utils/htslib/htslib/synced_bcf_reader.h	87;"	d
BCF_SR_PAIR_BOTH	src/utils/htslib/htslib/synced_bcf_reader.h	92;"	d
BCF_SR_PAIR_BOTH_REF	src/utils/htslib/htslib/synced_bcf_reader.h	93;"	d
BCF_SR_PAIR_EXACT	src/utils/htslib/htslib/synced_bcf_reader.h	91;"	d
BCF_SR_PAIR_INDELS	src/utils/htslib/htslib/synced_bcf_reader.h	86;"	d
BCF_SR_PAIR_INDEL_REF	src/utils/htslib/htslib/synced_bcf_reader.h	90;"	d
BCF_SR_PAIR_LOGIC	src/utils/htslib/htslib/synced_bcf_reader.h	/^    BCF_SR_PAIR_LOGIC       \/\/ combination of the PAIR_* values above$/;"	e	enum:__anon30
BCF_SR_PAIR_SNPS	src/utils/htslib/htslib/synced_bcf_reader.h	85;"	d
BCF_SR_PAIR_SNP_REF	src/utils/htslib/htslib/synced_bcf_reader.h	89;"	d
BCF_SR_PAIR_SOME	src/utils/htslib/htslib/synced_bcf_reader.h	88;"	d
BCF_SR_REQUIRE_IDX	src/utils/htslib/htslib/synced_bcf_reader.h	/^    BCF_SR_REQUIRE_IDX,$/;"	e	enum:__anon30
BCF_UN_ALL	src/utils/htslib/htslib/vcf.h	354;"	d
BCF_UN_FLT	src/utils/htslib/htslib/vcf.h	349;"	d
BCF_UN_FMT	src/utils/htslib/htslib/vcf.h	352;"	d
BCF_UN_IND	src/utils/htslib/htslib/vcf.h	353;"	d
BCF_UN_INFO	src/utils/htslib/htslib/vcf.h	350;"	d
BCF_UN_SHR	src/utils/htslib/htslib/vcf.h	351;"	d
BCF_UN_STR	src/utils/htslib/htslib/vcf.h	348;"	d
BCF_VL_A	src/utils/htslib/htslib/vcf.h	66;"	d
BCF_VL_FIXED	src/utils/htslib/htslib/vcf.h	64;"	d
BCF_VL_G	src/utils/htslib/htslib/vcf.h	67;"	d
BCF_VL_R	src/utils/htslib/htslib/vcf.h	68;"	d
BCF_VL_VAR	src/utils/htslib/htslib/vcf.h	65;"	d
BED	src/utils/bedFile/bedFile.h	/^    BED()$/;"	f	struct:BED
BED	src/utils/bedFile/bedFile.h	/^    BED(string chrom, CHRPOS start, CHRPOS end)$/;"	f	struct:BED
BED	src/utils/bedFile/bedFile.h	/^    BED(string chrom, CHRPOS start, CHRPOS end, string name,$/;"	f	struct:BED
BED	src/utils/bedFile/bedFile.h	/^    BED(string chrom, CHRPOS start, CHRPOS end, string strand)$/;"	f	struct:BED
BED	src/utils/bedFile/bedFile.h	/^struct BED {$/;"	s
BED12INTERVAL_H_	src/utils/FileRecordTools/Records/Bed12Interval.h	9;"	d
BED12TOBED6	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
BED12_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED3INTERVAL_H_	src/utils/FileRecordTools/Records/Bed3Interval.h	9;"	d
BED3_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED4INTERVAL_H_	src/utils/FileRecordTools/Records/Bed4Interval.h	9;"	d
BED4_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED5INTERVAL_H_	src/utils/FileRecordTools/Records/Bed5Interval.h	9;"	d
BED5_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED6INTERVAL_H_	src/utils/FileRecordTools/Records/Bed6Interval.h	9;"	d
BED6_PLUS_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED6_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BEDCOV	src/utils/bedFile/bedFile.h	/^    BEDCOV()$/;"	f	struct:BEDCOV
BEDCOV	src/utils/bedFile/bedFile.h	/^struct BEDCOV {$/;"	s
BEDCOVLIST	src/utils/bedFile/bedFile.h	/^    BEDCOVLIST()$/;"	f	struct:BEDCOVLIST
BEDCOVLIST	src/utils/bedFile/bedFile.h	/^struct BEDCOVLIST {$/;"	s
BEDFILEPE_H	src/utils/bedFilePE/bedFilePE.h	2;"	d
BEDFILE_H	src/utils/bedFile/bedFile.h	13;"	d
BEDGRAPH	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH() :$/;"	f	class:BEDGRAPH
BEDGRAPH	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH(string _chrom, CHRPOS _start, CHRPOS _end, T _depth) :$/;"	f	class:BEDGRAPH
BEDGRAPH	src/utils/bedGraphFile/bedGraphFile.h	/^class BEDGRAPH$/;"	c
BEDGRAPHFILE_H	src/utils/bedGraphFile/bedGraphFile.h	13;"	d
BEDGRAPHINTERVAL_H_	src/utils/FileRecordTools/Records/BedGraphInterval.h	9;"	d
BEDGRAPH_BLANK	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH_BLANK   = 1,$/;"	e	enum:BedGraphLineStatus
BEDGRAPH_FLOAT	src/utils/bedGraphFile/bedGraphFile.h	/^typedef BEDGRAPH<double> BEDGRAPH_FLOAT;$/;"	t
BEDGRAPH_HEADER	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH_HEADER  = 0,$/;"	e	enum:BedGraphLineStatus
BEDGRAPH_INT	src/utils/bedGraphFile/bedGraphFile.h	/^typedef BEDGRAPH<int32_t> BEDGRAPH_INT;$/;"	t
BEDGRAPH_INVALID	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH_INVALID = -1,$/;"	e	enum:BedGraphLineStatus
BEDGRAPH_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BEDGRAPH_STR	src/utils/bedGraphFile/bedGraphFile.h	/^typedef BEDGRAPH<std::string> BEDGRAPH_STR;$/;"	t
BEDGRAPH_TYPE	src/unionBedGraphs/unionBedGraphs.h	/^    typedef BEDGRAPH_STR BEDGRAPH_TYPE;$/;"	t	class:UnionBedGraphs
BEDGRAPH_VALID	src/utils/bedGraphFile/bedGraphFile.h	/^    BEDGRAPH_VALID   = 2$/;"	e	enum:BedGraphLineStatus
BEDPE	src/utils/bedFilePE/bedFilePE.h	/^struct BEDPE {$/;"	s
BEDPETOBAM	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
BEDPLUSINTERVAL_H_	src/utils/FileRecordTools/Records/BedPlusInterval.h	9;"	d
BEDTOBAM	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
BEDTOFASTQ	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
BEDTOOLSTYPES_H_	src/utils/general/BedtoolsTypes.h	9;"	d
BED_BLANK	src/utils/bedFile/bedFile.h	/^    BED_BLANK   = 1,$/;"	e	enum:BedLineStatus
BED_FILE	src/windowMaker/windowMaker.h	/^        BED_FILE$/;"	e	enum:WindowMaker::INPUT_FILE_TYPE
BED_FILETYPE	src/utils/bedFile/bedFile.h	/^    BED_FILETYPE,$/;"	e	enum:FileType
BED_HEADER	src/utils/bedFile/bedFile.h	/^    BED_HEADER  = 0,$/;"	e	enum:BedLineStatus
BED_INVALID	src/utils/bedFile/bedFile.h	/^    BED_INVALID = -1,$/;"	e	enum:BedLineStatus
BED_PLUS_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
BED_VALID	src/utils/bedFile/bedFile.h	/^    BED_VALID   = 2$/;"	e	enum:BedLineStatus
BEEF	src/utils/htslib/test/sam.c	100;"	d	file:
BGZF	src/utils/htslib/htslib/bgzf.h	/^struct BGZF {$/;"	s
BGZF	src/utils/htslib/htslib/bgzf.h	/^typedef struct BGZF BGZF;$/;"	t	typeref:struct:BGZF
BGZF	src/utils/htslib/htslib/hts.h	/^typedef struct BGZF BGZF;$/;"	t	typeref:struct:BGZF
BGZF_BLOCK_SIZE	src/utils/htslib/htslib/bgzf.h	44;"	d
BGZF_CACHE	src/utils/htslib/bgzf.c	45;"	d	file:
BGZF_ERR_CRC	src/utils/htslib/htslib/bgzf.h	52;"	d
BGZF_ERR_HEADER	src/utils/htslib/htslib/bgzf.h	48;"	d
BGZF_ERR_IO	src/utils/htslib/htslib/bgzf.h	49;"	d
BGZF_ERR_MISUSE	src/utils/htslib/htslib/bgzf.h	50;"	d
BGZF_ERR_MT	src/utils/htslib/htslib/bgzf.h	51;"	d
BGZF_ERR_ZLIB	src/utils/htslib/htslib/bgzf.h	47;"	d
BGZF_MAX_BLOCK_SIZE	src/utils/htslib/htslib/bgzf.h	45;"	d
BGZF_MT	src/utils/htslib/bgzf.c	46;"	d	file:
BIN	src/utils/bedFile/bedFile.h	/^typedef uint32_t BIN;$/;"	t
BINLEVEL	src/utils/bedFile/bedFile.h	/^typedef uint16_t BINLEVEL;$/;"	t
BINTREE_H_	src/utils/BinTree/BinTree.h	9;"	d
BIN_DIR	Makefile	/^export BIN_DIR	= bin$/;"	m
BIN_DIR	src/annotateBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bamToBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bamToFastq/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bed12ToBed6/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bedToBam/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bedToIgv/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/bedpeToBam/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/closestFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/clusterBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/complementFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/coverageFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/expand/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/fastaFromBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/fisher/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/flankBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/genomeCoverageBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/getOverlap/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/groupBy/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/intersectFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/jaccard/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/linksBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/mapFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/maskFastaFromBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/mergeFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/multiBamCov/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/multiIntersectBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/nekSandbox1/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/nucBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/pairToBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/pairToPair/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/randomBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/regressTest/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/reldist/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/sampleFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/shiftBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/shuffleBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/slopBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/sortBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/spacingFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/split/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/subtractFile/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/tagBam/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/unionBedGraphs/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/BamTools-Ancillary/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/BinTree/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/BlockedIntervals/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/Contexts/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/Fasta/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/FileRecordTools/FileReaders/Makefile	/^BIN_DIR = ..\/..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/FileRecordTools/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/FileRecordTools/Records/Makefile	/^BIN_DIR = ..\/..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/GenomeFile/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/KeyListOps/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/NewChromsweep/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/RecordOutputMgr/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/ToolBase/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/VectorOps/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/bedFile/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/bedFilePE/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/bedGraphFile/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/chromsweep/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/driver/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/fileType/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/general/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/gzstream/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/sequenceUtilities/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/tabFile/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/utils/version/Makefile	/^BIN_DIR = ..\/..\/..\/bin\/$/;"	m
BIN_DIR	src/windowBed/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BIN_DIR	src/windowMaker/Makefile	/^BIN_DIR = ..\/..\/bin\/$/;"	m
BLK_SIZE	src/utils/htslib/cram/rANS_static.c	56;"	d	file:
BLK_SIZE2	src/utils/htslib/cram/rANS_static.c	60;"	d	file:
BLOCKMGR_H_	src/utils/FileRecordTools/Records/BlockMgr.h	9;"	d
BLOCK_APPEND	src/utils/htslib/cram/cram_io.h	520;"	d
BLOCK_APPEND_CHAR	src/utils/htslib/cram/cram_io.h	528;"	d
BLOCK_APPEND_UINT	src/utils/htslib/cram/cram_io.h	535;"	d
BLOCK_DATA	src/utils/htslib/cram/cram_io.h	495;"	d
BLOCK_END	src/utils/htslib/cram/cram_io.h	498;"	d
BLOCK_FOOTER_LENGTH	src/utils/htslib/bgzf.c	49;"	d	file:
BLOCK_GROW	src/utils/htslib/cram/cram_io.h	517;"	d
BLOCK_HEADER_LENGTH	src/utils/htslib/bgzf.c	48;"	d	file:
BLOCK_RESIZE	src/utils/htslib/cram/cram_io.h	501;"	d
BLOCK_RESIZE_EXACT	src/utils/htslib/cram/cram_io.h	510;"	d
BLOCK_SIZE	src/utils/htslib/cram/cram_io.h	494;"	d
BLOCK_UPLEN	src/utils/htslib/cram/cram_io.h	613;"	d
BLUE	src/bedtools.cpp	31;"	d	file:
BM_ERROR	src/utils/htslib/cram/cram_structs.h	/^    BM_ERROR = -1,$/;"	e	enum:cram_block_method
BOTH	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { NEITHER, FORWARD_ONLY, REVERSE_ONLY, BOTH } purgeDirectionType;$/;"	e	enum:CloseSweep::__anon137
BRANCH	src/utils/htslib/htslib/vcf.h	901;"	d
BRANCH	src/utils/htslib/htslib/vcf.h	919;"	d
BRANCH	src/utils/htslib/vcf.c	1818;"	d	file:
BRANCH	src/utils/htslib/vcf.c	1836;"	d	file:
BRANCH	src/utils/htslib/vcf.c	3725;"	d	file:
BRANCH	src/utils/htslib/vcf.c	3744;"	d	file:
BRANCH	src/utils/htslib/vcf.c	3829;"	d	file:
BRANCH	src/utils/htslib/vcf.c	3853;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	181;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	207;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	385;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	396;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	428;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	445;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	458;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	479;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	683;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	697;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	728;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	750;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	762;"	d	file:
BRANCH	src/utils/htslib/vcfutils.c	804;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	114;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	123;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	157;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	55;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	69;"	d	file:
BRANCH_INT	src/utils/htslib/vcfutils.c	90;"	d	file:
BT_LIST_H_	src/utils/general/BTlist.h	9;"	d
BT_ROOT	Makefile	/^export BT_ROOT  = src\/utils\/BamTools\/$/;"	m
BTlist	src/utils/general/BTlist.h	/^	BTlist() :$/;"	f	class:BTlist
BTlist	src/utils/general/BTlist.h	/^	BTlist(const string &str) :$/;"	f	class:BTlist
BTlist	src/utils/general/BTlist.h	/^template <class T> class BTlist {$/;"	c
BTlistNode	src/utils/general/BTlist.h	/^	BTlistNode() : _next(NULL){}$/;"	f	class:BTlistNode
BTlistNode	src/utils/general/BTlist.h	/^	BTlistNode(const T &val) : _val(val), _next(NULL) {}$/;"	f	class:BTlistNode
BTlistNode	src/utils/general/BTlist.h	/^class BTlistNode {$/;"	c
BUFFEREDSTREAMMGR_H_	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	9;"	d
BUFSZ	src/utils/htslib/test/test_bgzf.c	43;"	d	file:
BUILDDIR	docs/Makefile	/^BUILDDIR      = _build$/;"	m
BUILDDIR	docs/make.bat	/^set BUILDDIR=_build$/;"	v
BUILT_OBJECTS	Makefile	/^BUILT_OBJECTS = $(OBJ_DIR)\/*.o$/;"	m
BUILT_OBJECTS	src/annotateBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bamToBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bamToFastq/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bed12ToBed6/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bedToBam/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bedToIgv/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/bedpeToBam/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/closestFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/clusterBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/complementFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/coverageFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/expand/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/fastaFromBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/fisher/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/flankBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/genomeCoverageBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/getOverlap/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/groupBy/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/intersectFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/jaccard/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/linksBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/mapFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/maskFastaFromBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/mergeFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/multiBamCov/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/multiIntersectBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/nekSandbox1/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/nucBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/pairToBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/pairToPair/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/randomBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/reldist/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/sampleFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/shiftBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/shuffleBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/slopBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/sortBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/spacingFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/split/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/subtractFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/tagBam/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/unionBedGraphs/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/BamTools-Ancillary/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/BinTree/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/BlockedIntervals/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/Contexts/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/Fasta/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/FileRecordTools/FileReaders/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/FileRecordTools/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/FileRecordTools/Records/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/GenomeFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/KeyListOps/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/NewChromsweep/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/RecordOutputMgr/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/ToolBase/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/VectorOps/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/bedFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/bedFilePE/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/bedGraphFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/chromsweep/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/driver/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/fileType/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/general/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/sequenceUtilities/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/tabFile/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/utils/version/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/windowBed/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_OBJECTS	src/windowMaker/Makefile	/^BUILT_OBJECTS= $(patsubst %,$(OBJ_DIR)\/%,$(OBJECTS))$/;"	m
BUILT_PLUGINS	src/utils/htslib/Makefile	/^BUILT_PLUGINS = $(PLUGIN_OBJS:.o=$(PLUGIN_EXT))$/;"	m
BUILT_PROGRAMS	src/utils/htslib/Makefile	/^BUILT_PROGRAMS = \\$/;"	m
BUILT_TEST_PROGRAMS	src/utils/htslib/Makefile	/^BUILT_TEST_PROGRAMS = \\$/;"	m
BUILT_THRASH_PROGRAMS	src/utils/htslib/Makefile	/^BUILT_THRASH_PROGRAMS = \\$/;"	m
BZIP2	src/utils/htslib/cram/cram_structs.h	/^    BZIP2    = 2,$/;"	e	enum:cram_block_method
BZIP2	src/utils/htslib/htslib/cram.h	/^    BZIP2    = 2,$/;"	e	enum:cram_block_method
B_DIST	src/utils/Contexts/ContextClosest.h	/^    typedef enum { REF_DIST, A_DIST, B_DIST} strandedDistanceModeType;$/;"	e	enum:ContextClosest::__anon128
BamAlignment	src/utils/BamTools/include/BamAlignment.hpp	/^		BamAlignment() : BlockLength(0), SupportData(*this)$/;"	f	class:BamTools::BamAlignment
BamAlignment	src/utils/BamTools/include/BamAlignment.hpp	/^		BamAlignment(const BamAlignment& ba) :$/;"	f	class:BamTools::BamAlignment
BamAlignment	src/utils/BamTools/include/BamAlignment.hpp	/^		BamAlignment(const std::string& filename, const bam1_t* bam, uint32_t size = 0) : $/;"	f	class:BamTools::BamAlignment
BamAlignment	src/utils/BamTools/include/BamAlignment.hpp	/^	class BamAlignment {$/;"	c	namespace:BamTools
BamFileReader	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^BamFileReader::BamFileReader()$/;"	f	class:BamFileReader
BamFileReader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^class BamFileReader : public FileReader {$/;"	c
BamMultiReader	src/utils/BamTools/include/api/BamMultiReader.h	/^	typedef BamReader BamMultiReader;$/;"	t	namespace:BamTools
BamReader	src/utils/BamTools/include/BamReader.hpp	/^	class BamReader {$/;"	c	namespace:BamTools
BamRecord	src/utils/FileRecordTools/Records/BamRecord.cpp	/^BamRecord::BamRecord()$/;"	f	class:BamRecord
BamRecord	src/utils/FileRecordTools/Records/BamRecord.h	/^class BamRecord : public Bed6Interval {$/;"	c
BamRegion	src/utils/BamTools/include/api/BamAux.h	/^		BamRegion(const BamRegion& other)$/;"	f	struct:BamTools::BamRegion
BamRegion	src/utils/BamTools/include/api/BamAux.h	/^		BamRegion(const int& leftID = -1, const int& leftPos = -1, const int& rightID = -1,$/;"	f	struct:BamTools::BamRegion
BamRegion	src/utils/BamTools/include/api/BamAux.h	/^	struct BamRegion$/;"	s	namespace:BamTools
BamToFastq	src/bamToFastq/bamToFastq.cpp	/^BamToFastq::BamToFastq(string bamFile, string fastq1, string fastq2, bool useMateTags, bool pairedEnd)$/;"	f	class:BamToFastq
BamToFastq	src/bamToFastq/bamToFastq.h	/^class BamToFastq {$/;"	c
BamTools	src/utils/BamTools-Ancillary/BamAncillary.cpp	/^namespace BamTools {$/;"	n	file:
BamTools	src/utils/BamTools-Ancillary/BamAncillary.h	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/BamAlignment.hpp	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/BamAncillary.h	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/BamReader.hpp	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/BamWriter.hpp	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/SamHeader.hpp	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/api/BamAux.h	/^namespace BamTools {$/;"	n
BamTools	src/utils/BamTools/include/api/BamMultiReader.h	/^namespace BamTools{$/;"	n
BamTools	src/utils/BamTools/include/api/SamConstants.h	/^namespace BamTools {$/;"	n
BamWriter	src/utils/BamTools/include/BamWriter.hpp	/^	class BamWriter {$/;"	c	namespace:BamTools
Bed12Interval	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^Bed12Interval::Bed12Interval()$/;"	f	class:Bed12Interval
Bed12Interval	src/utils/FileRecordTools/Records/Bed12Interval.h	/^class Bed12Interval : public Bed6Interval {$/;"	c
Bed2Fa	src/fastaFromBed/fastaFromBed.cpp	/^Bed2Fa::Bed2Fa(const string &dbFile, $/;"	f	class:Bed2Fa
Bed2Fa	src/fastaFromBed/fastaFromBed.h	/^class Bed2Fa {$/;"	c
Bed3Interval	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^Bed3Interval::Bed3Interval()$/;"	f	class:Bed3Interval
Bed3Interval	src/utils/FileRecordTools/Records/Bed3Interval.h	/^class Bed3Interval : public Record {$/;"	c
Bed4Interval	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^Bed4Interval::Bed4Interval()$/;"	f	class:Bed4Interval
Bed4Interval	src/utils/FileRecordTools/Records/Bed4Interval.h	/^class Bed4Interval : public Bed3Interval {$/;"	c
Bed5Interval	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^Bed5Interval::Bed5Interval()$/;"	f	class:Bed5Interval
Bed5Interval	src/utils/FileRecordTools/Records/Bed5Interval.h	/^class Bed5Interval : public Bed3Interval {$/;"	c
Bed6Interval	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^Bed6Interval::Bed6Interval()$/;"	f	class:Bed6Interval
Bed6Interval	src/utils/FileRecordTools/Records/Bed6Interval.h	/^class Bed6Interval : public Bed3Interval {$/;"	c
BedAnnotate	src/annotateBed/annotateBed.cpp	/^BedAnnotate::BedAnnotate(const string &mainFile, const vector<string> &annoFileNames,$/;"	f	class:BedAnnotate
BedAnnotate	src/annotateBed/annotateBed.h	/^class BedAnnotate {$/;"	c
BedCluster	src/clusterBed/clusterBed.cpp	/^BedCluster::BedCluster(string &bedFile, $/;"	f	class:BedCluster
BedCluster	src/clusterBed/clusterBed.h	/^class BedCluster {$/;"	c
BedFile	src/utils/bedFile/bedFile.cpp	/^BedFile::BedFile(string &bedFile)$/;"	f	class:BedFile
BedFile	src/utils/bedFile/bedFile.cpp	/^BedFile::BedFile(void)$/;"	f	class:BedFile
BedFile	src/utils/bedFile/bedFile.h	/^class BedFile {$/;"	c
BedFilePE	src/utils/bedFilePE/bedFilePE.cpp	/^BedFilePE::BedFilePE(string &bedFile) {$/;"	f	class:BedFilePE
BedFilePE	src/utils/bedFilePE/bedFilePE.h	/^class BedFilePE {$/;"	c
BedFlank	src/flankBed/flankBed.cpp	/^BedFlank::BedFlank(string &bedFile, string &genomeFile, bool forceStrand, $/;"	f	class:BedFlank
BedFlank	src/flankBed/flankBed.h	/^class BedFlank {$/;"	c
BedGenomeCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^BedGenomeCoverage::BedGenomeCoverage(string bedFile, string genomeFile,$/;"	f	class:BedGenomeCoverage
BedGenomeCoverage	src/genomeCoverageBed/genomeCoverageBed.h	/^class BedGenomeCoverage {$/;"	c
BedGraphFile	src/utils/bedGraphFile/bedGraphFile.cpp	/^BedGraphFile::BedGraphFile(string &_file) :$/;"	f	class:BedGraphFile
BedGraphFile	src/utils/bedGraphFile/bedGraphFile.h	/^class BedGraphFile {$/;"	c
BedGraphInterval	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^BedGraphInterval::BedGraphInterval()$/;"	f	class:BedGraphInterval
BedGraphInterval	src/utils/FileRecordTools/Records/BedGraphInterval.h	/^class BedGraphInterval : public Bed3Interval {$/;"	c
BedGraphLineStatus	src/utils/bedGraphFile/bedGraphFile.h	/^enum BedGraphLineStatus$/;"	g
BedIntersectPE	src/pairToBed/pairToBed.cpp	/^BedIntersectPE::BedIntersectPE(string bedAFilePE, string bedBFile, float overlapFraction,$/;"	f	class:BedIntersectPE
BedIntersectPE	src/pairToBed/pairToBed.h	/^class BedIntersectPE {$/;"	c
BedLineStatus	src/utils/bedFile/bedFile.h	/^enum BedLineStatus$/;"	g
BedLinks	src/linksBed/linksBed.cpp	/^BedLinks::BedLinks(string &bedFile, string &base, string &org, string &db) {$/;"	f	class:BedLinks
BedLinks	src/linksBed/linksBed.h	/^class BedLinks {$/;"	c
BedPlusInterval	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^BedPlusInterval::BedPlusInterval()$/;"	f	class:BedPlusInterval
BedPlusInterval	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^class BedPlusInterval : public Bed3Interval {$/;"	c
BedRandom	src/randomBed/randomBed.cpp	/^BedRandom::BedRandom(string &genomeFile, uint32_t numToGenerate, int seed,$/;"	f	class:BedRandom
BedRandom	src/randomBed/randomBed.h	/^class BedRandom {$/;"	c
BedShift	src/shiftBed/shiftBed.cpp	/^BedShift::BedShift(string &bedFile, string &genomeFile, float shiftMinus,$/;"	f	class:BedShift
BedShift	src/shiftBed/shiftBed.h	/^class BedShift {$/;"	c
BedShuffle	src/shuffleBed/shuffleBed.cpp	/^BedShuffle::BedShuffle(string &bedFile, string &genomeFile, $/;"	f	class:BedShuffle
BedShuffle	src/shuffleBed/shuffleBed.h	/^class BedShuffle {$/;"	c
BedSlop	src/slopBed/slopBed.cpp	/^  BedSlop::BedSlop(string &bedFile, string &genomeFile, bool forceStrand, $/;"	f	class:BedSlop
BedSlop	src/slopBed/slopBed.h	/^class BedSlop {$/;"	c
BedSort	src/sortBed/sortBed.cpp	/^BedSort::BedSort(string &bedFile, bool printHeader,string &faidxFile):_faidxFile(faidxFile) {$/;"	f	class:BedSort
BedSort	src/sortBed/sortBed.h	/^class BedSort {$/;"	c
BedSplit	src/split/splitBed.cpp	/^BedSplit::BedSplit():outfileprefix("_split"),num_chuncks(0)$/;"	f	class:BedSplit
BedSplit	src/split/splitBed.h	/^class BedSplit {$/;"	c
BedSplitItems	src/split/splitBed.cpp	/^		BedSplitItems():nbases(0.0)$/;"	f	class:BedSplitItems
BedSplitItems	src/split/splitBed.cpp	/^class BedSplitItems$/;"	c	file:
BedWindow	src/windowBed/windowBed.cpp	/^BedWindow::BedWindow(string bedAFile, string bedBFile, int leftSlop, int rightSlop,$/;"	f	class:BedWindow
BedWindow	src/windowBed/windowBed.h	/^class BedWindow {$/;"	c
BedtoolsDriver	src/utils/driver/BedtoolsDriver.cpp	/^BedtoolsDriver::BedtoolsDriver()$/;"	f	class:BedtoolsDriver
BedtoolsDriver	src/utils/driver/BedtoolsDriver.h	/^class BedtoolsDriver {$/;"	c
Bin	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} Bin;$/;"	v	typeref:struct:_Bin_t
BinTree	src/utils/BinTree/BinTree.cpp	/^BinTree::BinTree(ContextIntersect *context)$/;"	f	class:BinTree
BinTree	src/utils/BinTree/BinTree.h	/^class BinTree {$/;"	c
BlockLength	src/utils/BamTools/include/BamAlignment.hpp	/^			uint32_t& BlockLength;$/;"	m	struct:BamTools::BamAlignment::_SupportData
BlockLength	src/utils/BamTools/include/BamAlignment.hpp	/^		uint32_t BlockLength;$/;"	m	class:BamTools::BamAlignment
BlockMgr	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^BlockMgr::BlockMgr(float overlapFraction, bool hasReciprocal)$/;"	f	class:BlockMgr
BlockMgr	src/utils/FileRecordTools/Records/BlockMgr.h	/^class BlockMgr {$/;"	c
BufferedStreamMgr	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^BufferedStreamMgr::BufferedStreamMgr(const string &filename)$/;"	f	class:BufferedStreamMgr
BufferedStreamMgr	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^class BufferedStreamMgr {$/;"	c
BuildCigarString	src/bamToBed/bamToBed.cpp	/^string BuildCigarString(const vector<CigarOp> &cigar) {$/;"	f
CC	src/utils/htslib/Makefile	/^CC     = gcc$/;"	m
CCPREFIX	Makefile	/^export CCPREFIX = $/;"	m
CCPREFIX	Makefile	/^export CCPREFIX = @$/;"	m
CFLAGS	src/utils/htslib/Makefile	/^CFLAGS   = -g -Wall -O2$/;"	m
CHROMSWEEP_H	src/utils/chromsweep/chromsweep.h	13;"	d
CHRPOS	src/utils/bedFile/bedFile.h	/^typedef uint32_t CHRPOS;$/;"	t
CHRPOS	src/utils/bedGraphFile/bedGraphFile.h	/^typedef uint32_t CHRPOS;$/;"	t
CHRPOS	src/utils/general/BedtoolsTypes.h	/^typedef uint32_t CHRPOS;$/;"	t
CLOSE	src/utils/htslib/bgzf.c	/^    CLOSE,$/;"	e	enum:mtaux_cmd	file:
CLOSEST	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
CLOSESTHEADER_H_	src/closestFile/closestFile.h	9;"	d
CLOSESWEEP_H_	src/utils/NewChromsweep/CloseSweep.h	9;"	d
CLUSTER	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
COLLAPSE	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
COLLAPSE_ANY	src/utils/htslib/htslib/synced_bcf_reader.h	81;"	d
COLLAPSE_BOTH	src/utils/htslib/htslib/synced_bcf_reader.h	83;"	d
COLLAPSE_INDELS	src/utils/htslib/htslib/synced_bcf_reader.h	80;"	d
COLLAPSE_NONE	src/utils/htslib/htslib/synced_bcf_reader.h	78;"	d
COLLAPSE_SNPS	src/utils/htslib/htslib/synced_bcf_reader.h	79;"	d
COLLAPSE_SOME	src/utils/htslib/htslib/synced_bcf_reader.h	82;"	d
COMMONHELPFILE_H_	src/utils/general/CommonHelp.h	9;"	d
COMPLEMENT	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
COMPLEMENTFILE_H_	src/complementFile/complementFile.h	9;"	d
COMPRESSIONTOOLS_H_	src/utils/general/CompressionTools.h	9;"	d
COMPRESSION_HEADER	src/utils/htslib/cram/cram_structs.h	/^    COMPRESSION_HEADER = 1,$/;"	e	enum:cram_content_type
COMPRESSION_HEADER	src/utils/htslib/htslib/cram.h	/^    COMPRESSION_HEADER = 1,$/;"	e	enum:cram_content_type
CONCAT	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
CONTEXTBASE_H_	src/utils/Contexts/ContextBase.h	9;"	d
CONTEXTCLOSEST_H_	src/utils/Contexts/ContextClosest.h	10;"	d
CONTEXTCOMPLEMENT_H_	src/utils/Contexts/ContextComplement.h	9;"	d
CONTEXTCOVERAGE_H_	src/utils/Contexts/ContextCoverage.h	9;"	d
CONTEXTFISHER_H_	src/utils/Contexts/ContextFisher.h	9;"	d
CONTEXTGROUPBY_H_	src/utils/Contexts/ContextGroupBy.h	9;"	d
CONTEXTINTERSECT_H_	src/utils/Contexts/ContextIntersect.h	9;"	d
CONTEXTJACCARD_H_	src/utils/Contexts/ContextJaccard.h	9;"	d
CONTEXTMAP_H_	src/utils/Contexts/ContextMap.h	9;"	d
CONTEXTMERGE_H_	src/utils/Contexts/ContextMerge.h	9;"	d
CONTEXTSAMPLE_H_	src/utils/Contexts/ContextSample.h	9;"	d
CONTEXTSPACING_H_	src/utils/Contexts/ContextSpacing.h	9;"	d
CONTEXTSUBTRACT_H_	src/utils/Contexts/ContextSubtract.h	9;"	d
COORDINATE_TYPE	src/utils/Point/Point.h	/^enum COORDINATE_TYPE {$/;"	g
CORE	src/utils/htslib/cram/cram_structs.h	/^    CORE               = 5,$/;"	e	enum:cram_content_type
CORE	src/utils/htslib/htslib/cram.h	/^    CORE               = 5,$/;"	e	enum:cram_content_type
COUNT	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	e	enum:ContextCoverage::__anon132
COUNT	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
COUNT_DISTINCT	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
COVERAGE	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
COVERAGEFILE_H_	src/coverageFile/coverageFile.h	9;"	d
CPPFLAGS	src/utils/htslib/Makefile	/^CPPFLAGS =$/;"	m
CRAM_ALL	src/utils/htslib/cram/cram_structs.h	/^    CRAM_ALL= 0x7fffffff,$/;"	e	enum:cram_fields
CRAM_AP	src/utils/htslib/cram/cram_structs.h	/^    CRAM_AP = 0x00000002,$/;"	e	enum:cram_fields
CRAM_BA	src/utils/htslib/cram/cram_structs.h	/^    CRAM_BA = 0x00000040,$/;"	e	enum:cram_fields
CRAM_BB	src/utils/htslib/cram/cram_structs.h	/^    CRAM_BB = 0x04000000,$/;"	e	enum:cram_fields
CRAM_BB_len	src/utils/htslib/cram/cram_structs.h	/^    CRAM_BB_len = 0x08000000,$/;"	e	enum:cram_fields
CRAM_BF	src/utils/htslib/cram/cram_structs.h	/^    CRAM_BF = 0x00000001,$/;"	e	enum:cram_fields
CRAM_BS	src/utils/htslib/cram/cram_structs.h	/^    CRAM_BS = 0x00000400,$/;"	e	enum:cram_fields
CRAM_CF	src/utils/htslib/cram/cram_structs.h	/^    CRAM_CF = 0x00100000,$/;"	e	enum:cram_fields
CRAM_CIGAR	src/utils/htslib/cram/cram_structs.h	794;"	d
CRAM_DL	src/utils/htslib/cram/cram_structs.h	/^    CRAM_DL = 0x00000010,$/;"	e	enum:cram_fields
CRAM_FC	src/utils/htslib/cram/cram_structs.h	/^    CRAM_FC = 0x00000100,$/;"	e	enum:cram_fields
CRAM_FDUP	src/utils/htslib/cram/cram_structs.h	812;"	d
CRAM_FLAG_DETACHED	src/utils/htslib/cram/cram_structs.h	830;"	d
CRAM_FLAG_DISCARD_NAME	src/utils/htslib/cram/cram_structs.h	837;"	d
CRAM_FLAG_MASK	src/utils/htslib/cram/cram_structs.h	833;"	d
CRAM_FLAG_MATE_DOWNSTREAM	src/utils/htslib/cram/cram_structs.h	831;"	d
CRAM_FLAG_NO_SEQ	src/utils/htslib/cram/cram_structs.h	832;"	d
CRAM_FLAG_PRESERVE_QUAL_SCORES	src/utils/htslib/cram/cram_structs.h	829;"	d
CRAM_FLAG_STATS_ADDED	src/utils/htslib/cram/cram_structs.h	836;"	d
CRAM_FN	src/utils/htslib/cram/cram_structs.h	/^    CRAM_FN = 0x00000200,$/;"	e	enum:cram_fields
CRAM_FP	src/utils/htslib/cram/cram_structs.h	/^    CRAM_FP = 0x00000004,$/;"	e	enum:cram_fields
CRAM_FPAIRED	src/utils/htslib/cram/cram_structs.h	804;"	d
CRAM_FPROPER_PAIR	src/utils/htslib/cram/cram_structs.h	805;"	d
CRAM_FQCFAIL	src/utils/htslib/cram/cram_structs.h	811;"	d
CRAM_FREAD1	src/utils/htslib/cram/cram_structs.h	808;"	d
CRAM_FREAD2	src/utils/htslib/cram/cram_structs.h	809;"	d
CRAM_FREVERSE	src/utils/htslib/cram/cram_structs.h	807;"	d
CRAM_FSECONDARY	src/utils/htslib/cram/cram_structs.h	810;"	d
CRAM_FUNMAP	src/utils/htslib/cram/cram_structs.h	806;"	d
CRAM_HC	src/utils/htslib/cram/cram_structs.h	/^    CRAM_HC = 0x01000000,$/;"	e	enum:cram_fields
CRAM_IN	src/utils/htslib/cram/cram_structs.h	/^    CRAM_IN = 0x00000800,$/;"	e	enum:cram_fields
CRAM_KEY	src/utils/htslib/cram/cram_io.h	59;"	d
CRAM_MAJOR_VERS	src/utils/htslib/cram/cram_structs.h	189;"	d
CRAM_MAP	src/utils/htslib/cram/cram_structs.h	279;"	d
CRAM_MAP_HASH	src/utils/htslib/cram/cram_structs.h	278;"	d
CRAM_MF	src/utils/htslib/cram/cram_structs.h	/^    CRAM_MF = 0x00080000,$/;"	e	enum:cram_fields
CRAM_MINOR_VERS	src/utils/htslib/cram/cram_structs.h	190;"	d
CRAM_MQ	src/utils/htslib/cram/cram_structs.h	/^    CRAM_MQ = 0x00002000,$/;"	e	enum:cram_fields
CRAM_M_REVERSE	src/utils/htslib/cram/cram_structs.h	824;"	d
CRAM_M_UNMAP	src/utils/htslib/cram/cram_structs.h	825;"	d
CRAM_NF	src/utils/htslib/cram/cram_structs.h	/^    CRAM_NF = 0x00000020,$/;"	e	enum:cram_fields
CRAM_NP	src/utils/htslib/cram/cram_structs.h	/^    CRAM_NP = 0x00020000,$/;"	e	enum:cram_fields
CRAM_NS	src/utils/htslib/cram/cram_structs.h	/^    CRAM_NS = 0x00010000,$/;"	e	enum:cram_fields
CRAM_OPT_BASES_PER_SLICE	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_BASES_PER_SLICE,$/;"	e	enum:hts_fmt_option
CRAM_OPT_DECODE_MD	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_DECODE_MD,$/;"	e	enum:hts_fmt_option
CRAM_OPT_EMBED_REF	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_EMBED_REF,$/;"	e	enum:hts_fmt_option
CRAM_OPT_IGNORE_MD5	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_IGNORE_MD5,$/;"	e	enum:hts_fmt_option
CRAM_OPT_LOSSY_NAMES	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_LOSSY_NAMES,$/;"	e	enum:hts_fmt_option
CRAM_OPT_MULTI_SEQ_PER_SLICE	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_MULTI_SEQ_PER_SLICE,$/;"	e	enum:hts_fmt_option
CRAM_OPT_NO_REF	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_NO_REF,$/;"	e	enum:hts_fmt_option
CRAM_OPT_NTHREADS	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_NTHREADS,   \/\/ deprecated, use HTS_OPT_NTHREADS$/;"	e	enum:hts_fmt_option
CRAM_OPT_PREFIX	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_PREFIX,$/;"	e	enum:hts_fmt_option
CRAM_OPT_RANGE	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_RANGE,$/;"	e	enum:hts_fmt_option
CRAM_OPT_REFERENCE	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_REFERENCE,  \/\/ make general$/;"	e	enum:hts_fmt_option
CRAM_OPT_REQUIRED_FIELDS	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_REQUIRED_FIELDS,$/;"	e	enum:hts_fmt_option
CRAM_OPT_SEQS_PER_SLICE	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_SEQS_PER_SLICE,$/;"	e	enum:hts_fmt_option
CRAM_OPT_SHARED_REF	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_SHARED_REF,$/;"	e	enum:hts_fmt_option
CRAM_OPT_SLICES_PER_CONTAINER	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_SLICES_PER_CONTAINER,$/;"	e	enum:hts_fmt_option
CRAM_OPT_THREAD_POOL	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_THREAD_POOL,\/\/ make general$/;"	e	enum:hts_fmt_option
CRAM_OPT_USE_BZIP2	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_USE_BZIP2,$/;"	e	enum:hts_fmt_option
CRAM_OPT_USE_LZMA	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_USE_LZMA,$/;"	e	enum:hts_fmt_option
CRAM_OPT_USE_RANS	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_USE_RANS,$/;"	e	enum:hts_fmt_option
CRAM_OPT_VERBOSITY	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_VERBOSITY,  \/\/ obsolete, use hts_set_log_level() instead$/;"	e	enum:hts_fmt_option
CRAM_OPT_VERSION	src/utils/htslib/htslib/hts.h	/^    CRAM_OPT_VERSION,    \/\/ rename to cram_version?$/;"	e	enum:hts_fmt_option
CRAM_PD	src/utils/htslib/cram/cram_structs.h	/^    CRAM_PD = 0x00800000,$/;"	e	enum:cram_fields
CRAM_QQ	src/utils/htslib/cram/cram_structs.h	/^    CRAM_QQ = 0x10000000,$/;"	e	enum:cram_fields
CRAM_QQ_len	src/utils/htslib/cram/cram_structs.h	/^    CRAM_QQ_len = 0x20000000,$/;"	e	enum:cram_fields
CRAM_QS	src/utils/htslib/cram/cram_structs.h	/^    CRAM_QS = 0x00000080,$/;"	e	enum:cram_fields
CRAM_QUAL	src/utils/htslib/cram/cram_structs.h	800;"	d
CRAM_RG	src/utils/htslib/cram/cram_structs.h	/^    CRAM_RG = 0x00001000,$/;"	e	enum:cram_fields
CRAM_RI	src/utils/htslib/cram/cram_structs.h	/^    CRAM_RI = 0x00200000,$/;"	e	enum:cram_fields
CRAM_RL	src/utils/htslib/cram/cram_structs.h	/^    CRAM_RL = 0x00000008,$/;"	e	enum:cram_fields
CRAM_RN	src/utils/htslib/cram/cram_structs.h	/^    CRAM_RN = 0x00008000,$/;"	e	enum:cram_fields
CRAM_RS	src/utils/htslib/cram/cram_structs.h	/^    CRAM_RS = 0x00400000,$/;"	e	enum:cram_fields
CRAM_SC	src/utils/htslib/cram/cram_structs.h	/^    CRAM_SC = 0x02000000,$/;"	e	enum:cram_fields
CRAM_SEQ	src/utils/htslib/cram/cram_structs.h	797;"	d
CRAM_SUBST_MATRIX	src/utils/htslib/cram/cram_structs.h	90;"	d
CRAM_TL	src/utils/htslib/cram/cram_structs.h	/^    CRAM_TL = 0x00004000,$/;"	e	enum:cram_fields
CRAM_TS	src/utils/htslib/cram/cram_structs.h	/^    CRAM_TS = 0x00040000,$/;"	e	enum:cram_fields
CRAM_aux	src/utils/htslib/cram/cram_structs.h	/^    CRAM_aux= 0x40000000,$/;"	e	enum:cram_fields
CT_ERROR	src/utils/htslib/cram/cram_structs.h	/^    CT_ERROR           = -1,$/;"	e	enum:cram_content_type
CT_ERROR	src/utils/htslib/htslib/cram.h	/^    CT_ERROR           = -1,$/;"	e	enum:cram_content_type
CXX	Makefile	/^export CXX		= g++$/;"	m
CXXFLAGS	Makefile	/^export CXXFLAGS = -Wall -Wextra -DDEBUG -D_DEBUG -g -O0 -D_FILE_OFFSET_BITS=64 -DWITH_HTS_CB_API $(INCLUDES) $/;"	m
CXXFLAGS	Makefile	/^export CXXFLAGS = -g -Wall -O2 -D_FILE_OFFSET_BITS=64 -DWITH_HTS_CB_API $(INCLUDES)$/;"	m
CalculateRelativeDistance	src/reldist/reldist.cpp	/^void RelativeDistance::CalculateRelativeDistance()$/;"	f	class:RelativeDistance
CalculateWindows	src/windowMaker/windowMaker.cpp	/^uint32_t WindowMaker::CalculateWindows(const BED& interval) {$/;"	f	class:WindowMaker
Ccram_to_sam	src/utils/htslib/test/cross_validate.sh	/^Ccram_to_sam() {$/;"	f
ChooseLocus	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ChooseLocus(BED &bedEntry) {$/;"	f	class:BedShuffle
ChooseLocusFromInclusionFile	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ChooseLocusFromInclusionFile(BED &bedEntry) $/;"	f	class:BedShuffle
ChoosePairedLocus	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ChoosePairedLocus(BEDPE &b) {$/;"	f	class:BedShuffle
ChromChange	src/utils/chromsweep/chromsweep.cpp	/^bool ChromSweep::ChromChange()$/;"	f	class:ChromSweep
ChromSweep	src/utils/chromsweep/chromsweep.cpp	/^ChromSweep::ChromSweep(BedFile *query, BedFile *db, $/;"	f	class:ChromSweep
ChromSweep	src/utils/chromsweep/chromsweep.cpp	/^ChromSweep::ChromSweep(string &queryFile, string &dbFile) $/;"	f	class:ChromSweep
ChromSweep	src/utils/chromsweep/chromsweep.h	/^class ChromSweep {$/;"	c
CigarData	src/utils/BamTools/include/BamAlignment.hpp	/^		std::vector<CigarOp> CigarData;$/;"	m	class:BamTools::BamAlignment
CigarOp	src/utils/BamTools/include/BamAlignment.hpp	/^		CigarOp(const char type = '\\0', $/;"	f	struct:BamTools::CigarOp
CigarOp	src/utils/BamTools/include/BamAlignment.hpp	/^	struct CigarOp {$/;"	s	namespace:BamTools
Close	src/utils/BamTools/include/BamReader.hpp	/^		void Close(void)$/;"	f	class:BamTools::BamReader
Close	src/utils/BamTools/include/BamWriter.hpp	/^		void Close(void)$/;"	f	class:BamTools::BamWriter
Close	src/utils/bedFile/bedFile.cpp	/^void BedFile::Close(void) {$/;"	f	class:BedFile
Close	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::Close(void) {$/;"	f	class:BedFilePE
Close	src/utils/bedGraphFile/bedGraphFile.cpp	/^void BedGraphFile::Close() {$/;"	f	class:BedGraphFile
Close	src/utils/tabFile/tabFile.cpp	/^void TabFile::Close(void) {$/;"	f	class:TabFile
CloseAnnoFiles	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::CloseAnnoFiles() {$/;"	f	class:BedAnnotate
CloseAnnoFiles	src/tagBam/tagBam.cpp	/^void TagBam::CloseAnnoFiles() {$/;"	f	class:TagBam
CloseBedgraphFiles	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::CloseBedgraphFiles() {$/;"	f	class:UnionBedGraphs
CloseFiles	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::CloseFiles() {$/;"	f	class:MultiIntersectBed
CloseSweep	src/utils/NewChromsweep/CloseSweep.cpp	/^CloseSweep::CloseSweep(ContextClosest *context)$/;"	f	class:CloseSweep
CloseSweep	src/utils/NewChromsweep/CloseSweep.h	/^class CloseSweep : public NewChromSweep {$/;"	c
ClosestFile	src/closestFile/closestFile.cpp	/^ClosestFile::ClosestFile(ContextClosest *context)$/;"	f	class:ClosestFile
ClosestFile	src/closestFile/closestFile.h	/^class ClosestFile : public IntersectFile {$/;"	c
Cluster	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::Cluster() {$/;"	f	class:MultiIntersectBed
ClusterBed	src/clusterBed/clusterBed.cpp	/^void BedCluster::ClusterBed() {$/;"	f	class:BedCluster
ClusterBedStranded	src/clusterBed/clusterBed.cpp	/^void BedCluster::ClusterBedStranded() {$/;"	f	class:BedCluster
CollectCoverage	src/multiBamCov/multiBamCov.cpp	/^void MultiCovBam::CollectCoverage()$/;"	f	class:MultiCovBam
CompareByWeight	src/utils/bedFile/bedFile.cpp	/^struct CompareByWeight {$/;"	s	file:
ComplementFile	src/complementFile/complementFile.cpp	/^ComplementFile::ComplementFile(ContextComplement *context)$/;"	f	class:ComplementFile
ComplementFile	src/complementFile/complementFile.h	/^class ComplementFile : public ToolBase {$/;"	c
Compressed	src/utils/BamTools/include/BamWriter.hpp	/^			Compressed,$/;"	e	enum:BamTools::BamWriter::CompressionMode
CompressionMode	src/utils/BamTools/include/BamWriter.hpp	/^		enum CompressionMode {$/;"	g	class:BamTools::BamWriter
ComputeOverlaps	src/getOverlap/getOverlap.cpp	/^void ComputeOverlaps(istream &input, short &s1Col, short &e1Col, short &s2Col, short &e2Col) {$/;"	f
Constants	src/utils/BamTools/include/api/SamConstants.h	/^namespace Constants {$/;"	n	namespace:BamTools
ConsumeNextCoordinate	src/unionBedGraphs/unionBedGraphs.cpp	/^CHRPOS UnionBedGraphs::ConsumeNextCoordinate() {$/;"	f	class:UnionBedGraphs
ContextBase	src/utils/Contexts/ContextBase.cpp	/^ContextBase::ContextBase()$/;"	f	class:ContextBase
ContextBase	src/utils/Contexts/ContextBase.h	/^class ContextBase {$/;"	c
ContextClosest	src/utils/Contexts/ContextClosest.cpp	/^ContextClosest::ContextClosest()$/;"	f	class:ContextClosest
ContextClosest	src/utils/Contexts/ContextClosest.h	/^class ContextClosest : public ContextIntersect {$/;"	c
ContextComplement	src/utils/Contexts/ContextComplement.cpp	/^ContextComplement::ContextComplement()$/;"	f	class:ContextComplement
ContextComplement	src/utils/Contexts/ContextComplement.h	/^class ContextComplement : public ContextBase {$/;"	c
ContextCoverage	src/utils/Contexts/ContextCoverage.cpp	/^ContextCoverage::ContextCoverage()$/;"	f	class:ContextCoverage
ContextCoverage	src/utils/Contexts/ContextCoverage.h	/^class ContextCoverage : public ContextIntersect {$/;"	c
ContextFileType	src/utils/Contexts/ContextBase.h	/^	typedef FileRecordTypeChecker::FILE_TYPE ContextFileType;$/;"	t	class:ContextBase
ContextFisher	src/utils/Contexts/ContextFisher.cpp	/^ContextFisher::ContextFisher() {$/;"	f	class:ContextFisher
ContextFisher	src/utils/Contexts/ContextFisher.h	/^class ContextFisher : public ContextJaccard {$/;"	c
ContextGroupBy	src/utils/Contexts/ContextGroupBy.cpp	/^ContextGroupBy::ContextGroupBy()$/;"	f	class:ContextGroupBy
ContextGroupBy	src/utils/Contexts/ContextGroupBy.h	/^class ContextGroupBy: public ContextBase {$/;"	c
ContextIntersect	src/utils/Contexts/ContextIntersect.cpp	/^ContextIntersect::ContextIntersect()$/;"	f	class:ContextIntersect
ContextIntersect	src/utils/Contexts/ContextIntersect.h	/^class ContextIntersect : public ContextBase {$/;"	c
ContextJaccard	src/utils/Contexts/ContextJaccard.cpp	/^ContextJaccard::ContextJaccard() {$/;"	f	class:ContextJaccard
ContextJaccard	src/utils/Contexts/ContextJaccard.h	/^class ContextJaccard : public ContextIntersect {$/;"	c
ContextMap	src/utils/Contexts/ContextMap.cpp	/^ContextMap::ContextMap()$/;"	f	class:ContextMap
ContextMap	src/utils/Contexts/ContextMap.h	/^class ContextMap : public ContextIntersect {$/;"	c
ContextMerge	src/utils/Contexts/ContextMerge.cpp	/^ContextMerge::ContextMerge()$/;"	f	class:ContextMerge
ContextMerge	src/utils/Contexts/ContextMerge.h	/^class ContextMerge: public ContextBase {$/;"	c
ContextRecordType	src/utils/Contexts/ContextBase.h	/^	typedef FileRecordTypeChecker::RECORD_TYPE ContextRecordType;$/;"	t	class:ContextBase
ContextSample	src/utils/Contexts/ContextSample.cpp	/^ContextSample::ContextSample()$/;"	f	class:ContextSample
ContextSample	src/utils/Contexts/ContextSample.h	/^class ContextSample : public ContextBase {$/;"	c
ContextSpacing	src/utils/Contexts/ContextSpacing.cpp	/^ContextSpacing::ContextSpacing()$/;"	f	class:ContextSpacing
ContextSpacing	src/utils/Contexts/ContextSpacing.h	/^class ContextSpacing : public ContextBase {$/;"	c
ContextSubtract	src/utils/Contexts/ContextSubtract.cpp	/^ContextSubtract::ContextSubtract()$/;"	f	class:ContextSubtract
ContextSubtract	src/utils/Contexts/ContextSubtract.h	/^class ContextSubtract : public ContextIntersect {$/;"	c
ConvertBamToBed	src/bamToBed/bamToBed.cpp	/^void ConvertBamToBed(const string &bamFile, bool useEditDistance, const string &bamTag,$/;"	f
ConvertBamToBedPE	src/pairToBed/pairToBed.h	/^    void ConvertBamToBedPE(const BamAlignment &bam1, const BamAlignment &bam2, const RefVector &refs, BEDPE &a) {$/;"	f	class:BedIntersectPE
ConvertBamToBedpe	src/bamToBed/bamToBed.cpp	/^void ConvertBamToBedpe(const string &bamFile, $/;"	f
ConvertBedPEToBam	src/bedpeToBam/bedpeToBam.cpp	/^void ConvertBedPEToBam(const BEDPE &bedpe, BamAlignment &bam1,BamAlignment &bam2, map<string, int, std::less<string> > &chromToId,$/;"	f
ConvertBedToBam	src/bedToBam/bedToBam.cpp	/^void ConvertBedToBam(const BED &bed, BamAlignment &bam, map<string, int, std::less<string> > &chromToId,$/;"	f
CoverageBam	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::CoverageBam(string bamFile) {$/;"	f	class:BedGenomeCoverage
CoverageBed	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::CoverageBed() {$/;"	f	class:BedGenomeCoverage
CoverageFile	src/coverageFile/coverageFile.cpp	/^CoverageFile::CoverageFile(ContextCoverage *context)$/;"	f	class:CoverageFile
CoverageFile	src/coverageFile/coverageFile.h	/^class CoverageFile : public IntersectFile {$/;"	c
CreateLinks	src/linksBed/linksBed.cpp	/^void BedLinks::CreateLinks() {$/;"	f	class:BedLinks
D	src/utils/htslib/cram/cram_structs.h	/^	} D;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon91
DBG_OUT	src/utils/htslib/thread_pool.c	/^int DBG_OUT(FILE *fp, char *fmt, ...) {$/;"	f
DBG_OUT	src/utils/htslib/thread_pool.c	62;"	d	file:
DEFAULT	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	e	enum:ContextCoverage::__anon132
DEFAULT_CAPACITY	src/utils/general/QuickString.h	/^	static const int DEFAULT_CAPACITY = 8;$/;"	m	class:string
DEFAULT_DEPTH_CAPACITY	src/coverageFile/coverageFile.h	/^	static const int DEFAULT_DEPTH_CAPACITY = 1024;$/;"	m	class:CoverageFile
DEFAULT_MAIN_BUF_READ_SIZE	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	static const int DEFAULT_MAIN_BUF_READ_SIZE = 1023;$/;"	m	class:BufferedStreamMgr
DEFAULT_NUM_SAMPLES	src/sampleFile/sampleFile.h	/^	static const int DEFAULT_NUM_SAMPLES = 1000000;$/;"	m	class:SampleFile
DEFAULT_PARSE_BUFFER_SIZE	src/utils/general/Tokenizer.h	/^	static const int DEFAULT_PARSE_BUFFER_SIZE = 4096; \/\/ 8Kb$/;"	m	class:Tokenizer
DEFAULT_PRECISION	src/utils/KeyListOps/KeyListOps.h	/^    static const int DEFAULT_PRECISION = 10;$/;"	m	class:KeyListOps
DELETE	src/utils/NewChromsweep/CloseSweep.h	/^ 	typedef enum { IGNORE, DELETE } rateOvlpType;$/;"	e	enum:CloseSweep::__anon134
DEPTH	src/utils/bedFile/bedFile.h	/^struct DEPTH {$/;"	s
DEPTH	src/utils/bedGraphFile/bedGraphFile.h	/^typedef uint32_t DEPTH;$/;"	t
DEPTH_TYPE	src/utils/bedGraphFile/bedGraphFile.h	/^    typedef T DEPTH_TYPE;$/;"	t	class:BEDGRAPH
DESC	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef enum { UNSORTED, ASC, DESC} SORT_TYPE;$/;"	e	enum:KeyListOpsMethods::__anon139
DIGEST_BUFSIZ	src/utils/htslib/hfile_s3.c	59;"	d	file:
DIGEST_BUFSIZ	src/utils/htslib/hfile_s3.c	72;"	d	file:
DISTINCT	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
DISTINCT_ONLY	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
DISTINCT_SORT_NUM	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
DISTINCT_SORT_NUM_DESC	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
DOWNSTREAM	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { UPSTREAM, INTERSECT, DOWNSTREAM } streamDirType;$/;"	e	enum:CloseSweep::__anon136
DS_AP	src/utils/htslib/cram/cram_structs.h	/^    DS_AP,$/;"	e	enum:cram_DS_ID
DS_BA	src/utils/htslib/cram/cram_structs.h	/^    DS_BA,$/;"	e	enum:cram_DS_ID
DS_BB	src/utils/htslib/cram/cram_structs.h	/^    DS_BB,$/;"	e	enum:cram_DS_ID
DS_BB_len	src/utils/htslib/cram/cram_structs.h	/^    DS_BB_len,$/;"	e	enum:cram_DS_ID
DS_BF	src/utils/htslib/cram/cram_structs.h	/^    DS_BF, \/\/ start loop$/;"	e	enum:cram_DS_ID
DS_BS	src/utils/htslib/cram/cram_structs.h	/^    DS_BS,$/;"	e	enum:cram_DS_ID
DS_CF	src/utils/htslib/cram/cram_structs.h	/^    DS_CF,$/;"	e	enum:cram_DS_ID
DS_CORE	src/utils/htslib/cram/cram_structs.h	/^    DS_CORE   = 0,$/;"	e	enum:cram_DS_ID
DS_DL	src/utils/htslib/cram/cram_structs.h	/^    DS_DL,$/;"	e	enum:cram_DS_ID
DS_END	src/utils/htslib/cram/cram_structs.h	/^    DS_END,$/;"	e	enum:cram_DS_ID
DS_FC	src/utils/htslib/cram/cram_structs.h	/^    DS_FC,$/;"	e	enum:cram_DS_ID
DS_FN	src/utils/htslib/cram/cram_structs.h	/^    DS_FN,$/;"	e	enum:cram_DS_ID
DS_FP	src/utils/htslib/cram/cram_structs.h	/^    DS_FP,$/;"	e	enum:cram_DS_ID
DS_HC	src/utils/htslib/cram/cram_structs.h	/^    DS_HC,$/;"	e	enum:cram_DS_ID
DS_IN	src/utils/htslib/cram/cram_structs.h	/^    DS_IN, \/\/ base_blk$/;"	e	enum:cram_DS_ID
DS_MF	src/utils/htslib/cram/cram_structs.h	/^    DS_MF,$/;"	e	enum:cram_DS_ID
DS_MQ	src/utils/htslib/cram/cram_structs.h	/^    DS_MQ,$/;"	e	enum:cram_DS_ID
DS_NF	src/utils/htslib/cram/cram_structs.h	/^    DS_NF,$/;"	e	enum:cram_DS_ID
DS_NP	src/utils/htslib/cram/cram_structs.h	/^    DS_NP,$/;"	e	enum:cram_DS_ID
DS_NS	src/utils/htslib/cram/cram_structs.h	/^    DS_NS,$/;"	e	enum:cram_DS_ID
DS_PD	src/utils/htslib/cram/cram_structs.h	/^    DS_PD,$/;"	e	enum:cram_DS_ID
DS_QQ	src/utils/htslib/cram/cram_structs.h	/^    DS_QQ,$/;"	e	enum:cram_DS_ID
DS_QQ_len	src/utils/htslib/cram/cram_structs.h	/^    DS_QQ_len,$/;"	e	enum:cram_DS_ID
DS_QS	src/utils/htslib/cram/cram_structs.h	/^    DS_QS, \/\/ qual_blk$/;"	e	enum:cram_DS_ID
DS_RG	src/utils/htslib/cram/cram_structs.h	/^    DS_RG,$/;"	e	enum:cram_DS_ID
DS_RI	src/utils/htslib/cram/cram_structs.h	/^    DS_RI,$/;"	e	enum:cram_DS_ID
DS_RL	src/utils/htslib/cram/cram_structs.h	/^    DS_RL,$/;"	e	enum:cram_DS_ID
DS_RN	src/utils/htslib/cram/cram_structs.h	/^    DS_RN, \/\/ name_blk$/;"	e	enum:cram_DS_ID
DS_RN_len	src/utils/htslib/cram/cram_structs.h	/^    DS_RN_len,$/;"	e	enum:cram_DS_ID
DS_RS	src/utils/htslib/cram/cram_structs.h	/^    DS_RS,$/;"	e	enum:cram_DS_ID
DS_SC	src/utils/htslib/cram/cram_structs.h	/^    DS_SC, \/\/ soft_blk$/;"	e	enum:cram_DS_ID
DS_SC_len	src/utils/htslib/cram/cram_structs.h	/^    DS_SC_len,$/;"	e	enum:cram_DS_ID
DS_TC	src/utils/htslib/cram/cram_structs.h	/^    DS_TC, \/\/ CRAM v1.0 tags$/;"	e	enum:cram_DS_ID
DS_TL	src/utils/htslib/cram/cram_structs.h	/^    DS_TL,$/;"	e	enum:cram_DS_ID
DS_TM	src/utils/htslib/cram/cram_structs.h	/^    DS_TM, \/\/ test$/;"	e	enum:cram_DS_ID
DS_TN	src/utils/htslib/cram/cram_structs.h	/^    DS_TN, \/\/ end loop$/;"	e	enum:cram_DS_ID
DS_TS	src/utils/htslib/cram/cram_structs.h	/^    DS_TS,$/;"	e	enum:cram_DS_ID
DS_TV	src/utils/htslib/cram/cram_structs.h	/^    DS_TV, \/\/ test$/;"	e	enum:cram_DS_ID
DS_aux	src/utils/htslib/cram/cram_structs.h	/^    DS_aux    = 1, \/\/ aux_blk$/;"	e	enum:cram_DS_ID
DS_aux_BD	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_BD = 4,$/;"	e	enum:cram_DS_ID
DS_aux_BD_S	src/utils/htslib/cram/cram_structs.h	817;"	d
DS_aux_BI	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_BI = 5,$/;"	e	enum:cram_DS_ID
DS_aux_BI_S	src/utils/htslib/cram/cram_structs.h	818;"	d
DS_aux_BQ	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_BQ = 3,$/;"	e	enum:cram_DS_ID
DS_aux_BQ_S	src/utils/htslib/cram/cram_structs.h	816;"	d
DS_aux_FZ	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_FZ = 6, \/\/ also ZM:B$/;"	e	enum:cram_DS_ID
DS_aux_FZ_S	src/utils/htslib/cram/cram_structs.h	819;"	d
DS_aux_OQ	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_OQ = 2,$/;"	e	enum:cram_DS_ID
DS_aux_OQ_S	src/utils/htslib/cram/cram_structs.h	815;"	d
DS_aux_S	src/utils/htslib/cram/cram_structs.h	814;"	d
DS_aux_oq	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_oq = 7, \/\/ other qualities$/;"	e	enum:cram_DS_ID
DS_aux_oq_S	src/utils/htslib/cram/cram_structs.h	820;"	d
DS_aux_os	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_os = 8, \/\/ other sequences$/;"	e	enum:cram_DS_ID
DS_aux_os_S	src/utils/htslib/cram/cram_structs.h	821;"	d
DS_aux_oz	src/utils/htslib/cram/cram_structs.h	/^    DS_aux_oz = 9, \/\/ other strings$/;"	e	enum:cram_DS_ID
DS_aux_oz_S	src/utils/htslib/cram/cram_structs.h	822;"	d
DS_ref	src/utils/htslib/cram/cram_structs.h	/^    DS_ref,$/;"	e	enum:cram_DS_ID
DetermineBedInput	src/bed12ToBed6/bed12ToBed6.cpp	/^void DetermineBedInput(BedFile *bed) {$/;"	f
DetermineBedInput	src/bedToIgv/bedToIgv.cpp	/^void DetermineBedInput(BedFile *bed, string path, string sortType, string session,$/;"	f
DetermineInput	src/getOverlap/getOverlap.cpp	/^void DetermineInput(string &inFile, short &s1Col, short &e1Col, short &s2Col, short &e2Col) {$/;"	f
DetermineNextChrom	src/multiIntersectBed/multiIntersectBed.cpp	/^string MultiIntersectBed::DetermineNextChrom() {$/;"	f	class:MultiIntersectBed
DetermineNextChrom	src/unionBedGraphs/unionBedGraphs.cpp	/^string UnionBedGraphs::DetermineNextChrom() {$/;"	f	class:UnionBedGraphs
DistanceTupleSortAscFunctor	src/utils/NewChromsweep/CloseSweep.h	/^class DistanceTupleSortAscFunctor {$/;"	c
E	src/utils/htslib/test/sam.c	97;"	d	file:
EACH_DB	src/utils/Contexts/ContextClosest.h	/^    typedef enum { EACH_DB, ALL_DBS } multiDbModeType;$/;"	e	enum:ContextClosest::__anon129
EI	src/utils/htslib/probaln.c	39;"	d	file:
EM	src/utils/htslib/probaln.c	40;"	d	file:
EMPTYRECORD_H_	src/utils/FileRecordTools/Records/EmptyRecord.h	9;"	d
EMPTY_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_FILE_TYPE, EMPTY_FILE_TYPE, SINGLE_LINE_DELIM_TEXT_FILE_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon122
EMPTY_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
END	src/utils/Point/Point.h	/^    END$/;"	e	enum:COORDINATE_TYPE
ENOTSUP	src/utils/htslib/hfile.c	40;"	d	file:
EOVERFLOW	src/utils/htslib/hfile.c	43;"	d	file:
EOVERFLOW	src/utils/htslib/sam.c	48;"	d	file:
EPROTO	src/utils/htslib/multipart.c	37;"	d	file:
EPROTONOSUPPORT	src/utils/htslib/hfile.c	46;"	d	file:
ERROR	src/utils/htslib/htslib/cram.h	/^    ERROR    = -1,$/;"	e	enum:cram_block_method
ERRORMSG_H_	src/utils/general/ErrorMsg.h	9;"	d
EXPAND	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
EXTERNAL	src/utils/htslib/cram/cram_structs.h	/^    EXTERNAL           = 4,$/;"	e	enum:cram_content_type
EXTERNAL	src/utils/htslib/htslib/cram.h	/^    EXTERNAL           = 4,$/;"	e	enum:cram_content_type
EXTRA_CFLAGS_PIC	src/utils/htslib/Makefile	/^EXTRA_CFLAGS_PIC = $/;"	m
EXT_OBJECTS	src/bedpeToBam/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/BinTree/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/BlockedIntervals/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/Contexts/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/FileRecordTools/FileReaders/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/FileRecordTools/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/FileRecordTools/Records/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/KeyListOps/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/NewChromsweep/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/RecordOutputMgr/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/ToolBase/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/bedFile/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/bedFilePE/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/bedGraphFile/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/chromsweep/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/sequenceUtilities/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
EXT_OBJECTS	src/utils/tabFile/Makefile	/^EXT_OBJECTS=$(patsubst %,$(OBJ_DIR)\/%,$(_EXT_OBJECTS))$/;"	m
E_BETA	src/utils/htslib/cram/cram_structs.h	/^    E_BETA               = 6,$/;"	e	enum:cram_encoding
E_BYTE	src/utils/htslib/cram/cram_structs.h	/^    E_BYTE               = 3,$/;"	e	enum:cram_external_type
E_BYTE_ARRAY	src/utils/htslib/cram/cram_structs.h	/^    E_BYTE_ARRAY         = 4,$/;"	e	enum:cram_external_type
E_BYTE_ARRAY_BLOCK	src/utils/htslib/cram/cram_structs.h	/^    E_BYTE_ARRAY_BLOCK   = 5,$/;"	e	enum:cram_external_type
E_BYTE_ARRAY_LEN	src/utils/htslib/cram/cram_structs.h	/^    E_BYTE_ARRAY_LEN     = 4,$/;"	e	enum:cram_encoding
E_BYTE_ARRAY_STOP	src/utils/htslib/cram/cram_structs.h	/^    E_BYTE_ARRAY_STOP    = 5,$/;"	e	enum:cram_encoding
E_EXTERNAL	src/utils/htslib/cram/cram_structs.h	/^    E_EXTERNAL           = 1,$/;"	e	enum:cram_encoding
E_GAMMA	src/utils/htslib/cram/cram_structs.h	/^    E_GAMMA              = 9,$/;"	e	enum:cram_encoding
E_GOLOMB	src/utils/htslib/cram/cram_structs.h	/^    E_GOLOMB             = 2,$/;"	e	enum:cram_encoding
E_GOLOMB_RICE	src/utils/htslib/cram/cram_structs.h	/^    E_GOLOMB_RICE        = 8,$/;"	e	enum:cram_encoding
E_HUFFMAN	src/utils/htslib/cram/cram_structs.h	/^    E_HUFFMAN            = 3,$/;"	e	enum:cram_encoding
E_INT	src/utils/htslib/cram/cram_structs.h	/^    E_INT                = 1,$/;"	e	enum:cram_external_type
E_LONG	src/utils/htslib/cram/cram_structs.h	/^    E_LONG               = 2,$/;"	e	enum:cram_external_type
E_NULL	src/utils/htslib/cram/cram_structs.h	/^    E_NULL               = 0,$/;"	e	enum:cram_encoding
E_NUM_CODECS	src/utils/htslib/cram/cram_structs.h	/^    E_NUM_CODECS         = 10, \/* Number of codecs, not a real one. *\/$/;"	e	enum:cram_encoding
E_SUBEXP	src/utils/htslib/cram/cram_structs.h	/^    E_SUBEXP             = 7,$/;"	e	enum:cram_encoding
Empty	src/utils/bedFile/bedFile.cpp	/^bool BedFile::Empty(void) {$/;"	f	class:BedFile
EmptyRecord	src/utils/FileRecordTools/Records/EmptyRecord.cpp	/^EmptyRecord::EmptyRecord() {$/;"	f	class:EmptyRecord
EmptyRecord	src/utils/FileRecordTools/Records/EmptyRecord.h	/^class EmptyRecord : public Record {$/;"	c
ErrorString	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string AlignedBases, Qualities, ErrorString, TagData;$/;"	m	class:BamTools::BamAlignment
Expand	src/expand/expand.cpp	/^void Expand (const string &inFile,$/;"	f
ExtractDNA	src/fastaFromBed/fastaFromBed.cpp	/^void Bed2Fa::ExtractDNA() {$/;"	f	class:Bed2Fa
F	src/utils/htslib/md5.c	76;"	d	file:
FAI_CREATE	src/utils/htslib/htslib/faidx.h	/^    FAI_CREATE = 0x01,$/;"	e	enum:fai_load_options
FASTAFROMBED_H	src/fastaFromBed/fastaFromBed.h	13;"	d
FIFO_STRING_LITERAL	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^const char *InputStreamMgr::FIFO_STRING_LITERAL = "\/dev\/fd";$/;"	m	class:InputStreamMgr	file:
FIFO_STRING_LITERAL	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	static const char *FIFO_STRING_LITERAL;$/;"	m	class:InputStreamMgr
FILEREADER_H_	src/utils/FileRecordTools/FileReaders/FileReader.h	2;"	d
FILERECORDMERGEMGR_H_	src/utils/FileRecordTools/FileRecordMergeMgr.h	9;"	d
FILERECORDMGR_H_	src/utils/FileRecordTools/FileRecordMgr.h	9;"	d
FILERECORDTYPECHECKER_H_	src/utils/fileType/FileRecordTypeChecker.h	9;"	d
FILETYPE_H	src/utils/fileType/fileType.h	13;"	d
FILE_HEADER	src/utils/htslib/cram/cram_structs.h	/^    FILE_HEADER        = 0,$/;"	e	enum:cram_content_type
FILE_HEADER	src/utils/htslib/htslib/cram.h	/^    FILE_HEADER        = 0,$/;"	e	enum:cram_content_type
FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			GFF_FILE_TYPE, GZIP_FILE_TYPE, BAM_FILE_TYPE, VCF_FILE_TYPE} FILE_TYPE;$/;"	t	class:FileRecordTypeChecker	typeref:enum:FileRecordTypeChecker::__anon122
FIRST	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
FIRST_TIE	src/utils/Contexts/ContextClosest.h	/^    typedef enum { FIRST_TIE, LAST_TIE, ALL_TIES} tieModeType;$/;"	e	enum:ContextClosest::__anon127
FISHER	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
FISHER_H_	src/fisher/fisher.h	9;"	d
FIXED_WINDOW_COUNT	src/windowMaker/windowMaker.h	/^        FIXED_WINDOW_COUNT$/;"	e	enum:WindowMaker::WINDOW_METHOD
FIXED_WINDOW_SIZE	src/windowMaker/windowMaker.h	/^        FIXED_WINDOW_SIZE,$/;"	e	enum:WindowMaker::WINDOW_METHOD
FLAG_ACCESSOR	src/utils/BamTools/include/BamAlignment.hpp	228;"	d
FLANK	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
FORWARD	src/utils/FileRecordTools/Records/Record.h	/^	typedef enum { FORWARD, REVERSE, UNKNOWN } strandType;$/;"	e	enum:Record::__anon124
FORWARD_ONLY	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { NEITHER, FORWARD_ONLY, REVERSE_ONLY, BOTH } purgeDirectionType;$/;"	e	enum:CloseSweep::__anon137
FREELIST_H_	src/utils/general/FreeList.h	9;"	d
FREQ_ASC	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
FREQ_DESC	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
FT_BCF	src/utils/htslib/htslib/hts.h	661;"	d
FT_BCF_GZ	src/utils/htslib/htslib/hts.h	662;"	d
FT_GZ	src/utils/htslib/htslib/hts.h	658;"	d
FT_STDIN	src/utils/htslib/htslib/hts.h	663;"	d
FT_UNKN	src/utils/htslib/htslib/hts.h	657;"	d
FT_VCF	src/utils/htslib/htslib/hts.h	659;"	d
FT_VCF_GZ	src/utils/htslib/htslib/hts.h	660;"	d
FastaIndex	src/utils/Fasta/Fasta.cpp	/^FastaIndex::FastaIndex(bool useFullHeader) $/;"	f	class:FastaIndex
FastaIndex	src/utils/Fasta/Fasta.h	/^class FastaIndex : public map<string, FastaIndexEntry> {$/;"	c
FastaIndexEntry	src/utils/Fasta/Fasta.cpp	/^FastaIndexEntry::FastaIndexEntry(string name, int length, long long offset, int line_blen, int line_len, bool useFullHeader)$/;"	f	class:FastaIndexEntry
FastaIndexEntry	src/utils/Fasta/Fasta.cpp	/^FastaIndexEntry::FastaIndexEntry(void) \/\/ empty constructor$/;"	f	class:FastaIndexEntry
FastaIndexEntry	src/utils/Fasta/Fasta.h	/^class FastaIndexEntry {$/;"	c
FastaReference	src/utils/Fasta/Fasta.h	/^        FastaReference(void) : usingmmap(false), usingfullheader(false) { }$/;"	f	class:FastaReference
FastaReference	src/utils/Fasta/Fasta.h	/^class FastaReference {$/;"	c
FileReader	src/utils/FileRecordTools/FileReaders/FileReader.cpp	/^FileReader::FileReader()$/;"	f	class:FileReader
FileReader	src/utils/FileRecordTools/FileReaders/FileReader.h	/^class FileReader {$/;"	c
FileRecordMergeMgr	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^FileRecordMergeMgr::FileRecordMergeMgr(const string & filename)$/;"	f	class:FileRecordMergeMgr
FileRecordMergeMgr	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^class FileRecordMergeMgr : public FileRecordMgr {$/;"	c
FileRecordMgr	src/utils/FileRecordTools/FileRecordMgr.cpp	/^FileRecordMgr::FileRecordMgr(const string &filename)$/;"	f	class:FileRecordMgr
FileRecordMgr	src/utils/FileRecordTools/FileRecordMgr.h	/^class FileRecordMgr {$/;"	c
FileRecordTypeChecker	src/utils/fileType/FileRecordTypeChecker.cpp	/^FileRecordTypeChecker::FileRecordTypeChecker()$/;"	f	class:FileRecordTypeChecker
FileRecordTypeChecker	src/utils/fileType/FileRecordTypeChecker.h	/^class FileRecordTypeChecker {$/;"	c
FileType	src/utils/bedFile/bedFile.h	/^enum FileType$/;"	g
Filename	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string Filename;$/;"	m	class:BamTools::BamAlignment
Filename	src/utils/BamTools/include/SamHeader.hpp	/^		const char* Filename() $/;"	f	class:BamTools::SamHeader
Files	src/utils/htslib/test/test_bgzf.c	/^} Files;$/;"	t	typeref:struct:__anon50	file:
FindBlockedOverlaps	src/multiBamCov/multiBamCov.cpp	/^bool MultiCovBam::FindBlockedOverlaps(const BED &a, const vector<BED> &a_blocks, $/;"	f	class:MultiCovBam
FindHitsOnBothEnds	src/pairToPair/pairToPair.cpp	/^bool PairToPair::FindHitsOnBothEnds(const BEDPE &a, const vector<MATE> &qualityHitsEnd1,$/;"	f	class:PairToPair
FindHitsOnEitherEnd	src/pairToPair/pairToPair.cpp	/^void PairToPair::FindHitsOnEitherEnd(const BEDPE &a, const vector<MATE> &qualityHitsEnd1,$/;"	f	class:PairToPair
FindOneOrMoreOverlaps	src/pairToBed/pairToBed.cpp	/^bool BedIntersectPE::FindOneOrMoreOverlaps(const BEDPE &a, const string &type) {$/;"	f	class:BedIntersectPE
FindOneOrMoreSpanningOverlaps	src/pairToBed/pairToBed.cpp	/^bool BedIntersectPE::FindOneOrMoreSpanningOverlaps(const BEDPE &a, const string &type) {$/;"	f	class:BedIntersectPE
FindOneOrMoreWindowOverlaps	src/windowBed/windowBed.cpp	/^bool BedWindow::FindOneOrMoreWindowOverlaps(const BED &a) {$/;"	f	class:BedWindow
FindOverlaps	src/pairToBed/pairToBed.cpp	/^void BedIntersectPE::FindOverlaps(const BEDPE &a, vector<BED> &hits1, vector<BED> &hits2, const string &type) {$/;"	f	class:BedIntersectPE
FindOverlaps	src/pairToPair/pairToPair.cpp	/^void PairToPair::FindOverlaps(const BEDPE &a) {$/;"	f	class:PairToPair
FindOverlapsPerBin	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::FindOverlapsPerBin(int bEnd, string chrom, CHRPOS start, CHRPOS end, string name, string strand,$/;"	f	class:BedFilePE
FindSpanningOverlaps	src/pairToBed/pairToBed.cpp	/^void BedIntersectPE::FindSpanningOverlaps(const BEDPE &a, vector<BED> &hits, const string &type) {$/;"	f	class:BedIntersectPE
FindWindowOverlaps	src/windowBed/windowBed.cpp	/^void BedWindow::FindWindowOverlaps(const BED &a, vector<BED> &hits) {$/;"	f	class:BedWindow
Fisher	src/fisher/fisher.cpp	/^Fisher::Fisher(ContextFisher *context)$/;"	f	class:Fisher
Fisher	src/fisher/fisher.h	/^class Fisher : public Jaccard {$/;"	c
FlankBed	src/flankBed/flankBed.cpp	/^void BedFlank::FlankBed() {$/;"	f	class:BedFlank
FreeList	src/utils/general/FreeList.h	/^	FreeList(int blockSize=512)$/;"	f	class:FreeList
FreeList	src/utils/general/FreeList.h	/^class FreeList {$/;"	c
G	src/utils/htslib/md5.c	77;"	d	file:
GENOMECOV	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
GENOMEFILE_H	src/utils/GenomeFile/GenomeFile.h	13;"	d
GENOME_FILE	src/windowMaker/windowMaker.h	/^        GENOME_FILE,$/;"	e	enum:WindowMaker::INPUT_FILE_TYPE
GET	src/utils/htslib/md5.c	101;"	d	file:
GET	src/utils/htslib/md5.c	110;"	d	file:
GETFASTA	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
GET_BIT_MSB	src/utils/htslib/cram/cram_codecs.h	156;"	d
GFFPLUSRECORD_H_	src/utils/FileRecordTools/Records/GffPlusRecord.h	9;"	d
GFF_FILETYPE	src/utils/bedFile/bedFile.h	/^    GFF_FILETYPE,$/;"	e	enum:FileType
GFF_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			GFF_FILE_TYPE, GZIP_FILE_TYPE, BAM_FILE_TYPE, VCF_FILE_TYPE} FILE_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon122
GFF_PLUS_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		GFF_PLUS_RECORD_TYPE, NO_POS_PLUS_RECORD_TYPE} RECORD_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon123
GFF_RECORD_H_	src/utils/FileRecordTools/Records/GffRecord.h	9;"	d
GFF_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
GREEN	src/bedtools.cpp	30;"	d	file:
GROUPBY	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
GROUPBY_H_	src/groupBy/groupBy.h	8;"	d
GROUP_BY	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
GT_HAPL_A	src/utils/htslib/htslib/vcfutils.h	110;"	d
GT_HAPL_R	src/utils/htslib/htslib/vcfutils.h	109;"	d
GT_HET_AA	src/utils/htslib/htslib/vcfutils.h	108;"	d
GT_HET_RA	src/utils/htslib/htslib/vcfutils.h	107;"	d
GT_HOM_AA	src/utils/htslib/htslib/vcfutils.h	106;"	d
GT_HOM_RR	src/utils/htslib/htslib/vcfutils.h	105;"	d
GT_UNKN	src/utils/htslib/htslib/vcfutils.h	111;"	d
GZBUFSIZ	src/utils/general/InflateStreamBuf.h	20;"	d
GZIP	src/utils/htslib/cram/cram_structs.h	/^    GZIP     = 1,$/;"	e	enum:cram_block_method
GZIP	src/utils/htslib/htslib/cram.h	/^    GZIP     = 1,$/;"	e	enum:cram_block_method
GZIP_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			GFF_FILE_TYPE, GZIP_FILE_TYPE, BAM_FILE_TYPE, VCF_FILE_TYPE} FILE_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon122
GZIP_LINE_BUF_SIZE	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	static const int GZIP_LINE_BUF_SIZE = 8191; \/\/ 8K$/;"	m	class:BufferedStreamMgr
GZIP_RLE	src/utils/htslib/cram/cram_structs.h	/^    GZIP_RLE = 11, \/\/ NB: not externalised in CRAM$/;"	e	enum:cram_block_method
GZIP_RLE	src/utils/htslib/htslib/cram.h	/^    GZIP_RLE = 11, \/\/ NB: not externalised in CRAM$/;"	e	enum:cram_block_method
GZSTREAM_H	src/utils/gzstream/gzstream.h	30;"	d
GZSTREAM_NAMESPACE	src/utils/gzstream/gzstream.C	/^namespace GZSTREAM_NAMESPACE {$/;"	n	file:
GZSTREAM_NAMESPACE	src/utils/gzstream/gzstream.h	/^namespace GZSTREAM_NAMESPACE {$/;"	n
Generate	src/randomBed/randomBed.cpp	/^void BedRandom::Generate() $/;"	f	class:BedRandom
GenerateID	src/windowMaker/windowMaker.cpp	/^string WindowMaker::GenerateID(const BED& interval, uint32_t window_index, uint32_t num_windows, bool _reverse) const {$/;"	f	class:WindowMaker
GenomeFile	src/utils/GenomeFile/GenomeFile.cpp	/^GenomeFile::GenomeFile(const RefVector &genome) {$/;"	f	class:GenomeFile
GenomeFile	src/utils/GenomeFile/GenomeFile.cpp	/^GenomeFile::GenomeFile(const string &genomeFile) {$/;"	f	class:GenomeFile
GenomeFile	src/utils/GenomeFile/GenomeFile.h	/^class GenomeFile {$/;"	c
GetAbsMax	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetAbsMax(void)$/;"	f	class:VectorOps
GetAbsMin	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetAbsMin(void)$/;"	f	class:VectorOps
GetAlignmentFlag	src/utils/BamTools/include/BamAlignment.hpp	/^		inline bool GetAlignmentFlag(uint32_t mask) const$/;"	f	class:BamTools::BamAlignment
GetAntiMode	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetAntiMode(void)$/;"	f	class:VectorOps
GetBamBlocks	src/utils/BlockedIntervals/BlockedIntervals.cpp	/^void GetBamBlocks(const BamAlignment &bam,$/;"	f
GetBedBlocks	src/utils/BlockedIntervals/BlockedIntervals.cpp	/^void GetBedBlocks(const BED &bed, bedVector &bedBlocks) {$/;"	f
GetCollapse	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetCollapse(string delimiter)$/;"	f	class:VectorOps
GetConcat	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetConcat(void)$/;"	f	class:VectorOps
GetCount	src/utils/VectorOps/VectorOps.cpp	/^uint32_t VectorOps::GetCount(void)$/;"	f	class:VectorOps
GetCountDistinct	src/utils/VectorOps/VectorOps.cpp	/^uint32_t VectorOps::GetCountDistinct(void)$/;"	f	class:VectorOps
GetDistinct	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetDistinct(void)$/;"	f	class:VectorOps
GetDistinctSortNum	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetDistinctSortNum(bool ascending)$/;"	f	class:VectorOps
GetEndPosition	src/utils/BamTools/include/BamAlignment.hpp	/^		int GetEndPosition(bool usePadded = false, bool closedInterval = false) const$/;"	f	class:BamTools::BamAlignment
GetErrorString	src/utils/BamTools/include/BamReader.hpp	/^		std::string GetErrorString() const$/;"	f	class:BamTools::BamReader
GetFirst	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetFirst(void)$/;"	f	class:VectorOps
GetFreqAsc	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetFreqAsc(void)$/;"	f	class:VectorOps
GetFreqDesc	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetFreqDesc(void)$/;"	f	class:VectorOps
GetHeader	src/utils/BamTools/include/BamReader.hpp	/^		SamHeader GetHeader(int idx = 0) const$/;"	f	class:BamTools::BamReader
GetHeader	src/utils/bedFile/bedFile.cpp	/^void BedFile::GetHeader(void) {$/;"	f	class:BedFile
GetHeaderStruct	src/utils/BamTools/include/SamHeader.hpp	/^		bam_hdr_t* GetHeaderStruct() $/;"	f	class:BamTools::SamHeader
GetHeaderText	src/utils/BamTools/include/BamReader.hpp	/^		std::string GetHeaderText(int idx = 0) const $/;"	f	class:BamTools::BamReader
GetHeaderText	src/utils/BamTools/include/SamHeader.hpp	/^		std::string GetHeaderText() const $/;"	f	class:BamTools::SamHeader
GetLast	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetLast(void)$/;"	f	class:VectorOps
GetMax	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetMax(void)$/;"	f	class:VectorOps
GetMean	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetMean(void) $/;"	f	class:VectorOps
GetMedian	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetMedian(void) $/;"	f	class:VectorOps
GetMin	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetMin(void)$/;"	f	class:VectorOps
GetMode	src/utils/VectorOps/VectorOps.cpp	/^string VectorOps::GetMode(void)$/;"	f	class:VectorOps
GetNextAlignment	src/utils/BamTools/include/BamReader.hpp	/^		bool GetNextAlignment(BamAlignment& alignment)$/;"	f	class:BamTools::BamReader
GetNextAlignmentCore	src/utils/BamTools/include/BamReader.hpp	/^		bool GetNextAlignmentCore(BamAlignment& alignment)$/;"	f	class:BamTools::BamReader
GetNextBed	src/utils/bedFile/bedFile.cpp	/^bool BedFile::GetNextBed(BED &bed, bool forceSorted) {$/;"	f	class:BedFile
GetNextBedGraph	src/utils/bedGraphFile/bedGraphFile.h	/^    BedGraphLineStatus GetNextBedGraph (BEDGRAPH<T> &bedgraph, int &lineNum)$/;"	f	class:BedGraphFile
GetNextBedPE	src/utils/bedFilePE/bedFilePE.cpp	/^BedLineStatus BedFilePE::GetNextBedPE (BEDPE &bedpe, int &lineNum) {$/;"	f	class:BedFilePE
GetNextMergedBed	src/utils/bedFile/bedFile.cpp	/^bool BedFile::GetNextMergedBed(BED &merged_bed) {$/;"	f	class:BedFile
GetNextTabLine	src/utils/tabFile/tabFile.cpp	/^TabLineStatus TabFile::GetNextTabLine(TAB_FIELDS &tabFields, int &lineNum) {$/;"	f	class:TabFile
GetReferenceData	src/utils/BamTools/include/BamReader.hpp	/^		const RefVector GetReferenceData() const$/;"	f	class:BamTools::BamReader
GetReferenceData	src/utils/BamTools/include/SamHeader.hpp	/^		RefVector GetReferenceData() const$/;"	f	class:BamTools::SamHeader
GetReferenceID	src/utils/BamTools/include/BamReader.hpp	/^		int GetReferenceID(const std::string& refname)$/;"	f	class:BamTools::BamReader
GetSstddev	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetSstddev(void) $/;"	f	class:VectorOps
GetStddev	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetStddev(void) $/;"	f	class:VectorOps
GetSum	src/utils/VectorOps/VectorOps.cpp	/^double VectorOps::GetSum(void) $/;"	f	class:VectorOps
GetTag	src/utils/BamTools/include/BamAlignment.hpp	/^		bool GetTag(const std::string& tag, T& destination) const$/;"	f	class:BamTools::BamAlignment
GetTotalBlockLength	src/utils/BlockedIntervals/BlockedIntervals.cpp	/^int GetTotalBlockLength(const bedVector &bedBlocks) {$/;"	f
GffPlusRecord	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^GffPlusRecord::GffPlusRecord()$/;"	f	class:GffPlusRecord
GffPlusRecord	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^class GffPlusRecord : public GffRecord {$/;"	c
GffRecord	src/utils/FileRecordTools/Records/GffRecord.cpp	/^GffRecord::GffRecord() {$/;"	f	class:GffRecord
GffRecord	src/utils/FileRecordTools/Records/GffRecord.h	/^class GffRecord : public Bed6Interval {$/;"	c
GroupBy	src/groupBy/groupBy.cpp	/^GroupBy::GroupBy(ContextGroupBy *context)$/;"	f	class:GroupBy
GroupBy	src/groupBy/groupBy.h	/^class GroupBy : public ToolBase {$/;"	c
GroupOrder	src/utils/BamTools/include/SamHeader.hpp	/^		std::string GroupOrder;$/;"	m	class:BamTools::SamHeader
H	src/utils/htslib/cram/cram_structs.h	/^	} H;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon94
H	src/utils/htslib/md5.c	78;"	d	file:
H2	src/utils/htslib/md5.c	79;"	d	file:
HAS_EOF	src/utils/htslib/bgzf.c	/^    HAS_EOF,$/;"	e	enum:mtaux_cmd	file:
HAVE_CLOSESOCKET	src/utils/htslib/hfile.c	494;"	d	file:
HAVE_DRAND48	src/utils/htslib/config.h	5;"	d
HAVE_FSEEKO	src/utils/htslib/config.h	4;"	d
HAVE_LIBBZ2	src/utils/htslib/config.h	2;"	d
HAVE_LIBLZMA	src/utils/htslib/config.h	3;"	d
HAVE_SETMODE	src/utils/htslib/hfile.c	495;"	d	file:
HAVE_STRUCT_STAT_ST_BLKSIZE	src/utils/htslib/hfile.c	491;"	d	file:
HEADERS	src/utils/version/Makefile	/^HEADERS= version.h version_git.h$/;"	m
HELLO	src/utils/htslib/test/sam.c	98;"	d	file:
HFILE_INTERNAL_H	src/utils/htslib/hfile_internal.h	26;"	d
HIST	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	e	enum:ContextCoverage::__anon132
HTSLIB_ALL	src/utils/htslib/htslib.mk	/^HTSLIB_ALL = \\$/;"	m
HTSLIB_BGZF_H	src/utils/htslib/htslib/bgzf.h	31;"	d
HTSLIB_CRAM_H	src/utils/htslib/htslib/cram.h	36;"	d
HTSLIB_FAIDX_H	src/utils/htslib/htslib/faidx.h	30;"	d
HTSLIB_HFILE_H	src/utils/htslib/htslib/hfile.h	27;"	d
HTSLIB_HTS_DEFS_H	src/utils/htslib/htslib/hts_defs.h	26;"	d
HTSLIB_HTS_H	src/utils/htslib/htslib/hts.h	29;"	d
HTSLIB_HTS_INTERNAL_H	src/utils/htslib/hts_internal.h	24;"	d
HTSLIB_HTS_OS_H	src/utils/htslib/htslib/hts_os.h	27;"	d
HTSLIB_HTS_RAND_H	src/utils/htslib/win/rand.h	17;"	d
HTSLIB_KFUNC_H	src/utils/htslib/htslib/kfunc.h	28;"	d
HTSLIB_KHASH_STR2INT_H	src/utils/htslib/htslib/khash_str2int.h	26;"	d
HTSLIB_PUBLIC_HEADERS	src/utils/htslib/htslib.mk	/^HTSLIB_PUBLIC_HEADERS = \\$/;"	m
HTSLIB_REGIDX_H	src/utils/htslib/htslib/regidx.h	54;"	d
HTSLIB_SAM_H	src/utils/htslib/htslib/sam.h	28;"	d
HTSLIB_SYNCED_BCF_READER_H	src/utils/htslib/htslib/synced_bcf_reader.h	57;"	d
HTSLIB_TBX_H	src/utils/htslib/htslib/tbx.h	28;"	d
HTSLIB_THREAD_POOL_H	src/utils/htslib/htslib/thread_pool.h	48;"	d
HTSLIB_VCFUTILS_H	src/utils/htslib/htslib/vcfutils.h	27;"	d
HTSLIB_VCF_H	src/utils/htslib/htslib/vcf.h	34;"	d
HTSLIB_VCF_SWEEP_H	src/utils/htslib/htslib/vcf_sweep.h	27;"	d
HTSPREFIX	src/utils/htslib/Makefile	/^HTSPREFIX =$/;"	m
HTSPREFIX	src/utils/htslib/htslib.mk	/^HTSPREFIX = $(HTSDIR)\/$/;"	m
HTS_ALLOW_UNALIGNED	src/utils/htslib/htslib/hts_endian.h	96;"	d
HTS_ALLOW_UNALIGNED	src/utils/htslib/htslib/hts_endian.h	98;"	d
HTS_BGZF_TYPEDEF	src/utils/htslib/htslib/bgzf.h	77;"	d
HTS_BGZF_TYPEDEF	src/utils/htslib/htslib/hts.h	43;"	d
HTS_BIG_ENDIAN	src/utils/htslib/htslib/hts_endian.h	69;"	d
HTS_BIG_ENDIAN	src/utils/htslib/htslib/hts_endian.h	80;"	d
HTS_COMPILER_HAS	src/utils/htslib/htslib/hts_defs.h	30;"	d
HTS_COMPILER_HAS	src/utils/htslib/htslib/hts_defs.h	39;"	d
HTS_DEPRECATED	src/utils/htslib/htslib/hts_defs.h	65;"	d
HTS_DEPRECATED	src/utils/htslib/htslib/hts_defs.h	67;"	d
HTS_DEPRECATED	src/utils/htslib/htslib/hts_defs.h	69;"	d
HTS_DEPRECATED	src/utils/htslib/test/sam.c	37;"	d	file:
HTS_DEPRECATED	src/utils/htslib/test/sam.c	38;"	d	file:
HTS_DEPRECATED_ENUM	src/utils/htslib/htslib/hts.h	/^    json HTS_DEPRECATED_ENUM("Use htsExactFormat 'htsget' instead") = htsget,$/;"	e	enum:htsExactFormat
HTS_DEPRECATED_ENUM	src/utils/htslib/htslib/hts_defs.h	73;"	d
HTS_DEPRECATED_ENUM	src/utils/htslib/htslib/hts_defs.h	75;"	d
HTS_ENDIAN_H	src/utils/htslib/htslib/hts_endian.h	27;"	d
HTS_FILE_OPTS_INIT	src/utils/htslib/htslib/hts.h	256;"	d
HTS_FMT_BAI	src/utils/htslib/htslib/hts.h	518;"	d
HTS_FMT_CRAI	src/utils/htslib/htslib/hts.h	520;"	d
HTS_FMT_CSI	src/utils/htslib/htslib/hts.h	517;"	d
HTS_FMT_TBI	src/utils/htslib/htslib/hts.h	519;"	d
HTS_FORMAT	src/utils/htslib/htslib/hts_defs.h	91;"	d
HTS_FORMAT	src/utils/htslib/htslib/hts_defs.h	93;"	d
HTS_GCC_AT_LEAST	src/utils/htslib/htslib/hts_defs.h	34;"	d
HTS_GCC_AT_LEAST	src/utils/htslib/htslib/hts_defs.h	42;"	d
HTS_IDX_NOCOOR	src/utils/htslib/htslib/hts.h	512;"	d
HTS_IDX_NONE	src/utils/htslib/htslib/hts.h	515;"	d
HTS_IDX_REST	src/utils/htslib/htslib/hts.h	514;"	d
HTS_IDX_START	src/utils/htslib/htslib/hts.h	513;"	d
HTS_LITTLE_ENDIAN	src/utils/htslib/htslib/hts_endian.h	56;"	d
HTS_LITTLE_ENDIAN	src/utils/htslib/htslib/hts_endian.h	79;"	d
HTS_LOG_DEBUG	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_DEBUG,          \/\/\/< Logging of all except the most detailed debug events.$/;"	e	enum:htsLogLevel
HTS_LOG_ERROR	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_ERROR,          \/\/\/< Logging of errors only.$/;"	e	enum:htsLogLevel
HTS_LOG_H	src/utils/htslib/htslib/hts_log.h	30;"	d
HTS_LOG_INFO	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_INFO,           \/\/\/< Logging of errors, warnings, and normal but significant events.$/;"	e	enum:htsLogLevel
HTS_LOG_OFF	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_OFF,            \/\/\/< All logging disabled.$/;"	e	enum:htsLogLevel
HTS_LOG_TRACE	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_TRACE           \/\/\/< All logging enabled.$/;"	e	enum:htsLogLevel
HTS_LOG_WARNING	src/utils/htslib/htslib/hts_log.h	/^    HTS_LOG_WARNING = 3,    \/\/\/< Logging of errors and warnings.$/;"	e	enum:htsLogLevel
HTS_MIN_MARKER_DIST	src/utils/htslib/hts.c	1265;"	d	file:
HTS_NORETURN	src/utils/htslib/htslib/hts_defs.h	46;"	d
HTS_NORETURN	src/utils/htslib/htslib/hts_defs.h	48;"	d
HTS_OPT_BLOCK_SIZE	src/utils/htslib/htslib/hts.h	/^    HTS_OPT_BLOCK_SIZE,$/;"	e	enum:hts_fmt_option
HTS_OPT_CACHE_SIZE	src/utils/htslib/htslib/hts.h	/^    HTS_OPT_CACHE_SIZE,$/;"	e	enum:hts_fmt_option
HTS_OPT_COMPRESSION_LEVEL	src/utils/htslib/htslib/hts.h	/^    HTS_OPT_COMPRESSION_LEVEL = 100,$/;"	e	enum:hts_fmt_option
HTS_OPT_NTHREADS	src/utils/htslib/htslib/hts.h	/^    HTS_OPT_NTHREADS,$/;"	e	enum:hts_fmt_option
HTS_OPT_THREAD_POOL	src/utils/htslib/htslib/hts.h	/^    HTS_OPT_THREAD_POOL,$/;"	e	enum:hts_fmt_option
HTS_PARSE_THOUSANDS_SEP	src/utils/htslib/htslib/hts.h	616;"	d
HTS_PRINTF_FMT	src/utils/htslib/htslib/hts_defs.h	85;"	d
HTS_PRINTF_FMT	src/utils/htslib/htslib/hts_defs.h	87;"	d
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^        HTS_RESULT_USED;$/;"	m	struct:hFILE_backend
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^        HTS_RESULT_USED;$/;"	m	struct:hFILE_scheme_handler
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    hFILE *(*open)(const char *filename, const char *mode) HTS_RESULT_USED;$/;"	m	struct:hFILE_scheme_handler
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    int (*close)(hFILE *fp) HTS_RESULT_USED;$/;"	m	struct:hFILE_backend
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    int (*flush)(hFILE *fp) HTS_RESULT_USED;$/;"	m	struct:hFILE_backend
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    int (*isremote)(const char *filename) HTS_RESULT_USED;$/;"	m	struct:hFILE_scheme_handler
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    off_t (*seek)(hFILE *fp, off_t offset, int whence) HTS_RESULT_USED;$/;"	m	struct:hFILE_backend
HTS_RESULT_USED	src/utils/htslib/hfile_internal.h	/^    ssize_t (*read)(hFILE *fp, void *buffer, size_t nbytes) HTS_RESULT_USED;$/;"	m	struct:hFILE_backend
HTS_RESULT_USED	src/utils/htslib/htslib/hts_defs.h	53;"	d
HTS_RESULT_USED	src/utils/htslib/htslib/hts_defs.h	55;"	d
HTS_UNUSED	src/utils/htslib/htslib/hts_defs.h	59;"	d
HTS_UNUSED	src/utils/htslib/htslib/hts_defs.h	61;"	d
HTS_VERSION	src/utils/htslib/version.h	1;"	d
HTS_x86	src/utils/htslib/htslib/hts_endian.h	43;"	d
HasCoreOnly	src/utils/BamTools/include/BamAlignment.hpp	/^			bool HasCoreOnly;  \/* TODO(haohou): populate the string data *\/$/;"	m	struct:BamTools::BamAlignment::_SupportData
HasIndexes	src/utils/BamTools/include/BamReader.hpp	/^		bool HasIndexes()$/;"	f	class:BamTools::BamReader
HasTag	src/utils/BamTools/include/BamAlignment.hpp	/^		bool HasTag(const std::string& tag) const$/;"	f	class:BamTools::BamAlignment
HasVersion	src/utils/BamTools/include/SamHeader.hpp	/^		bool HasVersion() $/;"	f	class:BamTools::SamHeader
HtsObj	src/utils/BamTools/include/BamAlignment.hpp	/^		const bam1_t* HtsObj() const $/;"	f	class:BamTools::BamAlignment
HtsObj2	src/utils/BamTools/include/BamAlignment.hpp	/^		bam1_t* HtsObj2() $/;"	f	class:BamTools::BamAlignment
I	src/utils/htslib/cram/cram_structs.h	/^	} I;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon89
I	src/utils/htslib/md5.c	80;"	d	file:
I18NSPHINXOPTS	docs/make.bat	/^	set I18NSPHINXOPTS=-D latex_paper_size=%PAPER% %I18NSPHINXOPTS%$/;"	v
I18NSPHINXOPTS	docs/make.bat	/^set I18NSPHINXOPTS=%SPHINXOPTS% .$/;"	v
ID_METHOD	src/windowMaker/windowMaker.h	/^    enum ID_METHOD {$/;"	g	class:WindowMaker
ID_NONE	src/windowMaker/windowMaker.h	/^        ID_NONE,$/;"	e	enum:WindowMaker::ID_METHOD
ID_SOURCE_ID	src/windowMaker/windowMaker.h	/^        ID_SOURCE_ID,$/;"	e	enum:WindowMaker::ID_METHOD
ID_SOURCE_ID_WINDOW_NUMBER	src/windowMaker/windowMaker.h	/^        ID_SOURCE_ID_WINDOW_NUMBER$/;"	e	enum:WindowMaker::ID_METHOD
ID_WINDOW_NUMBER	src/windowMaker/windowMaker.h	/^        ID_WINDOW_NUMBER,$/;"	e	enum:WindowMaker::ID_METHOD
ID_buf	src/utils/htslib/cram/sam_header.h	/^    char ID_buf[1024];  \/\/ temporary buffer$/;"	m	struct:__anon67
ID_cnt	src/utils/htslib/cram/sam_header.h	/^    int ID_cnt;$/;"	m	struct:__anon67
IGNORE	src/utils/NewChromsweep/CloseSweep.h	/^ 	typedef enum { IGNORE, DELETE } rateOvlpType;$/;"	e	enum:CloseSweep::__anon134
IGNORE	src/utils/general/Tokenizer.h	/^	typedef enum { USE_NOW, IGNORE } lastElemCode;$/;"	e	enum:Tokenizer::__anon1
IGV	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
INCLUDES	Makefile	/^INCLUDES =	-I$(SRC_DIR)\/utils\/bedFile \\$/;"	m
INCLUDES	src/annotateBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/bamToBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/bamToFastq/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/BamTools\/include \\$/;"	m
INCLUDES	src/bed12ToBed6/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/bedToBam/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/bedToIgv/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/bedpeToBam/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/closestFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/clusterBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/complementFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/coverageFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/expand/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/tabFile\/ \\$/;"	m
INCLUDES	src/fastaFromBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/fisher/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/flankBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/genomeCoverageBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/getOverlap/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/groupBy/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/intersectFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/jaccard/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/linksBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/mapFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/maskFastaFromBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/mergeFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/multiBamCov/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/multiIntersectBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/nekSandbox1/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/nucBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/pairToBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFilePE\/ \\$/;"	m
INCLUDES	src/pairToPair/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFilePE\/ \\$/;"	m
INCLUDES	src/randomBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/GenomeFile\/ \\$/;"	m
INCLUDES	src/regressTest/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/reldist/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/sampleFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/shiftBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/shuffleBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/slopBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/sortBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/spacingFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/split/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/subtractFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/Contexts\/ \\$/;"	m
INCLUDES	src/tagBam/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/unionBedGraphs/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedGraphFile\/ \\$/;"	m
INCLUDES	src/utils/BamTools-Ancillary/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/BamTools\/include \\$/;"	m
INCLUDES	src/utils/BinTree/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/BlockedIntervals/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/BamTools\/include \\$/;"	m
INCLUDES	src/utils/Contexts/Makefile	/^INCLUDES =  -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/Fasta/Makefile	/^INCLUDES = $/;"	m
INCLUDES	src/utils/FileRecordTools/FileReaders/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/BamTools\/include\/ \\$/;"	m
INCLUDES	src/utils/FileRecordTools/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/fileType\/ \\$/;"	m
INCLUDES	src/utils/FileRecordTools/Records/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/GenomeFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/KeyListOps/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/NewChromsweep/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/RecordOutputMgr/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/ToolBase/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/general\/ \\$/;"	m
INCLUDES	src/utils/bedFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/bedFilePE/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ -I$(UTILITIES_DIR)\/bedFile\/ -I$(UTILITIES_DIR)\/gzstream\/ -I$(UTILITIES_DIR)\/fileType\/$/;"	m
INCLUDES	src/utils/bedGraphFile/Makefile	/^INCLUDES =  -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/chromsweep/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/driver/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/utils/fileType/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/BamTools\/include\/ \\$/;"	m
INCLUDES	src/utils/general/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/gzstream/Makefile	/^INCLUDES = -I.$/;"	m
INCLUDES	src/utils/sequenceUtilities/Makefile	/^INCLUDES = $/;"	m
INCLUDES	src/utils/tabFile/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/lineFileUtilities\/ \\$/;"	m
INCLUDES	src/utils/version/Makefile	/^INCLUDES = $/;"	m
INCLUDES	src/windowBed/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/bedFile\/ \\$/;"	m
INCLUDES	src/windowMaker/Makefile	/^INCLUDES = -I$(UTILITIES_DIR)\/GenomeFile\/ \\$/;"	m
INFLATESTREAMBUF_H_	src/utils/general/InflateStreamBuf.h	9;"	d
INITIAL_NUM_ELEMS	src/utils/general/Tokenizer.h	/^	static const int INITIAL_NUM_ELEMS = 10;$/;"	m	class:Tokenizer
INPUTSTREAMMGR_H_	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	9;"	d
INPUT_FILE_TYPE	src/windowMaker/windowMaker.h	/^    enum INPUT_FILE_TYPE {$/;"	g	class:WindowMaker
INSTALL	src/utils/htslib/Makefile	/^INSTALL = install -p$/;"	m
INSTALL_DATA	src/utils/htslib/Makefile	/^INSTALL_DATA    = $(INSTALL) -m 644$/;"	m
INSTALL_DIR	src/utils/htslib/Makefile	/^INSTALL_DIR     = $(MKDIR_P) -m 755$/;"	m
INSTALL_LIB	src/utils/htslib/Makefile	/^INSTALL_LIB     = $(INSTALL_DATA)$/;"	m
INSTALL_MAN	src/utils/htslib/Makefile	/^INSTALL_MAN     = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	src/utils/htslib/Makefile	/^INSTALL_PROGRAM = $(INSTALL)$/;"	m
INTERSECT	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
INTERSECT	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { UPSTREAM, INTERSECT, DOWNSTREAM } streamDirType;$/;"	e	enum:CloseSweep::__anon136
INTERSECTBED_H	src/pairToBed/pairToBed.h	13;"	d
INTERSECTFILE_H	src/intersectFile/intersectFile.h	13;"	d
INVALID	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
IS_BAM	src/utils/htslib/tabix.c	66;"	d	file:
IS_BCF	src/utils/htslib/tabix.c	65;"	d	file:
IS_BED	src/utils/htslib/tabix.c	62;"	d	file:
IS_CRAM	src/utils/htslib/tabix.c	67;"	d	file:
IS_GFF	src/utils/htslib/tabix.c	61;"	d	file:
IS_SAM	src/utils/htslib/tabix.c	63;"	d	file:
IS_TXT	src/utils/htslib/tabix.c	68;"	d	file:
IS_VCF	src/utils/htslib/tabix.c	64;"	d	file:
InflateStreamBuf	src/utils/general/InflateStreamBuf.h	/^	InflateStreamBuf(std::istream* in):in(in),status_flag(0) {$/;"	f	class:InflateStreamBuf
InflateStreamBuf	src/utils/general/InflateStreamBuf.h	/^class InflateStreamBuf:public std::streambuf$/;"	c
InitAdditionalData	src/utils/BamTools/include/BamAlignment.hpp	/^		void InitAdditionalData()$/;"	f	class:BamTools::BamAlignment
InitCigarData	src/utils/BamTools/include/BamAlignment.hpp	/^		void InitCigarData()$/;"	f	class:BamTools::BamAlignment
InitializeMainFile	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::InitializeMainFile() {$/;"	f	class:BedAnnotate
InputStreamMgr	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^InputStreamMgr::InputStreamMgr(const string &filename, bool buildScanBuffer)$/;"	f	class:InputStreamMgr
InputStreamMgr	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^class InputStreamMgr {$/;"	c
InsertSize	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} InsertSize;$/;"	v	typeref:struct:_InsertSize_t
IntersectBamPE	src/pairToBed/pairToBed.cpp	/^void BedIntersectPE::IntersectBamPE(string bamFile) {$/;"	f	class:BedIntersectPE
IntersectBedPE	src/pairToBed/pairToBed.cpp	/^void BedIntersectPE::IntersectBedPE() {$/;"	f	class:BedIntersectPE
IntersectCommonHelp	src/utils/general/CommonHelp.cpp	/^void IntersectCommonHelp() {$/;"	f
IntersectFile	src/intersectFile/intersectFile.cpp	/^IntersectFile::IntersectFile(ContextIntersect *context)$/;"	f	class:IntersectFile
IntersectFile	src/intersectFile/intersectFile.h	/^class IntersectFile : public ToolBase {$/;"	c
IntersectOutputHelp	src/utils/general/CommonHelp.cpp	/^void IntersectOutputHelp() {$/;"	f
IntersectPairs	src/pairToPair/pairToPair.cpp	/^void PairToPair::IntersectPairs() {$/;"	f	class:PairToPair
IsCorrectMappingForBEDPE	src/pairToBed/pairToBed.cpp	/^bool IsCorrectMappingForBEDPE (const BamAlignment &bam) {$/;"	f
IsMapped	src/utils/BamTools/include/BamAlignment.hpp	/^		inline bool IsMapped() const$/;"	f	class:BamTools::BamAlignment
IsMateMapped	src/utils/BamTools/include/BamAlignment.hpp	/^		bool IsMateMapped() const$/;"	f	class:BamTools::BamAlignment
IsOpen	src/utils/BamTools/include/BamReader.hpp	/^		bool IsOpen() const $/;"	f	class:BamTools::BamReader
IsValidHit	src/utils/chromsweep/chromsweep.cpp	/^bool ChromSweep::IsValidHit(const BED &query, const BED &db) {$/;"	f	class:ChromSweep
JACCARD	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
JACCARD_H_	src/jaccard/jaccard.h	9;"	d
Jaccard	src/jaccard/jaccard.cpp	/^Jaccard::Jaccard(ContextJaccard *context)$/;"	f	class:Jaccard
Jaccard	src/jaccard/jaccard.h	/^class Jaccard : public IntersectFile {$/;"	c
Jcram_to_sam	src/utils/htslib/test/cross_validate.sh	/^Jcram_to_sam() {$/;"	f
K	src/utils/htslib/cram/sam_header.c	752;"	d	file:
KBITSET_H	src/utils/htslib/htslib/kbitset.h	27;"	d
KBS_ELT	src/utils/htslib/htslib/kbitset.h	60;"	d
KBS_ELTBITS	src/utils/htslib/htslib/kbitset.h	59;"	d
KBS_MASK	src/utils/htslib/htslib/kbitset.h	61;"	d
KEYLISTOPSMETHODS_H_	src/utils/KeyListOps/KeyListOpsMethods.h	9;"	d
KEYLISTOPS_H_	src/utils/KeyListOps/KeyListOps.h	9;"	d
KEYLIST_H_	src/utils/FileRecordTools/Records/RecordKeyList.h	9;"	d
KEYVECTOR_H_	src/utils/FileRecordTools/Records/RecordKeyVector.h	9;"	d
KFUNC_H_	src/fisher/kfunc.h	9;"	d
KF_GAMMA_EPS	src/fisher/kfunc.cpp	68;"	d	file:
KF_GAMMA_EPS	src/fisher/kfunc.h	17;"	d
KF_GAMMA_EPS	src/utils/htslib/kfunc.c	97;"	d	file:
KF_TINY	src/fisher/kfunc.cpp	69;"	d	file:
KF_TINY	src/fisher/kfunc.h	18;"	d
KF_TINY	src/utils/htslib/kfunc.c	98;"	d	file:
KHASH_DECLARE	src/utils/htslib/htslib/khash.h	357;"	d
KHASH_INIT	src/utils/htslib/htslib/khash.h	365;"	d
KHASH_INIT2	src/utils/htslib/htslib/khash.h	361;"	d
KHASH_MAP_INIT_INT	src/utils/htslib/htslib/khash.h	593;"	d
KHASH_MAP_INIT_INT64	src/utils/htslib/htslib/khash.h	608;"	d
KHASH_MAP_INIT_STR	src/utils/htslib/faidx.c	/^KHASH_MAP_INIT_STR(s, faidx1_t)$/;"	f
KHASH_MAP_INIT_STR	src/utils/htslib/htslib/khash.h	624;"	d
KHASH_SET_INIT_INT	src/utils/htslib/htslib/khash.h	585;"	d
KHASH_SET_INIT_INT64	src/utils/htslib/htslib/khash.h	600;"	d
KHASH_SET_INIT_STR	src/utils/htslib/htslib/khash.h	616;"	d
KLIST_INIT	src/utils/htslib/htslib/klist.h	120;"	d
KLIST_INIT2	src/utils/htslib/htslib/klist.h	77;"	d
KMEMPOOL_INIT	src/utils/htslib/htslib/klist.h	68;"	d
KMEMPOOL_INIT2	src/utils/htslib/htslib/klist.h	39;"	d
KNETFILE_H	src/utils/htslib/htslib/knetfile.h	28;"	d
KNF_TYPE_FTP	src/utils/htslib/htslib/knetfile.h	48;"	d
KNF_TYPE_HTTP	src/utils/htslib/htslib/knetfile.h	49;"	d
KNF_TYPE_LOCAL	src/utils/htslib/htslib/knetfile.h	47;"	d
KSEQ_DECLARE	src/utils/htslib/htslib/kseq.h	246;"	d
KSEQ_INIT	src/utils/htslib/htslib/kseq.h	244;"	d
KSEQ_INIT2	src/utils/htslib/htslib/kseq.h	238;"	d
KSORT_INIT	src/utils/htslib/htslib/ksort.h	81;"	d
KSORT_INIT_GENERIC	src/utils/htslib/errmod.c	/^KSORT_INIT_GENERIC(uint16_t)$/;"	f
KSORT_INIT_GENERIC	src/utils/htslib/htslib/ksort.h	289;"	d
KSORT_INIT_STR	src/utils/htslib/htslib/ksort.h	290;"	d
KSORT_SWAP	src/utils/htslib/htslib/ksort.h	79;"	d
KSTREAM_DECLARE	src/utils/htslib/htslib/kseq.h	156;"	d
KSTREAM_INIT	src/utils/htslib/htslib/kseq.h	154;"	d
KSTREAM_INIT2	src/utils/htslib/htslib/kseq.h	148;"	d
KSTRING_H	src/utils/htslib/htslib/kstring.h	27;"	d
KSTRING_T	src/utils/htslib/htslib/bgzf.h	81;"	d
KSTRING_T	src/utils/htslib/htslib/hts.h	51;"	d
KSTRING_T	src/utils/htslib/htslib/kseq.h	83;"	d
KSTRING_T	src/utils/htslib/htslib/kstring.h	66;"	d
KS_ATTR_PRINTF	src/utils/htslib/htslib/kstring.h	51;"	d
KS_ATTR_PRINTF	src/utils/htslib/htslib/kstring.h	53;"	d
KS_FREE	src/utils/htslib/cram/sam_header.h	69;"	d
KS_INIT	src/utils/htslib/cram/sam_header.h	66;"	d
KS_INITIALIZER	src/utils/htslib/cram/sam_header.h	63;"	d
KS_SEP_LINE	src/utils/htslib/htslib/kseq.h	37;"	d
KS_SEP_MAX	src/utils/htslib/htslib/kseq.h	38;"	d
KS_SEP_SPACE	src/utils/htslib/htslib/kseq.h	35;"	d
KS_SEP_TAB	src/utils/htslib/htslib/kseq.h	36;"	d
KeyListOps	src/utils/KeyListOps/KeyListOps.cpp	/^KeyListOps::KeyListOps():$/;"	f	class:KeyListOps
KeyListOps	src/utils/KeyListOps/KeyListOps.h	/^class KeyListOps {$/;"	c
KeyListOpsHelp	src/utils/KeyListOps/KeyListOps.cpp	/^void KeyListOpsHelp() {$/;"	f
KeyListOpsMethods	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^KeyListOpsMethods::KeyListOpsMethods()$/;"	f	class:KeyListOpsMethods
KeyListOpsMethods	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^KeyListOpsMethods::KeyListOpsMethods(RecordKeyVector *keyList, int column)$/;"	f	class:KeyListOpsMethods
KeyListOpsMethods	src/utils/KeyListOps/KeyListOpsMethods.h	/^class KeyListOpsMethods {$/;"	c
L1	src/utils/htslib/cram/cram_structs.h	/^    unsigned char L1[256];              \/\/ ACGT{*} ->0123{4}$/;"	m	struct:cram_fd
L2	src/utils/htslib/cram/cram_structs.h	/^    unsigned char L2[256];              \/\/ ACGTN{*}->01234{5}$/;"	m	struct:cram_fd
LAST	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	e	enum:KeyListOps::__anon138
LAST_TIE	src/utils/Contexts/ContextClosest.h	/^    typedef enum { FIRST_TIE, LAST_TIE, ALL_TIES} tieModeType;$/;"	e	enum:ContextClosest::__anon127
LDFLAGS	src/utils/htslib/Makefile	/^LDFLAGS  =$/;"	m
LEFT	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:CloseSweep::__anon135
LEFT	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:RecDistList::__anon133
LIBHTS_OBJS	src/utils/htslib/Makefile	/^LIBHTS_OBJS = \\$/;"	m
LIBHTS_SOVERSION	src/utils/htslib/Makefile	/^LIBHTS_SOVERSION = 2$/;"	m
LIBS	Makefile	/^export LIBS		= -lz -lm -lbz2 -llzma -lpthread$/;"	m
LIBS	src/utils/htslib/Makefile	/^LIBS     = $(htslib_default_libs)$/;"	m
LIDX_SHIFT	src/utils/htslib/regidx.c	35;"	d	file:
LINEFILEUTILITIES_H	src/utils/lineFileUtilities/lineFileUtilities.h	2;"	d
LINKS	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
LOOKS_LIKE_A_PARAM	src/expand/expand.cpp	39;"	d	file:
LZMA	src/utils/htslib/cram/cram_structs.h	/^    LZMA     = 3,$/;"	e	enum:cram_block_method
LZMA	src/utils/htslib/htslib/cram.h	/^    LZMA     = 3,$/;"	e	enum:cram_block_method
LeftPosition	src/utils/BamTools/include/api/BamAux.h	/^		int LeftPosition;   \/\/!< position for region's left boundary$/;"	m	struct:BamTools::BamRegion
LeftRefID	src/utils/BamTools/include/api/BamAux.h	/^		int LeftRefID;      \/\/!< reference ID for region's left boundary$/;"	m	struct:BamTools::BamRegion
Length	src/utils/BamTools/include/BamAlignment.hpp	/^		uint32_t Length; \/\/!< CIGAR operation length (number of bases)$/;"	m	struct:BamTools::CigarOp
Length	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} Length;$/;"	v	typeref:struct:_Length_t
LoadBamFileMap	src/multiBamCov/multiBamCov.cpp	/^void MultiCovBam::LoadBamFileMap(void) $/;"	f	class:MultiCovBam
LoadMidpoints	src/reldist/reldist.cpp	/^void RelativeDistance::LoadMidpoints() {$/;"	f	class:RelativeDistance
LoadNextBedgraphItem	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::LoadNextBedgraphItem(int index) {$/;"	f	class:UnionBedGraphs
LoadNextItem	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::LoadNextItem(int index) {$/;"	f	class:MultiIntersectBed
LocateIndexes	src/utils/BamTools/include/BamReader.hpp	/^		void LocateIndexes() $/;"	f	class:BamTools::BamReader
MAKEWINDOWS	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
MAP	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
MAPFILE_H_	src/mapFile/mapFile.h	9;"	d
MAPPED_SLICE	src/utils/htslib/cram/cram_structs.h	/^    MAPPED_SLICE       = 2,$/;"	e	enum:cram_content_type
MAPPED_SLICE	src/utils/htslib/htslib/cram.h	/^    MAPPED_SLICE       = 2,$/;"	e	enum:cram_content_type
MASKFASTA	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
MASKFASTAFROMBED_H	src/maskFastaFromBed/maskFastaFromBed.h	12;"	d
MATE	src/utils/bedFile/bedFile.h	/^struct MATE {$/;"	s
MAX	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
MAX	src/utils/htslib/cram/misc.h	104;"	d
MAXDELTA	src/utils/htslib/cram/cram_io.c	1319;"	d	file:
MAXFAILS	src/utils/htslib/cram/cram_io.c	1320;"	d	file:
MAX_CSI_COOR	src/utils/htslib/synced_bcf_reader.c	41;"	d	file:
MAX_FIELD_SIZE	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^	static const int MAX_FIELD_SIZE = 8192; \/\/Given field can not exceed 8K.$/;"	m	class:SingleLineDelimTransferBuffer
MAX_HUFF	src/utils/htslib/cram/cram_codecs.h	63;"	d
MAX_MULTIPLE_FREE_LIST_SIZE	src/utils/general/FreeList.h	/^	static const int MAX_MULTIPLE_FREE_LIST_SIZE = 10;$/;"	m	class:FreeList
MAX_N_FMT	src/utils/htslib/vcf.c	1869;"	d	file:
MAX_OUTBUF_SIZE	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	static const unsigned int MAX_OUTBUF_SIZE = 16384; \/\/16 K$/;"	m	class:RecordOutputMgr
MAX_STAT_VAL	src/utils/htslib/cram/cram_structs.h	92;"	d
MAX_TRIES	src/randomBed/randomBed.h	/^const int MAX_TRIES = 1000000;$/;"	v
MEAN	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	e	enum:ContextCoverage::__anon132
MEAN	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
MEDIAN	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
MERGE	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
MERGEFILE_H_	src/mergeFile/mergeFile.h	9;"	d
META_BIN	src/utils/htslib/hts.c	1269;"	d	file:
MF_APPEND	src/utils/htslib/cram/mFILE.h	53;"	d
MF_APPEND	src/utils/htslib/cram/mFILE.h	58;"	d
MF_BINARY	src/utils/htslib/cram/mFILE.h	59;"	d
MF_MMAP	src/utils/htslib/cram/mFILE.h	62;"	d
MF_MODEX	src/utils/htslib/cram/mFILE.h	61;"	d
MF_READ	src/utils/htslib/cram/mFILE.h	56;"	d
MF_TRUNC	src/utils/htslib/cram/mFILE.h	60;"	d
MF_WRITE	src/utils/htslib/cram/mFILE.h	57;"	d
MIN	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
MIN	src/utils/htslib/cram/misc.h	103;"	d
MINIMUM_PRINTABLE_BAM_FIELDS	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	static const int MINIMUM_PRINTABLE_BAM_FIELDS = 6;$/;"	m	class:BamFileReader
MINIMUM_VALID_BAM_FIELDS	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	static const int  MINIMUM_VALID_BAM_FIELDS = 11;$/;"	m	class:BamFileReader
MIN_ALLOWED_BUF_SIZE	src/utils/Contexts/ContextBase.h	/^	static const int MIN_ALLOWED_BUF_SIZE = 8;$/;"	m	class:ContextBase
MIN_SCAN_BUFFER_SIZE	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	static const int MIN_SCAN_BUFFER_SIZE = 2048;$/;"	m	class:InputStreamMgr
MIN_STR_SIZE	src/utils/htslib/cram/string_alloc.c	47;"	d	file:
MKDIR_P	src/utils/htslib/Makefile	/^MKDIR_P = mkdir -p$/;"	m
MOCK_MODULES	docs/conf.py	/^MOCK_MODULES = ['numpy', 'matplotlib', 'matplotlib.pyplot', $/;"	v
MODE	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
MULTICOV	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
MULTICOVBAM_H	src/multiBamCov/multiBamCov.h	13;"	d
MULTIINTER	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
MULTIINTERSECTBED_H	src/multiIntersectBed/multiIntersectBed.h	15;"	d
MULTI_LINE_ENTRY_TEXT_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			MULTI_LINE_ENTRY_TEXT_FILE_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon122
MakeAbsDouble	src/utils/VectorOps/VectorOps.cpp	/^double MakeAbsDouble(const string &element) {$/;"	f
MakeBEDWindow	src/windowMaker/windowMaker.cpp	/^void WindowMaker::MakeBEDWindow(const BED& interval)$/;"	f	class:WindowMaker
MakeBamHeader	src/bedToBam/bedToBam.cpp	/^void MakeBamHeader(const string &genomeFile, RefVector &refs, string &header,$/;"	f
MakeBedFromBam	src/utils/BamTools-Ancillary/BamAncillary.cpp	/^    void MakeBedFromBam(const BamAlignment &bam, const string &chrom,$/;"	f	namespace:BamTools
MakeDouble	src/utils/VectorOps/VectorOps.cpp	/^double MakeDouble(const string &element) {$/;"	f
MakeFixedCountWindow	src/windowMaker/windowMaker.cpp	/^void WindowMaker::MakeFixedCountWindow(const BED& interval) {$/;"	f	class:WindowMaker
MakeFixedSizeWindow	src/windowMaker/windowMaker.cpp	/^void WindowMaker::MakeFixedSizeWindow(const BED& interval) {$/;"	f	class:WindowMaker
MakeWindowsFromBED	src/windowMaker/windowMaker.cpp	/^void WindowMaker::MakeWindowsFromBED(string& bedFileName) {$/;"	f	class:WindowMaker
MakeWindowsFromGenome	src/windowMaker/windowMaker.cpp	/^void WindowMaker::MakeWindowsFromGenome(const string& genomeFileName) {$/;"	f	class:WindowMaker
MapFile	src/mapFile/mapFile.cpp	/^MapFile::MapFile(ContextMap *context)$/;"	f	class:MapFile
MapFile	src/mapFile/mapFile.h	/^class MapFile : public IntersectFile {$/;"	c
MapQuality	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} MapQuality;$/;"	v	typeref:struct:_MapQuality_t
MaskFasta	src/maskFastaFromBed/maskFastaFromBed.cpp	/^void MaskFastaFromBed::MaskFasta() {$/;"	f	class:MaskFastaFromBed
MaskFastaFromBed	src/maskFastaFromBed/maskFastaFromBed.cpp	/^MaskFastaFromBed::MaskFastaFromBed(const string &fastaInFile,  const string &bedFile,$/;"	f	class:MaskFastaFromBed
MaskFastaFromBed	src/maskFastaFromBed/maskFastaFromBed.h	/^class MaskFastaFromBed {$/;"	c
MatePosition	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} MatePosition;$/;"	v	typeref:struct:_MatePosition_t
MateRefID	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} MateRefID;$/;"	v	typeref:struct:_MateRefID_t
MergeFile	src/mergeFile/mergeFile.cpp	/^MergeFile::MergeFile(ContextMerge *context)$/;"	f	class:MergeFile
MergeFile	src/mergeFile/mergeFile.h	/^class MergeFile : public ToolBase {$/;"	c
Mock	docs/conf.py	/^class Mock(object):$/;"	c
MultiCovBam	src/multiBamCov/multiBamCov.cpp	/^MultiCovBam::MultiCovBam(const vector<string> &bam_files, const string bed_file, $/;"	f	class:MultiCovBam
MultiCovBam	src/multiBamCov/multiBamCov.h	/^class MultiCovBam {$/;"	c
MultiIntersect	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::MultiIntersect() {$/;"	f	class:MultiIntersectBed
MultiIntersectBed	src/multiIntersectBed/multiIntersectBed.cpp	/^MultiIntersectBed::MultiIntersectBed(std::ostream& _output,$/;"	f	class:MultiIntersectBed
MultiIntersectBed	src/multiIntersectBed/multiIntersectBed.h	/^class MultiIntersectBed$/;"	c
N	src/utils/htslib/cram/cram_structs.h	/^	} N;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon92
N	src/utils/htslib/test/thrash_threads4.c	48;"	d	file:
N	src/utils/htslib/test/thrash_threads5.c	33;"	d	file:
N	src/utils/htslib/test/thrash_threads6.c	64;"	d	file:
NEITHER	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { NEITHER, FORWARD_ONLY, REVERSE_ONLY, BOTH } purgeDirectionType;$/;"	e	enum:CloseSweep::__anon137
NELE	src/utils/htslib/test/hts_endian.c	144;"	d	file:
NEW_CHROMSWEEP_H	src/utils/NewChromsweep/NewChromsweep.h	13;"	d
NEW_GENOMEFILE_H	src/utils/GenomeFile/NewGenomeFile.h	14;"	d
NEW_HELLO	src/utils/htslib/test/sam.c	99;"	d	file:
NO	src/utils/Contexts/ContextBase.h	/^	typedef enum { YES, NO, UNTESTED } testType;$/;"	e	enum:ContextBase::__anon131
NONE	src/utils/htslib/bgzf.c	/^    NONE = 0,$/;"	e	enum:mtaux_cmd	file:
NOPOSPLUSRECORD_H_	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	9;"	d
NOT_BAM	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	typedef enum { NOT_BAM, BAM_AS_BAM, BAM_AS_BED} printBamType;$/;"	e	enum:RecordOutputMgr::__anon2
NO_POS_PLUS_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		GFF_PLUS_RECORD_TYPE, NO_POS_PLUS_RECORD_TYPE} RECORD_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon123
NP	src/utils/htslib/cram/pooled_alloc.c	150;"	d	file:
NTRIALS	src/utils/htslib/cram/cram_io.c	95;"	d	file:
NUC	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
NUCBED_H	src/nucBed/nucBed.h	13;"	d
NUMERIC_VERSION	src/utils/htslib/Makefile	/^NUMERIC_VERSION := $(shell .\/version.sh numeric)$/;"	m
NUM_BINS	src/utils/BinTree/BinTree.h	/^	static const binNumType NUM_BINS = 37450;$/;"	m	class:BinTree
NUM_BIN_LEVELS	src/utils/BinTree/BinTree.h	/^	static const binNumType NUM_BIN_LEVELS = 7;$/;"	m	class:BinTree
NUM_QUEUES	src/utils/FileRecordTools/Records/StrandQueue.h	/^	static const int NUM_QUEUES = 3;$/;"	m	class:StrandQueue
Name	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string Name;$/;"	m	class:BamTools::BamAlignment
NewChromSweep	src/utils/NewChromsweep/NewChromsweep.cpp	/^NewChromSweep::NewChromSweep(ContextIntersect *context)$/;"	f	class:NewChromSweep
NewChromSweep	src/utils/NewChromsweep/NewChromsweep.h	/^class NewChromSweep {$/;"	c
NewGenomeFile	src/utils/GenomeFile/NewGenomeFile.cpp	/^NewGenomeFile::NewGenomeFile(const BamTools::RefVector &refVector)$/;"	f	class:NewGenomeFile
NewGenomeFile	src/utils/GenomeFile/NewGenomeFile.cpp	/^NewGenomeFile::NewGenomeFile(const string &genomeFilename)$/;"	f	class:NewGenomeFile
NewGenomeFile	src/utils/GenomeFile/NewGenomeFile.h	/^class NewGenomeFile {$/;"	c
Next	src/utils/chromsweep/chromsweep.cpp	/^bool ChromSweep::Next(pair<BED, vector<BED> > &next) {$/;"	f	class:ChromSweep
NextDatabase	src/utils/chromsweep/chromsweep.cpp	/^bool ChromSweep::NextDatabase() {$/;"	f	class:ChromSweep
NextQuery	src/utils/chromsweep/chromsweep.cpp	/^bool ChromSweep::NextQuery() {$/;"	f	class:ChromSweep
NoPosPlusRecord	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^NoPosPlusRecord::NoPosPlusRecord()$/;"	f	class:NoPosPlusRecord
NoPosPlusRecord	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	/^class NoPosPlusRecord : public Record {$/;"	c
NucBed	src/nucBed/nucBed.cpp	/^NucBed::NucBed(string &dbFile, string &bedFile, bool printSeq, $/;"	f	class:NucBed
NucBed	src/nucBed/nucBed.h	/^class NucBed {$/;"	c
NumCigarOperations	src/utils/BamTools/include/BamAlignment.hpp	/^			_NumCigarOperations_t& NumCigarOperations;$/;"	m	struct:BamTools::BamAlignment::_SupportData
NumCigarOperations	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} NumCigarOperations;$/;"	v	typeref:struct:_NumCigarOperations_t
OBJECTS	src/annotateBed/Makefile	/^OBJECTS= annotateMain.o annotateBed.o$/;"	m
OBJECTS	src/bamToBed/Makefile	/^OBJECTS= bamToBed.o$/;"	m
OBJECTS	src/bamToFastq/Makefile	/^OBJECTS= bamToFastqMain.o bamToFastq.o$/;"	m
OBJECTS	src/bed12ToBed6/Makefile	/^OBJECTS= bed12ToBed6.o$/;"	m
OBJECTS	src/bedToBam/Makefile	/^OBJECTS= bedToBam.o$/;"	m
OBJECTS	src/bedToIgv/Makefile	/^OBJECTS= bedToIgv.o$/;"	m
OBJECTS	src/bedpeToBam/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/closestFile/Makefile	/^OBJECTS= closestHelp.o closestFile.o$/;"	m
OBJECTS	src/clusterBed/Makefile	/^OBJECTS= clusterMain.o clusterBed.o$/;"	m
OBJECTS	src/complementFile/Makefile	/^OBJECTS= complementHelp.o complementFile.o$/;"	m
OBJECTS	src/coverageFile/Makefile	/^OBJECTS= coverageHelp.o coverageFile.o$/;"	m
OBJECTS	src/expand/Makefile	/^OBJECTS= expand.o$/;"	m
OBJECTS	src/fastaFromBed/Makefile	/^OBJECTS= fastaFromBedMain.o fastaFromBed.o$/;"	m
OBJECTS	src/fisher/Makefile	/^OBJECTS= fisherHelp.o fisher.o kfunc.o$/;"	m
OBJECTS	src/flankBed/Makefile	/^OBJECTS= flankBedMain.o flankBed.o$/;"	m
OBJECTS	src/genomeCoverageBed/Makefile	/^OBJECTS= genomeCoverageMain.o genomeCoverageBed.o$/;"	m
OBJECTS	src/getOverlap/Makefile	/^OBJECTS= getOverlap.o$/;"	m
OBJECTS	src/groupBy/Makefile	/^OBJECTS= groupBy.o groupByHelp.o$/;"	m
OBJECTS	src/intersectFile/Makefile	/^OBJECTS= intersectHelp.o intersectFile.o$/;"	m
OBJECTS	src/jaccard/Makefile	/^OBJECTS= jaccardHelp.o jaccard.o$/;"	m
OBJECTS	src/linksBed/Makefile	/^OBJECTS= linksMain.o linksBed.o$/;"	m
OBJECTS	src/mapFile/Makefile	/^OBJECTS= mapHelp.o mapFile.o$/;"	m
OBJECTS	src/maskFastaFromBed/Makefile	/^OBJECTS= maskFastaFromBedMain.o maskFastaFromBed.o$/;"	m
OBJECTS	src/mergeFile/Makefile	/^OBJECTS= mergeHelp.o mergeFile.o$/;"	m
OBJECTS	src/multiBamCov/Makefile	/^OBJECTS= multiBamCovMain.o multiBamCov.o$/;"	m
OBJECTS	src/multiIntersectBed/Makefile	/^OBJECTS= multiIntersectBedMain.o multiIntersectBed.o$/;"	m
OBJECTS	src/nekSandbox1/Makefile	/^OBJECTS= nekSandboxMain.o$/;"	m
OBJECTS	src/nucBed/Makefile	/^OBJECTS= nucBedMain.o nucBed.o$/;"	m
OBJECTS	src/pairToBed/Makefile	/^OBJECTS= pairToBedMain.o pairToBed.o$/;"	m
OBJECTS	src/pairToPair/Makefile	/^OBJECTS= pairToPairMain.o pairToPair.o$/;"	m
OBJECTS	src/randomBed/Makefile	/^OBJECTS= randomBedMain.o randomBed.o$/;"	m
OBJECTS	src/reldist/Makefile	/^OBJECTS= reldistMain.o reldist.o$/;"	m
OBJECTS	src/sampleFile/Makefile	/^OBJECTS= sampleHelp.o sampleFile.o$/;"	m
OBJECTS	src/shiftBed/Makefile	/^OBJECTS= shiftBedMain.o shiftBed.o$/;"	m
OBJECTS	src/shuffleBed/Makefile	/^OBJECTS= shuffleBedMain.o shuffleBed.o$/;"	m
OBJECTS	src/slopBed/Makefile	/^OBJECTS= slopBedMain.o slopBed.o$/;"	m
OBJECTS	src/sortBed/Makefile	/^OBJECTS= sortMain.o sortBed.o$/;"	m
OBJECTS	src/spacingFile/Makefile	/^OBJECTS= spacingHelp.o spacingFile.o$/;"	m
OBJECTS	src/split/Makefile	/^OBJECTS= splitBed.o splitBedMain.o$/;"	m
OBJECTS	src/subtractFile/Makefile	/^OBJECTS= subtractHelp.o subtractFile.o$/;"	m
OBJECTS	src/tagBam/Makefile	/^OBJECTS= tagBamMain.o tagBam.o$/;"	m
OBJECTS	src/unionBedGraphs/Makefile	/^OBJECTS= unionBedGraphsMain.o unionBedGraphs.o$/;"	m
OBJECTS	src/utils/BamTools-Ancillary/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/BinTree/Makefile	/^OBJECTS= BinTree.o$/;"	m
OBJECTS	src/utils/BlockedIntervals/Makefile	/^OBJECTS= BlockedIntervals.o$/;"	m
OBJECTS	src/utils/Contexts/Makefile	/^OBJECTS= ContextBase.o ContextIntersect.o ContextFisher.o ContextMap.o ContextSample.o ContextSpacing.o ContextMerge.o ContextJaccard.o ContextClosest.o \\$/;"	m
OBJECTS	src/utils/Fasta/Makefile	/^OBJECTS= Fasta.o split.o$/;"	m
OBJECTS	src/utils/FileRecordTools/FileReaders/Makefile	/^OBJECTS= FileReader.o SingleLineDelimTextFileReader.o BamFileReader.o BufferedStreamMgr.o InputStreamMgr.o $/;"	m
OBJECTS	src/utils/FileRecordTools/Makefile	/^OBJECTS= FileRecordMgr.o FileRecordMergeMgr.o$/;"	m
OBJECTS	src/utils/FileRecordTools/Records/Makefile	/^OBJECTS= Record.o EmptyRecord.o Bed3Interval.o Bed4Interval.o BedGraphInterval.o Bed5Interval.o Bed6Interval.o PlusFields.o BedPlusInterval.o Bed12Interval.o BamRecord.o \\$/;"	m
OBJECTS	src/utils/GenomeFile/Makefile	/^OBJECTS= NewGenomeFile.o GenomeFile.o$/;"	m
OBJECTS	src/utils/KeyListOps/Makefile	/^OBJECTS= KeyListOps.o KeyListOpsMethods.o$/;"	m
OBJECTS	src/utils/NewChromsweep/Makefile	/^OBJECTS= NewChromsweep.o CloseSweep.o$/;"	m
OBJECTS	src/utils/RecordOutputMgr/Makefile	/^OBJECTS= RecordOutputMgr.o$/;"	m
OBJECTS	src/utils/ToolBase/Makefile	/^OBJECTS= ToolBase.o$/;"	m
OBJECTS	src/utils/VectorOps/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/bedFile/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/bedFilePE/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/bedGraphFile/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/chromsweep/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/driver/Makefile	/^OBJECTS= BedtoolsDriver.o$/;"	m
OBJECTS	src/utils/fileType/Makefile	/^OBJECTS= fileType.o FileRecordTypeChecker.o$/;"	m
OBJECTS	src/utils/general/Makefile	/^OBJECTS= ParseTools.o PushBackStreamBuf.o CompressionTools.o Tokenizer.o CommonHelp.o$/;"	m
OBJECTS	src/utils/sequenceUtilities/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/tabFile/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/utils/version/Makefile	/^OBJECTS= $(SOURCES:.cpp=.o)$/;"	m
OBJECTS	src/windowBed/Makefile	/^OBJECTS= windowMain.o windowBed.o$/;"	m
OBJECTS	src/windowMaker/Makefile	/^OBJECTS= windowMakerMain.o windowMaker.o$/;"	m
OBJ_DIR	Makefile	/^export OBJ_DIR	= obj$/;"	m
OBJ_DIR	src/annotateBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bamToBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bamToFastq/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bed12ToBed6/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bedToBam/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bedToIgv/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/bedpeToBam/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/closestFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/clusterBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/complementFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/coverageFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/expand/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/fastaFromBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/fisher/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/flankBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/genomeCoverageBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/getOverlap/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/groupBy/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/intersectFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/jaccard/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/linksBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/mapFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/maskFastaFromBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/mergeFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/multiBamCov/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/multiIntersectBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/nekSandbox1/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/nucBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/pairToBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/pairToPair/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/randomBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/regressTest/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/reldist/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/sampleFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/shiftBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/shuffleBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/slopBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/sortBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/spacingFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/split/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/subtractFile/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/tagBam/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/unionBedGraphs/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/BamTools-Ancillary/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/BinTree/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/BlockedIntervals/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/Contexts/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/Fasta/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/FileRecordTools/FileReaders/Makefile	/^OBJ_DIR = ..\/..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/FileRecordTools/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/FileRecordTools/Records/Makefile	/^OBJ_DIR = ..\/..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/GenomeFile/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/KeyListOps/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/NewChromsweep/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/RecordOutputMgr/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/ToolBase/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/VectorOps/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/bedFile/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/bedFilePE/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/bedGraphFile/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/chromsweep/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/driver/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/fileType/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/general/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/gzstream/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/sequenceUtilities/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/tabFile/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/utils/version/Makefile	/^OBJ_DIR = ..\/..\/..\/obj\/$/;"	m
OBJ_DIR	src/windowBed/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OBJ_DIR	src/windowMaker/Makefile	/^OBJ_DIR = ..\/..\/obj\/$/;"	m
OP_TYPES	src/utils/KeyListOps/KeyListOps.h	/^    	DISTINCT_ONLY, DISTINCT_SORT_NUM, DISTINCT_SORT_NUM_DESC, COLLAPSE, CONCAT, FREQ_ASC, FREQ_DESC, FIRST, LAST, INVALID } OP_TYPES;$/;"	t	class:KeyListOps	typeref:enum:KeyListOps::__anon138
ORDER_COORD	src/utils/htslib/cram/sam_header.h	/^    ORDER_COORD    = 2,$/;"	e	enum:sam_sort_order
ORDER_NAME	src/utils/htslib/cram/sam_header.h	/^    ORDER_NAME     = 1,$/;"	e	enum:sam_sort_order
ORDER_UNKNOWN	src/utils/htslib/cram/sam_header.h	/^    ORDER_UNKNOWN  =-1,$/;"	e	enum:sam_sort_order
ORDER_UNSORTED	src/utils/htslib/cram/sam_header.h	/^    ORDER_UNSORTED = 0,$/;"	e	enum:sam_sort_order
OVERLAP	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
OVERLAP	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:CloseSweep::__anon135
OVERLAP	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:RecDistList::__anon133
Open	src/utils/BamTools/include/BamReader.hpp	/^		bool Open(const std::string& filename) $/;"	f	class:BamTools::BamReader
Open	src/utils/BamTools/include/BamReader.hpp	/^		bool Open(const std::vector<std::string>& filenames) $/;"	f	class:BamTools::BamReader
Open	src/utils/BamTools/include/BamWriter.hpp	/^		bool Open(const std::string& filename, const std::string& samHeaderText, const RefVector& referenceSequences, bool binary = true)$/;"	f	class:BamTools::BamWriter
Open	src/utils/bedFile/bedFile.cpp	/^void BedFile::Open(void) {$/;"	f	class:BedFile
Open	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::Open(void) {$/;"	f	class:BedFilePE
Open	src/utils/bedGraphFile/bedGraphFile.cpp	/^void BedGraphFile::Open() {$/;"	f	class:BedGraphFile
Open	src/utils/tabFile/tabFile.cpp	/^void TabFile::Open(void) {$/;"	f	class:TabFile
OpenAnnoFiles	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::OpenAnnoFiles() {$/;"	f	class:BedAnnotate
OpenAnnoFiles	src/tagBam/tagBam.cpp	/^void TagBam::OpenAnnoFiles() {$/;"	f	class:TagBam
OpenBedgraphFiles	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::OpenBedgraphFiles() {$/;"	f	class:UnionBedGraphs
OpenFiles	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::OpenFiles() {$/;"	f	class:MultiIntersectBed
OpenStream	src/utils/BamTools/include/BamReader.hpp	/^		bool OpenStream(std::istream* is)$/;"	f	class:BamTools::BamReader
Open_method	src/utils/htslib/test/test_bgzf.c	/^} Open_method;$/;"	t	typeref:enum:__anon51	file:
P	src/utils/htslib/cram/cram_structs.h	/^	} P;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon93
PACKAGE_VERSION	src/utils/htslib/Makefile	/^PACKAGE_VERSION := $(shell .\/version.sh)$/;"	m
PAIRTOBED	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
PAIRTOPAIR	src/utils/Contexts/ContextBase.h	/^		PAIRTOPAIR,BAMTOBED, BEDTOBAM, BEDTOFASTQ, BEDPETOBAM, BED12TOBED6, GETFASTA, MASKFASTA, NUC,$/;"	e	enum:ContextBase::__anon130
PAIRTOPAIR_H	src/pairToPair/pairToPair.h	13;"	d
PAPER	docs/Makefile	/^PAPER         =$/;"	m
PAPER	docs/make.bat	/^	echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter$/;"	v
PAPEROPT_a4	docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PARAMETER_CHECK	src/annotateBed/annotateMain.cpp	21;"	d	file:
PARAMETER_CHECK	src/bamToBed/bamToBed.cpp	33;"	d	file:
PARAMETER_CHECK	src/bamToFastq/bamToFastqMain.cpp	15;"	d	file:
PARAMETER_CHECK	src/bed12ToBed6/bed12ToBed6.cpp	28;"	d	file:
PARAMETER_CHECK	src/bedToBam/bedToBam.cpp	35;"	d	file:
PARAMETER_CHECK	src/bedToIgv/bedToIgv.cpp	28;"	d	file:
PARAMETER_CHECK	src/bedpeToBam/bedpeToBam.cpp	35;"	d	file:
PARAMETER_CHECK	src/bedtools.cpp	35;"	d	file:
PARAMETER_CHECK	src/clusterBed/clusterMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/expand/expand.cpp	37;"	d	file:
PARAMETER_CHECK	src/fastaFromBed/fastaFromBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/flankBed/flankBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/genomeCoverageBed/genomeCoverageMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/getOverlap/getOverlap.cpp	27;"	d	file:
PARAMETER_CHECK	src/linksBed/linksMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/maskFastaFromBed/maskFastaFromBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/multiBamCov/multiBamCovMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/multiIntersectBed/multiIntersectBedMain.cpp	32;"	d	file:
PARAMETER_CHECK	src/nucBed/nucBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/pairToBed/pairToBedMain.cpp	21;"	d	file:
PARAMETER_CHECK	src/pairToPair/pairToPairMain.cpp	21;"	d	file:
PARAMETER_CHECK	src/randomBed/randomBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/reldist/reldistMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/shiftBed/shiftBedMain.cpp	20;"	d	file:
PARAMETER_CHECK	src/shuffleBed/shuffleBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/slopBed/slopBedMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/sortBed/sortMain.cpp	22;"	d	file:
PARAMETER_CHECK	src/tagBam/tagBamMain.cpp	21;"	d	file:
PARAMETER_CHECK	src/unionBedGraphs/unionBedGraphsMain.cpp	32;"	d	file:
PARAMETER_CHECK	src/windowBed/windowMain.cpp	21;"	d	file:
PARAMETER_CHECK	src/windowMaker/windowMakerMain.cpp	22;"	d	file:
PARSETOOLS_H_	src/utils/general/ParseTools.h	9;"	d
PATH_MAX	src/utils/htslib/cram/cram_io.c	91;"	d	file:
PATH_MAX	src/utils/htslib/cram/open_trace_file.c	75;"	d	file:
PER_BASE	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	e	enum:ContextCoverage::__anon132
PI	src/utils/htslib/test/sam.c	96;"	d	file:
PLATFORM	src/utils/htslib/Makefile	/^PLATFORM := $(shell uname -s)$/;"	m
PLUGINPATH	src/utils/htslib/plugin.c	39;"	d	file:
PLUGIN_EXT	src/utils/htslib/Makefile	/^PLUGIN_EXT  =$/;"	m
PLUGIN_GLOBAL	src/utils/htslib/hfile_gcs.c	/^int PLUGIN_GLOBAL(hfile_plugin_init,_gcs)(struct hFILE_plugin *self)$/;"	f
PLUGIN_GLOBAL	src/utils/htslib/hfile_internal.h	155;"	d
PLUGIN_GLOBAL	src/utils/htslib/hfile_internal.h	161;"	d
PLUGIN_GLOBAL	src/utils/htslib/hfile_libcurl.c	/^int PLUGIN_GLOBAL(hfile_plugin_init,_libcurl)(struct hFILE_plugin *self)$/;"	f
PLUGIN_GLOBAL	src/utils/htslib/hfile_s3.c	/^int PLUGIN_GLOBAL(hfile_plugin_init,_s3)(struct hFILE_plugin *self)$/;"	f
PLUGIN_OBJS	src/utils/htslib/Makefile	/^PLUGIN_OBJS =$/;"	m
PLUSFIELDS_H_	src/utils/FileRecordTools/Records/PlusFields.h	9;"	d
POINTWITHDEPTH_PQUEUE	src/utils/Point/Point.h	/^typedef std::priority_queue<PointWithDepth> POINTWITHDEPTH_PQUEUE;$/;"	t
POINT_H	src/utils/Point/Point.h	13;"	d
POINT_PQUEUE	src/utils/Point/Point.h	/^typedef std::priority_queue<Point> POINT_PQUEUE;$/;"	t
PRId16	src/utils/htslib/cram/os.h	170;"	d
PRId32	src/utils/htslib/cram/os.h	169;"	d
PRId64	src/utils/htslib/cram/os.h	168;"	d
PRId8	src/utils/htslib/cram/os.h	171;"	d
PRIu16	src/utils/htslib/cram/os.h	174;"	d
PRIu32	src/utils/htslib/cram/os.h	173;"	d
PRIu64	src/utils/htslib/cram/os.h	172;"	d
PRIu8	src/utils/htslib/cram/os.h	175;"	d
PROGRAM	src/bedToBam/Makefile	/^PROGRAM= bedToBam$/;"	m
PROGRAM	src/bedToIgv/Makefile	/^PROGRAM= bedToIgv$/;"	m
PROGRAM	src/bedpeToBam/Makefile	/^PROGRAM= bedpeToBam$/;"	m
PROGRAM	src/complementFile/Makefile	/^PROGRAM= complementFile$/;"	m
PROGRAM	src/fisher/Makefile	/^PROGRAM= Fisher$/;"	m
PROGRAM	src/groupBy/Makefile	/^PROGRAM= groupBy$/;"	m
PROGRAM	src/intersectFile/Makefile	/^PROGRAM= intersectFile$/;"	m
PROGRAM	src/jaccard/Makefile	/^PROGRAM= Jaccard$/;"	m
PROGRAM	src/nekSandbox1/Makefile	/^PROGRAM= nekSandbox1$/;"	m
PROGRAM	src/regressTest/Makefile	/^PROGRAM= regressTest$/;"	m
PROGRAM	src/reldist/Makefile	/^PROGRAM= reldist$/;"	m
PROGRAM	src/sampleFile/Makefile	/^PROGRAM= sample$/;"	m
PROGRAM	src/spacingFile/Makefile	/^PROGRAM= spacing$/;"	m
PROGRAM	src/subtractFile/Makefile	/^PROGRAM= subtractFile$/;"	m
PROGRAM_NAME	src/annotateBed/annotateMain.cpp	18;"	d	file:
PROGRAM_NAME	src/bamToBed/bamToBed.cpp	30;"	d	file:
PROGRAM_NAME	src/bamToFastq/bamToFastqMain.cpp	13;"	d	file:
PROGRAM_NAME	src/bed12ToBed6/bed12ToBed6.cpp	25;"	d	file:
PROGRAM_NAME	src/bedToBam/bedToBam.cpp	32;"	d	file:
PROGRAM_NAME	src/bedToIgv/bedToIgv.cpp	25;"	d	file:
PROGRAM_NAME	src/bedpeToBam/bedpeToBam.cpp	32;"	d	file:
PROGRAM_NAME	src/bedtools.cpp	26;"	d	file:
PROGRAM_NAME	src/clusterBed/clusterMain.cpp	18;"	d	file:
PROGRAM_NAME	src/expand/expand.cpp	35;"	d	file:
PROGRAM_NAME	src/fastaFromBed/fastaFromBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/flankBed/flankBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/genomeCoverageBed/genomeCoverageMain.cpp	18;"	d	file:
PROGRAM_NAME	src/getOverlap/getOverlap.cpp	24;"	d	file:
PROGRAM_NAME	src/linksBed/linksMain.cpp	18;"	d	file:
PROGRAM_NAME	src/maskFastaFromBed/maskFastaFromBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/multiBamCov/multiBamCovMain.cpp	18;"	d	file:
PROGRAM_NAME	src/multiIntersectBed/multiIntersectBedMain.cpp	29;"	d	file:
PROGRAM_NAME	src/nucBed/nucBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/pairToBed/pairToBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/pairToPair/pairToPairMain.cpp	18;"	d	file:
PROGRAM_NAME	src/randomBed/randomBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/reldist/reldistMain.cpp	18;"	d	file:
PROGRAM_NAME	src/shiftBed/shiftBedMain.cpp	16;"	d	file:
PROGRAM_NAME	src/shuffleBed/shuffleBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/slopBed/slopBedMain.cpp	18;"	d	file:
PROGRAM_NAME	src/sortBed/sortMain.cpp	18;"	d	file:
PROGRAM_NAME	src/split/splitBed.cpp	23;"	d	file:
PROGRAM_NAME	src/tagBam/tagBamMain.cpp	18;"	d	file:
PROGRAM_NAME	src/unionBedGraphs/unionBedGraphsMain.cpp	29;"	d	file:
PROGRAM_NAME	src/windowBed/windowMain.cpp	18;"	d	file:
PROGRAM_NAME	src/windowMaker/windowMakerMain.cpp	18;"	d	file:
PROGRAM_TYPE	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	t	class:ContextBase	typeref:enum:ContextBase::__anon130
PSIZE	src/utils/htslib/cram/pooled_alloc.c	42;"	d	file:
PUSHBACKSTREAM_H_	src/utils/general/PushBackStreamBuf.h	9;"	d
PairToPair	src/pairToPair/pairToPair.cpp	/^PairToPair::PairToPair(string &bedAFilePE, string &bedBFilePE, float &overlapFraction,$/;"	f	class:PairToPair
PairToPair	src/pairToPair/pairToPair.h	/^class PairToPair {$/;"	c
PairedFastq	src/bamToFastq/bamToFastq.cpp	/^void BamToFastq::PairedFastq() {$/;"	f	class:BamToFastq
PairedFastqUseTags	src/bamToFastq/bamToFastq.cpp	/^void BamToFastq::PairedFastqUseTags() {$/;"	f	class:BamToFastq
ParseHeaderText	src/utils/BamTools/include/SamHeader.hpp	/^		void ParseHeaderText(const std::string& text)$/;"	f	class:BamTools::SamHeader
PlusFields	src/utils/FileRecordTools/Records/PlusFields.cpp	/^PlusFields::PlusFields()$/;"	f	class:PlusFields
PlusFields	src/utils/FileRecordTools/Records/PlusFields.h	/^class PlusFields {$/;"	c
Point	src/utils/Point/Point.h	/^    Point () :$/;"	f	class:Point
Point	src/utils/Point/Point.h	/^    Point(const Point &other) :$/;"	f	class:Point
Point	src/utils/Point/Point.h	/^    Point(int _index, COORDINATE_TYPE _type, CHRPOS _coord) :$/;"	f	class:Point
Point	src/utils/Point/Point.h	/^class Point {$/;"	c
PointWithDepth	src/utils/Point/Point.h	/^      PointWithDepth(const PointWithDepth &other) :$/;"	f	class:PointWithDepth
PointWithDepth	src/utils/Point/Point.h	/^      PointWithDepth(int _index, COORDINATE_TYPE _type, CHRPOS _coord, std::string _depth) :$/;"	f	class:PointWithDepth
PointWithDepth	src/utils/Point/Point.h	/^class PointWithDepth {$/;"	c
Position	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} Position;$/;"	v	typeref:struct:_Position_t
PrettyPrintChrom	src/maskFastaFromBed/maskFastaFromBed.cpp	/^void MaskFastaFromBed::PrettyPrintChrom(ofstream &out, string chrom, const string &sequence, int width) {$/;"	f	class:MaskFastaFromBed
PrintBed	src/bamToBed/bamToBed.cpp	/^void PrintBed(const BamAlignment &bam,  const RefVector &refs, $/;"	f
PrintBed12	src/bamToBed/bamToBed.cpp	/^void PrintBed12(const BamAlignment &bam, const RefVector &refs, $/;"	f
PrintBedPE	src/bamToBed/bamToBed.cpp	/^void PrintBedPE(const BamAlignment &bam1, const BamAlignment &bam2, $/;"	f
PrintCoverage	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::PrintCoverage(CHRPOS start, CHRPOS end) {$/;"	f	class:MultiIntersectBed
PrintCoverage	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::PrintCoverage(CHRPOS start, CHRPOS end) {$/;"	f	class:UnionBedGraphs
PrintEmptyChromosomes	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::PrintEmptyChromosomes()$/;"	f	class:BedGenomeCoverage
PrintEmptyCoverage	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::PrintEmptyCoverage(CHRPOS start, CHRPOS end) {$/;"	f	class:MultiIntersectBed
PrintEmptyCoverage	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::PrintEmptyCoverage(CHRPOS start, CHRPOS end) {$/;"	f	class:UnionBedGraphs
PrintFinalCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::PrintFinalCoverage()$/;"	f	class:BedGenomeCoverage
PrintHeader	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::PrintHeader() {$/;"	f	class:BedAnnotate
PrintHeader	src/multiIntersectBed/multiIntersectBed.cpp	/^void MultiIntersectBed::PrintHeader() {$/;"	f	class:MultiIntersectBed
PrintHeader	src/nucBed/nucBed.cpp	/^void NucBed::PrintHeader(void) {$/;"	f	class:NucBed
PrintHeader	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::PrintHeader() {$/;"	f	class:UnionBedGraphs
PrintHeader	src/utils/bedFile/bedFile.cpp	/^void BedFile::PrintHeader(void) {$/;"	f	class:BedFile
PrintTag	src/bamToBed/bamToBed.cpp	/^string PrintTag(const BamAlignment &bam, const string &tag)$/;"	f
PrintTrackDefinitionLine	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::PrintTrackDefinitionLine()$/;"	f	class:BedGenomeCoverage
ProcessBamBlock	src/pairToBed/pairToBed.cpp	/^void BedIntersectPE::ProcessBamBlock (const BamAlignment &bam1, const BamAlignment &bam2,$/;"	f	class:BedIntersectPE
ProcessBed	src/bed12ToBed6/bed12ToBed6.cpp	/^void ProcessBed(istream &bedInput, BedFile *bed) {$/;"	f
ProcessBed	src/bedToBam/bedToBam.cpp	/^void ProcessBed(BedFile *bed, GenomeFile *genome, bool isBED12, int mapQual, bool uncompressedBam) {$/;"	f
ProcessBed	src/bedToIgv/bedToIgv.cpp	/^void ProcessBed(istream &bedInput, BedFile *bed, string path, string sortType, string session,$/;"	f
ProcessBedPE	src/bedpeToBam/bedpeToBam.cpp	/^void ProcessBedPE(BedFilePE *bedpe, GenomeFile *genome,  int mapQual, bool uncompressedBam) {$/;"	f
ProfileDNA	src/nucBed/nucBed.cpp	/^void NucBed::ProfileDNA() {$/;"	f	class:NucBed
PushBackStreamBuf	src/utils/general/PushBackStreamBuf.cpp	/^PushBackStreamBuf::PushBackStreamBuf(streambuf* primary_stream)$/;"	f	class:PushBackStreamBuf
PushBackStreamBuf	src/utils/general/PushBackStreamBuf.h	/^class PushBackStreamBuf: public std::streambuf {$/;"	c
Q	src/utils/htslib/cram/cram_structs.h	/^	} Q;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon87
Qualities	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string AlignedBases, Qualities, ErrorString, TagData;$/;"	m	class:BamTools::BamAlignment
QueryBases	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string QueryBases;$/;"	m	class:BamTools::BamAlignment
QueryNameLength	src/utils/BamTools/include/BamAlignment.hpp	/^			_QueryNameLength_t& QueryNameLength;$/;"	m	struct:BamTools::BamAlignment::_SupportData
QueryNameLength	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} QueryNameLength;$/;"	v	typeref:struct:_QueryNameLength_t
QuerySequenceLength	src/utils/BamTools/include/BamAlignment.hpp	/^			_QuerySequenceLength_t& QuerySequenceLength;$/;"	m	struct:BamTools::BamAlignment::_SupportData
QuerySequenceLength	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} QuerySequenceLength;$/;"	v	typeref:struct:_QuerySequenceLength_t
R	src/utils/htslib/cram/rANS_static.c	/^    unsigned char R[TOTFREQ];$/;"	m	struct:__anon61	file:
RAND48_ADD	src/utils/htslib/win/rand.c	32;"	d	file:
RAND48_MULT_0	src/utils/htslib/win/rand.c	29;"	d	file:
RAND48_MULT_1	src/utils/htslib/win/rand.c	30;"	d	file:
RAND48_MULT_2	src/utils/htslib/win/rand.c	31;"	d	file:
RAND48_SEED_0	src/utils/htslib/win/rand.c	26;"	d	file:
RAND48_SEED_1	src/utils/htslib/win/rand.c	27;"	d	file:
RAND48_SEED_2	src/utils/htslib/win/rand.c	28;"	d	file:
RANDOM	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
RANLIB	src/utils/htslib/Makefile	/^RANLIB = ranlib$/;"	m
RANS	src/utils/htslib/cram/cram_structs.h	/^    RANS     = 4,  \/\/ Generic; either order$/;"	e	enum:cram_block_method
RANS	src/utils/htslib/htslib/cram.h	/^    RANS     = 4,  \/\/ Generic; either order$/;"	e	enum:cram_block_method
RANS0	src/utils/htslib/cram/cram_structs.h	/^    RANS0    = 4,$/;"	e	enum:cram_block_method
RANS0	src/utils/htslib/htslib/cram.h	/^    RANS0    = 4,$/;"	e	enum:cram_block_method
RANS1	src/utils/htslib/cram/cram_structs.h	/^    RANS1    = 10, \/\/ Not externalised; stored as RANS (generic)$/;"	e	enum:cram_block_method
RANS1	src/utils/htslib/htslib/cram.h	/^    RANS1    = 10, \/\/ Not externalised; stored as RANS (generic)$/;"	e	enum:cram_block_method
RANS_BYTE_HEADER	src/utils/htslib/cram/rANS_byte.h	16;"	d
RANS_BYTE_L	src/utils/htslib/cram/rANS_byte.h	59;"	d
RANS_STATIC_H	src/utils/htslib/cram/rANS_static.h	36;"	d
RAW	src/utils/htslib/cram/cram_structs.h	/^    RAW      = 0,$/;"	e	enum:cram_block_method
RAW	src/utils/htslib/htslib/cram.h	/^    RAW      = 0,$/;"	e	enum:cram_block_method
READ_COMPRESSED	src/utils/htslib/test/test_view.c	/^    READ_COMPRESSED  = 1,$/;"	e	enum:test_op	file:
READ_CRAM	src/utils/htslib/test/test_view.c	/^    READ_CRAM        = 4,$/;"	e	enum:test_op	file:
RECORDMGR_H_	src/utils/FileRecordTools/Records/RecordMgr.h	9;"	d
RECORDOUTPUTMGR_H_	src/utils/RecordOutputMgr/RecordOutputMgr.h	9;"	d
RECORD_H_	src/utils/FileRecordTools/Records/Record.h	9;"	d
RECORD_LIST_H_	src/utils/FileRecordTools/Records/RecordList.h	9;"	d
RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		GFF_PLUS_RECORD_TYPE, NO_POS_PLUS_RECORD_TYPE} RECORD_TYPE;$/;"	t	class:FileRecordTypeChecker	typeref:enum:FileRecordTypeChecker::__anon123
RED	src/bedtools.cpp	32;"	d	file:
REF_DIST	src/utils/Contexts/ContextClosest.h	/^    typedef enum { REF_DIST, A_DIST, B_DIST} strandedDistanceModeType;$/;"	e	enum:ContextClosest::__anon128
REF_PATH	src/utils/htslib/Makefile	/^	REF_PATH=: test\/sam test\/ce.fa test\/faidx.fa$/;"	m
REGITR_END	src/utils/htslib/htslib/regidx.h	78;"	d
REGITR_OVERLAP	src/utils/htslib/htslib/regidx.h	80;"	d
REGITR_PAYLOAD	src/utils/htslib/htslib/regidx.h	79;"	d
REGITR_START	src/utils/htslib/htslib/regidx.h	77;"	d
REGRESSTEST_H_	src/regressTest/RegressTest.h	9;"	d
RELDIST_H	src/reldist/reldist.h	13;"	d
RELEASED_VERSION_FILE	Makefile	/^RELEASED_VERSION_FILE=.\/src\/utils\/version\/version_release.txt$/;"	m
REPORT_CHUNK	src/split/splitBed.cpp	32;"	d	file:
RESET	src/bedtools.cpp	29;"	d	file:
REVERSE	src/utils/FileRecordTools/Records/Record.h	/^	typedef enum { FORWARD, REVERSE, UNKNOWN } strandType;$/;"	e	enum:Record::__anon124
REVERSE_ONLY	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { NEITHER, FORWARD_ONLY, REVERSE_ONLY, BOTH } purgeDirectionType;$/;"	e	enum:CloseSweep::__anon137
RIGHT	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:CloseSweep::__anon135
RIGHT	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	e	enum:RecDistList::__anon133
RP	src/utils/htslib/cram/cram_io.c	80;"	d	file:
RP	src/utils/htslib/cram/cram_io.c	82;"	d	file:
RTLD_NOLOAD	src/utils/htslib/plugin.c	132;"	d	file:
RansAssert	src/utils/htslib/cram/rANS_byte.h	21;"	d
RansAssert	src/utils/htslib/cram/rANS_byte.h	23;"	d
RansDecAdvance	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecAdvance(RansState* r, uint8_t** pptr, uint32_t start, uint32_t freq, uint32_t scale_bits)$/;"	f
RansDecAdvanceStep	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecAdvanceStep(RansState* r, uint32_t start, uint32_t freq, uint32_t scale_bits)$/;"	f
RansDecAdvanceSymbol	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecAdvanceSymbol(RansState* r, uint8_t** pptr, RansDecSymbol const* sym, uint32_t scale_bits)$/;"	f
RansDecAdvanceSymbolStep	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecAdvanceSymbolStep(RansState* r, RansDecSymbol const* sym, uint32_t scale_bits)$/;"	f
RansDecGet	src/utils/htslib/cram/rANS_byte.h	/^static inline uint32_t RansDecGet(RansState* r, uint32_t scale_bits)$/;"	f
RansDecInit	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecInit(RansState* r, uint8_t** pptr)$/;"	f
RansDecRenorm	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecRenorm(RansState* r, uint8_t** pptr)$/;"	f
RansDecRenormSafe	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecRenormSafe(RansState* r, uint8_t** pptr, uint8_t *ptr_end)$/;"	f
RansDecSymbol	src/utils/htslib/cram/rANS_byte.h	/^} RansDecSymbol;$/;"	t	typeref:struct:__anon59
RansDecSymbolInit	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansDecSymbolInit(RansDecSymbol* s, uint32_t start, uint32_t freq)$/;"	f
RansEncFlush	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansEncFlush(RansState* r, uint8_t** pptr)$/;"	f
RansEncInit	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansEncInit(RansState* r)$/;"	f
RansEncPut	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansEncPut(RansState* r, uint8_t** pptr, uint32_t start, uint32_t freq, uint32_t scale_bits)$/;"	f
RansEncPutSymbol	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansEncPutSymbol(RansState* r, uint8_t** pptr, RansEncSymbol const* sym)$/;"	f
RansEncRenorm	src/utils/htslib/cram/rANS_byte.h	/^static inline RansState RansEncRenorm(RansState x, uint8_t** pptr, uint32_t freq, uint32_t scale_bits)$/;"	f
RansEncSymbol	src/utils/htslib/cram/rANS_byte.h	/^} RansEncSymbol;$/;"	t	typeref:struct:__anon58
RansEncSymbolInit	src/utils/htslib/cram/rANS_byte.h	/^static inline void RansEncSymbolInit(RansEncSymbol* s, uint32_t start, uint32_t freq, uint32_t scale_bits)$/;"	f
RansState	src/utils/htslib/cram/rANS_byte.h	/^typedef uint32_t RansState;$/;"	t
ReadOnlyPropertyMapping	src/utils/BamTools/mapping/BamAlignment.py	/^class ReadOnlyPropertyMapping:$/;"	c
RecDistList	src/utils/NewChromsweep/CloseSweep.cpp	/^RecDistList::RecDistList(int maxSize)$/;"	f	class:RecDistList
RecDistList	src/utils/NewChromsweep/CloseSweep.h	/^class RecDistList {$/;"	c
Record	src/utils/FileRecordTools/Records/Record.cpp	/^Record::Record()$/;"	f	class:Record
Record	src/utils/FileRecordTools/Records/Record.h	/^class Record {$/;"	c
RecordKeyList	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::RecordKeyList()$/;"	f	class:RecordKeyList
RecordKeyList	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::RecordKeyList(Record * item)$/;"	f	class:RecordKeyList
RecordKeyList	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::RecordKeyList(Record * item, listType &list)$/;"	f	class:RecordKeyList
RecordKeyList	src/utils/FileRecordTools/Records/RecordKeyList.h	/^class RecordKeyList {$/;"	c
RecordKeyVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::RecordKeyVector()$/;"	f	class:RecordKeyVector
RecordKeyVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::RecordKeyVector(Record * item)$/;"	f	class:RecordKeyVector
RecordKeyVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::RecordKeyVector(Record * item, vecType *vec)$/;"	f	class:RecordKeyVector
RecordKeyVector	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^class RecordKeyVector {$/;"	c
RecordList	src/utils/FileRecordTools/Records/RecordList.cpp	/^RecordList::RecordList() :$/;"	f	class:RecordList
RecordList	src/utils/FileRecordTools/Records/RecordList.h	/^class RecordList {$/;"	c
RecordListNode	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode() : _next(NULL){}$/;"	f	class:RecordListNode
RecordListNode	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode(Record * val) : _val(val), _next(NULL) {}$/;"	f	class:RecordListNode
RecordListNode	src/utils/FileRecordTools/Records/RecordList.h	/^class RecordListNode {$/;"	c
RecordMgr	src/utils/FileRecordTools/Records/RecordMgr.cpp	/^RecordMgr::RecordMgr(FileRecordTypeChecker::RECORD_TYPE recType, int blockSize)$/;"	f	class:RecordMgr
RecordMgr	src/utils/FileRecordTools/Records/RecordMgr.h	/^class RecordMgr {$/;"	c
RecordOutputMgr	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^RecordOutputMgr::RecordOutputMgr()$/;"	f	class:RecordOutputMgr
RecordOutputMgr	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^class RecordOutputMgr {$/;"	c
RecordPtrSortAscFunctor	src/utils/FileRecordTools/Records/Record.h	/^class RecordPtrSortAscFunctor {$/;"	c
RecordPtrSortDescFunctor	src/utils/FileRecordTools/Records/Record.h	/^class RecordPtrSortDescFunctor {$/;"	c
RefData	src/utils/BamTools/include/api/BamAux.h	/^		RefData(const std::string& name = std::string(), const int32_t& length = 0)$/;"	f	struct:BamTools::RefData
RefData	src/utils/BamTools/include/api/BamAux.h	/^	struct RefData$/;"	s	namespace:BamTools
RefID	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^} RefID;$/;"	v	typeref:struct:_RefID_t
RefLength	src/utils/BamTools/include/api/BamAux.h	/^		int32_t RefLength;    \/\/!< length of reference sequence$/;"	m	struct:BamTools::RefData
RefName	src/utils/BamTools/include/api/BamAux.h	/^		std::string RefName;  \/\/!< name of reference sequence$/;"	m	struct:BamTools::RefData
RefVector	src/utils/BamTools/include/SamHeader.hpp	/^	typedef std::vector<RefData> RefVector;$/;"	t	namespace:BamTools
RegressTest	src/regressTest/RegressTest.cpp	/^RegressTest::RegressTest()$/;"	f	class:RegressTest
RegressTest	src/regressTest/RegressTest.h	/^class RegressTest {$/;"	c
RelativeDistance	src/reldist/reldist.cpp	/^RelativeDistance::RelativeDistance(string bedAFile, $/;"	f	class:RelativeDistance
RelativeDistance	src/reldist/reldist.h	/^class RelativeDistance {$/;"	c
ReportAnnotations	src/annotateBed/annotateBed.cpp	/^void BedAnnotate::ReportAnnotations() {$/;"	f	class:BedAnnotate
ReportChromCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::ReportChromCoverage(const vector<DEPTH> &chromCov, const int &chromSize, const string &chrom, chromHistMap &chromDepthHist) {$/;"	f	class:BedGenomeCoverage
ReportChromCoverageBedGraph	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::ReportChromCoverageBedGraph(const vector<DEPTH> &chromCov, const int &chromSize, const string &chrom) {$/;"	f	class:BedGenomeCoverage
ReportCounts	src/multiBamCov/multiBamCov.cpp	/^void MultiCovBam::ReportCounts(const vector<int> &counts) $/;"	f	class:MultiCovBam
ReportDNA	src/fastaFromBed/fastaFromBed.cpp	/^void Bed2Fa::ReportDNA(const BED &bed, string &dna) {$/;"	f	class:Bed2Fa
ReportDistanceSummary	src/reldist/reldist.cpp	/^void RelativeDistance::ReportDistanceSummary()$/;"	f	class:RelativeDistance
ReportDnaProfile	src/nucBed/nucBed.cpp	/^void NucBed::ReportDnaProfile(const BED& bed, const string &sequence, int seqLength)$/;"	f	class:NucBed
ReportGenomeCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::ReportGenomeCoverage(chromHistMap &chromDepthHist) {$/;"	f	class:BedGenomeCoverage
ResetChromCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::ResetChromCoverage() {$/;"	f	class:BedGenomeCoverage
Rewind	src/utils/bedFile/bedFile.cpp	/^void BedFile::Rewind(void) {$/;"	f	class:BedFile
RightPosition	src/utils/BamTools/include/api/BamAux.h	/^		int RightPosition;  \/\/!< position for region's right boundary$/;"	m	struct:BamTools::BamRegion
RightRefID	src/utils/BamTools/include/api/BamAux.h	/^		int RightRefID;     \/\/!< reference ID for region's right boundary$/;"	m	struct:BamTools::BamRegion
S	src/utils/htslib/cram/cram_structs.h	/^	} S;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon88
SAME_STRAND_EITHER	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^			SAME_STRAND_EITHER, \/\/must be same strand, but can be either forward or reverse$/;"	e	enum:FileRecordMergeMgr::__anon125
SAME_STRAND_FORWARD	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	typedef enum { SAME_STRAND_FORWARD, \/\/must all be forward strand$/;"	e	enum:FileRecordMergeMgr::__anon125
SAME_STRAND_REVERSE	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^			SAME_STRAND_REVERSE, \/\/must all be reverse strand$/;"	e	enum:FileRecordMergeMgr::__anon125
SAMPLE	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
SAMPLEFILE_H_	src/sampleFile/sampleFile.h	9;"	d
SAMPLE_STDDEV	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
SAM_AUX	src/utils/htslib/htslib/hts.h	/^    SAM_AUX   = 0x00000800,$/;"	e	enum:sam_fields
SAM_CIGAR	src/utils/htslib/htslib/hts.h	/^    SAM_CIGAR = 0x00000020,$/;"	e	enum:sam_fields
SAM_COLON	src/utils/BamTools/include/api/SamConstants.h	/^const char SAM_COLON  = ':';$/;"	m	namespace:BamTools::Constants
SAM_CONSTANTS_H	src/utils/BamTools/include/api/SamConstants.h	11;"	d
SAM_CO_BEGIN_TOKEN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_CO_BEGIN_TOKEN = "@CO";$/;"	m	namespace:BamTools::Constants
SAM_CURRENT_VERSION	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_CURRENT_VERSION = "1.4";$/;"	m	namespace:BamTools::Constants
SAM_DIGITS	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_DIGITS = "0123456789";$/;"	m	namespace:BamTools::Constants
SAM_EQUAL	src/utils/BamTools/include/api/SamConstants.h	/^const char SAM_EQUAL  = '=';$/;"	m	namespace:BamTools::Constants
SAM_FLAG	src/utils/htslib/htslib/hts.h	/^    SAM_FLAG  = 0x00000002,$/;"	e	enum:sam_fields
SAM_HD_BEGIN_TOKEN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_BEGIN_TOKEN    = "@HD";$/;"	m	namespace:BamTools::Constants
SAM_HD_GROUPORDER_NONE	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_GROUPORDER_NONE      = "none";$/;"	m	namespace:BamTools::Constants
SAM_HD_GROUPORDER_QUERY	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_GROUPORDER_QUERY     = "query";$/;"	m	namespace:BamTools::Constants
SAM_HD_GROUPORDER_REFERENCE	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_GROUPORDER_REFERENCE = "reference";$/;"	m	namespace:BamTools::Constants
SAM_HD_GROUPORDER_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_GROUPORDER_TAG = "GO";$/;"	m	namespace:BamTools::Constants
SAM_HD_SORTORDER_COORDINATE	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_SORTORDER_COORDINATE = "coordinate";$/;"	m	namespace:BamTools::Constants
SAM_HD_SORTORDER_QUERYNAME	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_SORTORDER_QUERYNAME  = "queryname";$/;"	m	namespace:BamTools::Constants
SAM_HD_SORTORDER_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_SORTORDER_TAG  = "SO";$/;"	m	namespace:BamTools::Constants
SAM_HD_SORTORDER_UNKNOWN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_SORTORDER_UNKNOWN    = "unknown";$/;"	m	namespace:BamTools::Constants
SAM_HD_SORTORDER_UNSORTED	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_SORTORDER_UNSORTED   = "unsorted";$/;"	m	namespace:BamTools::Constants
SAM_HD_VERSION_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_HD_VERSION_TAG    = "VN";$/;"	m	namespace:BamTools::Constants
SAM_MAPQ	src/utils/htslib/htslib/hts.h	/^    SAM_MAPQ  = 0x00000010,$/;"	e	enum:sam_fields
SAM_PERIOD	src/utils/BamTools/include/api/SamConstants.h	/^const char SAM_PERIOD = '.';$/;"	m	namespace:BamTools::Constants
SAM_PG	src/utils/htslib/cram/sam_header.h	/^} SAM_PG;$/;"	t	typeref:struct:__anon66
SAM_PG_BEGIN_TOKEN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_BEGIN_TOKEN         = "@PG";$/;"	m	namespace:BamTools::Constants
SAM_PG_COMMANDLINE_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_COMMANDLINE_TAG     = "CL";$/;"	m	namespace:BamTools::Constants
SAM_PG_ID_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_ID_TAG              = "ID";$/;"	m	namespace:BamTools::Constants
SAM_PG_NAME_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_NAME_TAG            = "PN";$/;"	m	namespace:BamTools::Constants
SAM_PG_PREVIOUSPROGRAM_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_PREVIOUSPROGRAM_TAG = "PP";$/;"	m	namespace:BamTools::Constants
SAM_PG_VERSION_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_PG_VERSION_TAG         = "VN";$/;"	m	namespace:BamTools::Constants
SAM_PNEXT	src/utils/htslib/htslib/hts.h	/^    SAM_PNEXT = 0x00000080,$/;"	e	enum:sam_fields
SAM_POS	src/utils/htslib/htslib/hts.h	/^    SAM_POS   = 0x00000008,$/;"	e	enum:sam_fields
SAM_QNAME	src/utils/htslib/htslib/hts.h	/^    SAM_QNAME = 0x00000001,$/;"	e	enum:sam_fields
SAM_QUAL	src/utils/htslib/htslib/hts.h	/^    SAM_QUAL  = 0x00000400,$/;"	e	enum:sam_fields
SAM_RG	src/utils/htslib/cram/sam_header.h	/^} SAM_RG;$/;"	t	typeref:struct:__anon65
SAM_RGAUX	src/utils/htslib/htslib/hts.h	/^    SAM_RGAUX = 0x00001000,$/;"	e	enum:sam_fields
SAM_RG_BEGIN_TOKEN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_BEGIN_TOKEN             = "@RG";$/;"	m	namespace:BamTools::Constants
SAM_RG_DESCRIPTION_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_DESCRIPTION_TAG         = "DS";$/;"	m	namespace:BamTools::Constants
SAM_RG_FLOWORDER_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_FLOWORDER_TAG           = "FO";$/;"	m	namespace:BamTools::Constants
SAM_RG_ID_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_ID_TAG                  = "ID";$/;"	m	namespace:BamTools::Constants
SAM_RG_KEYSEQUENCE_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_KEYSEQUENCE_TAG         = "KS";$/;"	m	namespace:BamTools::Constants
SAM_RG_LIBRARY_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_LIBRARY_TAG             = "LB";$/;"	m	namespace:BamTools::Constants
SAM_RG_PLATFORMUNIT_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_PLATFORMUNIT_TAG        = "PU";$/;"	m	namespace:BamTools::Constants
SAM_RG_PREDICTEDINSERTSIZE_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_PREDICTEDINSERTSIZE_TAG = "PI";$/;"	m	namespace:BamTools::Constants
SAM_RG_PRODUCTIONDATE_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_PRODUCTIONDATE_TAG      = "DT";$/;"	m	namespace:BamTools::Constants
SAM_RG_PROGRAM_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_PROGRAM_TAG             = "PG";$/;"	m	namespace:BamTools::Constants
SAM_RG_SAMPLE_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SAMPLE_TAG              = "SM";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQCENTER_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQCENTER_TAG           = "CN";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_CAPILLARY	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_CAPILLARY  = "CAPILLARY";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_HELICOS	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_HELICOS    = "HELICOS";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_ILLUMINA	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_ILLUMINA   = "ILLUMINA";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_IONTORRENT	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_IONTORRENT = "IONTORRENT";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_LS454	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_LS454      = "LS454";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_PACBIO	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_PACBIO     = "PACBIO";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_SOLID	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_SOLID      = "SOLID";$/;"	m	namespace:BamTools::Constants
SAM_RG_SEQTECHNOLOGY_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_RG_SEQTECHNOLOGY_TAG       = "PL";$/;"	m	namespace:BamTools::Constants
SAM_RNAME	src/utils/htslib/htslib/hts.h	/^    SAM_RNAME = 0x00000004,$/;"	e	enum:sam_fields
SAM_RNEXT	src/utils/htslib/htslib/hts.h	/^    SAM_RNEXT = 0x00000040,$/;"	e	enum:sam_fields
SAM_SEQ	src/utils/htslib/htslib/hts.h	/^    SAM_SEQ   = 0x00000200,$/;"	e	enum:sam_fields
SAM_SQ	src/utils/htslib/cram/sam_header.h	/^} SAM_SQ;$/;"	t	typeref:struct:__anon64
SAM_SQ_ASSEMBLYID_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_ASSEMBLYID_TAG = "AS";$/;"	m	namespace:BamTools::Constants
SAM_SQ_BEGIN_TOKEN	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_BEGIN_TOKEN    = "@SQ";$/;"	m	namespace:BamTools::Constants
SAM_SQ_CHECKSUM_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_CHECKSUM_TAG   = "M5";$/;"	m	namespace:BamTools::Constants
SAM_SQ_LENGTH_MAX	src/utils/BamTools/include/api/SamConstants.h	/^const unsigned int SAM_SQ_LENGTH_MAX = 536870911; \/\/ 2^29 - 1$/;"	m	namespace:BamTools::Constants
SAM_SQ_LENGTH_MIN	src/utils/BamTools/include/api/SamConstants.h	/^const unsigned int SAM_SQ_LENGTH_MIN = 1;$/;"	m	namespace:BamTools::Constants
SAM_SQ_LENGTH_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_LENGTH_TAG     = "LN";$/;"	m	namespace:BamTools::Constants
SAM_SQ_NAME_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_NAME_TAG       = "SN";$/;"	m	namespace:BamTools::Constants
SAM_SQ_SPECIES_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_SPECIES_TAG    = "SP";$/;"	m	namespace:BamTools::Constants
SAM_SQ_URI_TAG	src/utils/BamTools/include/api/SamConstants.h	/^const std::string SAM_SQ_URI_TAG        = "UR";$/;"	m	namespace:BamTools::Constants
SAM_STAR	src/utils/BamTools/include/api/SamConstants.h	/^const char SAM_STAR   = '*';$/;"	m	namespace:BamTools::Constants
SAM_TAB	src/utils/BamTools/include/api/SamConstants.h	/^const char SAM_TAB    = '\\t';$/;"	m	namespace:BamTools::Constants
SAM_TLEN	src/utils/htslib/htslib/hts.h	/^    SAM_TLEN  = 0x00000100,$/;"	e	enum:sam_fields
SAM_hdr	src/utils/htslib/cram/sam_header.h	/^} SAM_hdr;$/;"	t	typeref:struct:__anon67
SAM_hdr	src/utils/htslib/htslib/cram.h	/^typedef struct SAM_hdr SAM_hdr;$/;"	t	typeref:struct:SAM_hdr
SAM_hdr_item_s	src/utils/htslib/cram/sam_header.h	/^typedef struct SAM_hdr_item_s {$/;"	s
SAM_hdr_tag	src/utils/htslib/cram/sam_header.h	/^} SAM_hdr_tag;$/;"	t	typeref:struct:SAM_hdr_tag_s
SAM_hdr_tag_s	src/utils/htslib/cram/sam_header.h	/^typedef struct SAM_hdr_tag_s {$/;"	s
SAM_hdr_type	src/utils/htslib/cram/sam_header.h	/^} SAM_hdr_type;$/;"	t	typeref:struct:SAM_hdr_item_s
SAVE_BEDITEMS	src/split/splitBed.cpp	25;"	d	file:
SCAN_BUFFER_SIZE	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	static const int SCAN_BUFFER_SIZE = 4096; \/\/ 4 K buffer$/;"	m	class:InputStreamMgr
SEEK	src/utils/htslib/bgzf.c	/^    SEEK,$/;"	e	enum:mtaux_cmd	file:
SEEK_CUR	src/utils/htslib/cram/os.h	189;"	d
SEEK_END	src/utils/htslib/cram/os.h	190;"	d
SEEK_SET	src/utils/htslib/cram/os.h	188;"	d
SEQS_PER_SLICE	src/utils/htslib/cram/cram_structs.h	86;"	d
SEQUENCEUTILS_H	src/utils/sequenceUtilities/sequenceUtils.h	2;"	d
SET	src/utils/htslib/md5.c	104;"	d	file:
SET	src/utils/htslib/md5.c	99;"	d	file:
SHELL	Makefile	/^SHELL := \/bin\/bash -e$/;"	m
SHLIB_FLAVOUR	src/utils/htslib/Makefile	/^SHLIB_FLAVOUR = cygdll$/;"	m
SHLIB_FLAVOUR	src/utils/htslib/Makefile	/^SHLIB_FLAVOUR = dll$/;"	m
SHLIB_FLAVOUR	src/utils/htslib/Makefile	/^SHLIB_FLAVOUR = dylib$/;"	m
SHLIB_FLAVOUR	src/utils/htslib/Makefile	/^SHLIB_FLAVOUR = so$/;"	m
SHUFFLE	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
SINGLELINEDELIMTRANSFERBUFFER_H_	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	9;"	d
SINGLELINETEXTFILEREADER_H_	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	9;"	d
SINGLE_LINE_DELIM_TEXT_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_FILE_TYPE, EMPTY_FILE_TYPE, SINGLE_LINE_DELIM_TEXT_FILE_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon122
SLICE_PER_CNT	src/utils/htslib/cram/cram_structs.h	88;"	d
SLOP	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
SORT	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
SORT_TYPE	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef enum { UNSORTED, ASC, DESC} SORT_TYPE;$/;"	t	class:KeyListOpsMethods	typeref:enum:KeyListOpsMethods::__anon139
SOURCES	src/annotateBed/Makefile	/^SOURCES= annotateMain.cpp annotateBed.cpp annotateBed.h$/;"	m
SOURCES	src/bamToBed/Makefile	/^SOURCES= bamToBed.cpp$/;"	m
SOURCES	src/bamToFastq/Makefile	/^SOURCES= bamToFastqMain.cpp bamToFastq.cpp bamToFastq.h$/;"	m
SOURCES	src/bed12ToBed6/Makefile	/^SOURCES= bed12ToBed6.cpp$/;"	m
SOURCES	src/bedToBam/Makefile	/^SOURCES= bedToBam.cpp$/;"	m
SOURCES	src/bedToIgv/Makefile	/^SOURCES= bedToIgv.cpp$/;"	m
SOURCES	src/bedpeToBam/Makefile	/^SOURCES= bedpeToBam.cpp$/;"	m
SOURCES	src/closestFile/Makefile	/^SOURCES= closestHelp.cpp closestFile.cpp closestFile.h$/;"	m
SOURCES	src/clusterBed/Makefile	/^SOURCES= clusterMain.cpp clusterBed.cpp clusterBed.h$/;"	m
SOURCES	src/complementFile/Makefile	/^SOURCES= complementHelp.cpp complementFile.cpp complementFile.h$/;"	m
SOURCES	src/coverageFile/Makefile	/^SOURCES= coverageHelp.cpp coverageFile.cpp coverageFile.h$/;"	m
SOURCES	src/expand/Makefile	/^SOURCES= expand.cpp$/;"	m
SOURCES	src/fastaFromBed/Makefile	/^SOURCES= fastaFromBedMain.cpp fastaFromBed.cpp fastaFromBed.h$/;"	m
SOURCES	src/fisher/Makefile	/^SOURCES= fisherHelp.cpp fisher.cpp fisher.h kfunc.cpp \\$/;"	m
SOURCES	src/flankBed/Makefile	/^SOURCES= flankBedMain.cpp flankBed.cpp flankBed.h$/;"	m
SOURCES	src/genomeCoverageBed/Makefile	/^SOURCES= genomeCoverageMain.cpp genomeCoverageBed.cpp genomeCoverageBed.h$/;"	m
SOURCES	src/getOverlap/Makefile	/^SOURCES= getOverlap.cpp$/;"	m
SOURCES	src/groupBy/Makefile	/^SOURCES= groupByHelp.cpp groupBy.cpp groupBy.h$/;"	m
SOURCES	src/intersectFile/Makefile	/^SOURCES= intersectHelp.cpp intersectFile.cpp intersectFile.h$/;"	m
SOURCES	src/jaccard/Makefile	/^SOURCES= jaccardHelp.cpp jaccard.cpp jaccard.h$/;"	m
SOURCES	src/linksBed/Makefile	/^SOURCES= linksMain.cpp linksBed.cpp linksBed.h$/;"	m
SOURCES	src/mapFile/Makefile	/^SOURCES= mapHelp.cpp mapFile.cpp mapFile.h$/;"	m
SOURCES	src/maskFastaFromBed/Makefile	/^SOURCES= maskFastaFromBedMain.cpp maskFastaFromBed.cpp maskFastaFromBed.h$/;"	m
SOURCES	src/mergeFile/Makefile	/^SOURCES= mergeHelp.cpp mergeFile.cpp mergeFile.h$/;"	m
SOURCES	src/multiBamCov/Makefile	/^SOURCES= multiBamCovMain.cpp multiBamCov.cpp multiBamCov.h$/;"	m
SOURCES	src/multiIntersectBed/Makefile	/^SOURCES= multiIntersectBedMain.cpp multiIntersectBed.cpp multiIntersectBed.h$/;"	m
SOURCES	src/nekSandbox1/Makefile	/^SOURCES= nekSandboxMain.cpp $/;"	m
SOURCES	src/nucBed/Makefile	/^SOURCES= nucBedMain.cpp nucBed.cpp$/;"	m
SOURCES	src/pairToBed/Makefile	/^SOURCES= pairToBedMain.cpp pairToBed.cpp pairToBed.h$/;"	m
SOURCES	src/pairToPair/Makefile	/^SOURCES= pairToPairMain.cpp pairToPair.cpp pairToPair.h$/;"	m
SOURCES	src/randomBed/Makefile	/^SOURCES= randomBedMain.cpp randomBed.cpp randomBed.h$/;"	m
SOURCES	src/reldist/Makefile	/^SOURCES= reldistMain.cpp reldist.cpp reldist.h$/;"	m
SOURCES	src/sampleFile/Makefile	/^SOURCES= sampleHelp.cpp sampleFile.cpp sampleFile.h$/;"	m
SOURCES	src/shiftBed/Makefile	/^SOURCES= shiftBedMain.cpp shiftBed.cpp shiftBed.h$/;"	m
SOURCES	src/shuffleBed/Makefile	/^SOURCES= shuffleBedMain.cpp shuffleBed.cpp shuffleBed.h$/;"	m
SOURCES	src/slopBed/Makefile	/^SOURCES= slopBedMain.cpp slopBed.cpp slopBed.h$/;"	m
SOURCES	src/sortBed/Makefile	/^SOURCES= sortMain.cpp sortBed.cpp sortBed.h$/;"	m
SOURCES	src/spacingFile/Makefile	/^SOURCES= spacingHelp.cpp spacingFile.cpp spacingFile.h$/;"	m
SOURCES	src/split/Makefile	/^SOURCES= splitBedMain.cpp splitBed.cpp splitBed.h$/;"	m
SOURCES	src/subtractFile/Makefile	/^SOURCES= subtractHelp.cpp subtractFile.cpp subtractFile.h$/;"	m
SOURCES	src/tagBam/Makefile	/^SOURCES= tagBamMain.cpp tagBam.cpp tagBam.h$/;"	m
SOURCES	src/unionBedGraphs/Makefile	/^SOURCES= unionBedGraphsMain.cpp unionBedGraphs.cpp unionBedGraphs.h$/;"	m
SOURCES	src/utils/BamTools-Ancillary/Makefile	/^SOURCES= BamAncillary.cpp BamAncillary.h$/;"	m
SOURCES	src/utils/BinTree/Makefile	/^SOURCES= BinTree.cpp BinTree.h $/;"	m
SOURCES	src/utils/BlockedIntervals/Makefile	/^SOURCES= BlockedIntervals.cpp BlockedIntervals.h$/;"	m
SOURCES	src/utils/Contexts/Makefile	/^SOURCES= ContextBase.cpp ContextBase.h ContextIntersect.cpp ContextIntersect.h ContextFisher.cpp ContextFisher.h ContextMap.cpp \\$/;"	m
SOURCES	src/utils/Fasta/Makefile	/^SOURCES= Fasta.cpp Fasta.h split.cpp split.h$/;"	m
SOURCES	src/utils/FileRecordTools/FileReaders/Makefile	/^SOURCES= FileReader.h FileReader.cpp  \\$/;"	m
SOURCES	src/utils/FileRecordTools/Makefile	/^SOURCES= FileRecordMgr.cpp FileRecordMgr.h FileRecordMergeMgr.cpp FileRecordMergeMgr.h$/;"	m
SOURCES	src/utils/FileRecordTools/Records/Makefile	/^SOURCES = Record.cpp EmptyRecord.cpp Bed3Interval.cpp \\$/;"	m
SOURCES	src/utils/GenomeFile/Makefile	/^SOURCES= NewGenomeFile.cpp NewGenomeFile.h GenomeFile.cpp GenomeFile.h$/;"	m
SOURCES	src/utils/KeyListOps/Makefile	/^SOURCES= KeyListOps.cpp KeyListOps.h KeyListOpsMethods.cpp KeyListOpsMethods.h$/;"	m
SOURCES	src/utils/NewChromsweep/Makefile	/^SOURCES= NewChromsweep.cpp NewChromsweep.h CloseSweep.cpp CloseSweep.h$/;"	m
SOURCES	src/utils/RecordOutputMgr/Makefile	/^SOURCES= RecordOutputMgr.cpp RecordOutputMgr.h $/;"	m
SOURCES	src/utils/ToolBase/Makefile	/^SOURCES= ToolBase.h$/;"	m
SOURCES	src/utils/VectorOps/Makefile	/^SOURCES= VectorOps.cpp VectorOps.h$/;"	m
SOURCES	src/utils/bedFile/Makefile	/^SOURCES= bedFile.cpp bedFile.h$/;"	m
SOURCES	src/utils/bedFilePE/Makefile	/^SOURCES= bedFilePE.cpp bedFilePE.h$/;"	m
SOURCES	src/utils/bedGraphFile/Makefile	/^SOURCES= bedGraphFile.cpp bedGraphFile.h$/;"	m
SOURCES	src/utils/chromsweep/Makefile	/^SOURCES= chromsweep.cpp chromsweep.h$/;"	m
SOURCES	src/utils/driver/Makefile	/^SOURCES= BedtoolsDriver.h BedtoolsDriver.cpp$/;"	m
SOURCES	src/utils/fileType/Makefile	/^SOURCES= fileType.cpp fileType.h FileRecordTypeChecker.cpp FileRecordTypeChecker.h$/;"	m
SOURCES	src/utils/general/Makefile	/^SOURCES= ParseTools.h ParseTools.cpp PushBackStreamBuf.cpp PushBackStreamBuf.h CompressionTools.h CompressionTools.cpp \\$/;"	m
SOURCES	src/utils/sequenceUtilities/Makefile	/^SOURCES= sequenceUtils.cpp sequenceUtils.h$/;"	m
SOURCES	src/utils/tabFile/Makefile	/^SOURCES= tabFile.cpp tabFile.h$/;"	m
SOURCES	src/utils/version/Makefile	/^SOURCES= version.cpp$/;"	m
SOURCES	src/windowBed/Makefile	/^SOURCES= windowMain.cpp windowBed.cpp windowBed.h$/;"	m
SOURCES	src/windowMaker/Makefile	/^SOURCES= windowMakerMain.cpp windowMaker.cpp windowMaker.h$/;"	m
SPACING	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
SPACINGFILE_H_	src/spacingFile/spacingFile.h	9;"	d
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	docs/make.bat	/^set SPHINXBUILD=C:\\Users\\William\\Desktop\\GenomeLabproject\\bootstrap\\Sphinx-1.1.3\\sphinx-build.py$/;"	v
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    =$/;"	m
SRC_DIR	Makefile	/^export SRC_DIR	= $(shell readlink -f src)$/;"	m
SR_INDEL	src/utils/htslib/bcf_sr_sort.c	32;"	d	file:
SR_OTHER	src/utils/htslib/bcf_sr_sort.c	33;"	d	file:
SR_REF	src/utils/htslib/bcf_sr_sort.c	30;"	d	file:
SR_SCORE	src/utils/htslib/bcf_sr_sort.c	34;"	d	file:
SR_SNP	src/utils/htslib/bcf_sr_sort.c	31;"	d	file:
SSIZE_MAX	src/utils/htslib/hfile.c	50;"	d	file:
START	src/utils/Point/Point.h	/^    START,$/;"	e	enum:COORDINATE_TYPE
STATE	src/utils/htslib/textutils.c	228;"	d	file:
STATE	src/utils/htslib/textutils.c	264;"	d	file:
STDDEV	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
STEP	src/utils/htslib/md5.c	85;"	d	file:
STRANDQUEUE_H_	src/utils/FileRecordTools/Records/StrandQueue.h	8;"	d
STRINGUTILITIES_H	src/utils/stringUtilities/stringUtilities.h	2;"	d
STRNCMP	src/utils/htslib/sam.c	1743;"	d	file:
SUBDIRS	Makefile	/^SUBDIRS = $(SRC_DIR)\/annotateBed \\$/;"	m
SUBDIRS	src/utils/FileRecordTools/Makefile	/^SUBDIRS = .\/FileReaders \\$/;"	m
SUBTRACT	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
SUBTRACTFILE_H_	src/subtractFile/subtractFile.h	9;"	d
SUM	src/utils/KeyListOps/KeyListOps.h	/^	typedef enum { SUM, MEAN, STDDEV, SAMPLE_STDDEV, MEDIAN, MODE, ANTIMODE, MIN, MAX, ABSMIN, ABSMAX, COUNT, DISTINCT, COUNT_DISTINCT,$/;"	e	enum:KeyListOps::__anon138
SW_BWD	src/utils/htslib/vcf_sweep.c	31;"	d	file:
SW_FWD	src/utils/htslib/vcf_sweep.c	30;"	d	file:
S_ISDIR	src/utils/htslib/cram/files.c	42;"	d	file:
S_ISREG	src/utils/htslib/cram/files.c	45;"	d	file:
SamHeader	src/utils/BamTools/include/SamHeader.hpp	/^		SamHeader() : _header(NULL), _filename(""), SortOrder(_defulat_sort_order), Version(_defualt_version), GroupOrder(_default_group_order) {}$/;"	f	class:BamTools::SamHeader
SamHeader	src/utils/BamTools/include/SamHeader.hpp	/^		SamHeader(const std::string& filename, bam_hdr_t* hdr) $/;"	f	class:BamTools::SamHeader
SamHeader	src/utils/BamTools/include/SamHeader.hpp	/^	class SamHeader {$/;"	c	namespace:BamTools
SampleFile	src/sampleFile/sampleFile.cpp	/^SampleFile::SampleFile(ContextSample *context)$/;"	f	class:SampleFile
SampleFile	src/sampleFile/sampleFile.h	/^class SampleFile : public ToolBase {$/;"	c
SampleRecordLtFn	src/sampleFile/sampleFile.cpp	/^static bool SampleRecordLtFn(const Record *rec1, const Record *rec2) {$/;"	f	file:
SaveAlignment	src/utils/BamTools/include/BamWriter.hpp	/^		void SaveAlignment(const BamAlignment& al)$/;"	f	class:BamTools::BamWriter
ScanCache	src/utils/chromsweep/chromsweep.cpp	/^void ChromSweep::ScanCache() {$/;"	f	class:ChromSweep
Seek	src/utils/bedFile/bedFile.cpp	/^void BedFile::Seek(unsigned long offset) {$/;"	f	class:BedFile
SetAlignmentFlag	src/utils/BamTools/include/BamAlignment.hpp	/^		inline void SetAlignmentFlag(uint32_t mask, bool val)$/;"	f	class:BamTools::BamAlignment
SetCompressionMode	src/utils/BamTools/include/BamWriter.hpp	/^		void SetCompressionMode(CompressionMode mode)$/;"	f	class:BamTools::BamWriter
SetRegion	src/utils/BamTools/include/BamReader.hpp	/^		bool SetRegion(BamRegion& region)$/;"	f	class:BamTools::BamReader
ShiftBed	src/shiftBed/shiftBed.cpp	/^void BedShift::ShiftBed() {$/;"	f	class:BedShift
Shuffle	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::Shuffle() {$/;"	f	class:BedShuffle
ShuffleWithExclusions	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ShuffleWithExclusions() {$/;"	f	class:BedShuffle
ShuffleWithInclusions	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ShuffleWithInclusions() {$/;"	f	class:BedShuffle
ShuffleWithInclusionsAndExclusions	src/shuffleBed/shuffleBed.cpp	/^void BedShuffle::ShuffleWithInclusionsAndExclusions() {$/;"	f	class:BedShuffle
SimplePropertyMapping	src/utils/BamTools/mapping/BamAlignment.py	/^class SimplePropertyMapping:$/;"	c
SimpleSplitInfo	src/split/splitBed.cpp	/^        SimpleSplitInfo():out(0),count(0),nbases(0)$/;"	f	class:SimpleSplitInfo
SimpleSplitInfo	src/split/splitBed.cpp	/^class SimpleSplitInfo$/;"	c	file:
SingleFastq	src/bamToFastq/bamToFastq.cpp	/^void BamToFastq::SingleFastq() {$/;"	f	class:BamToFastq
SingleLineDelimTextFileReader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^SingleLineDelimTextFileReader::SingleLineDelimTextFileReader(int numFields, char delimChar)$/;"	f	class:SingleLineDelimTextFileReader
SingleLineDelimTextFileReader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^class SingleLineDelimTextFileReader : public FileReader {$/;"	c
SingleLineDelimTransferBuffer	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.cpp	/^SingleLineDelimTransferBuffer::SingleLineDelimTransferBuffer(int numFields, char delimChar)$/;"	f	class:SingleLineDelimTransferBuffer
SingleLineDelimTransferBuffer	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^class SingleLineDelimTransferBuffer {$/;"	c
SlopBed	src/slopBed/slopBed.cpp	/^void BedSlop::SlopBed() {$/;"	f	class:BedSlop
SortBed	src/sortBed/sortBed.cpp	/^void BedSort::SortBed() {$/;"	f	class:BedSort
SortBedByChromThenScoreAsc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedByChromThenScoreAsc() {$/;"	f	class:BedSort
SortBedByChromThenScoreDesc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedByChromThenScoreDesc() {$/;"	f	class:BedSort
SortBedByChromThenSizeAsc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedByChromThenSizeAsc() {$/;"	f	class:BedSort
SortBedByChromThenSizeDesc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedByChromThenSizeDesc() {$/;"	f	class:BedSort
SortBedBySizeAsc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedBySizeAsc() {$/;"	f	class:BedSort
SortBedBySizeDesc	src/sortBed/sortBed.cpp	/^void BedSort::SortBedBySizeDesc() {$/;"	f	class:BedSort
SortBedOnFaidx	src/sortBed/sortBed.cpp	/^void BedSort::SortBedOnFaidx()$/;"	f	class:BedSort
SortOrder	src/utils/BamTools/include/SamHeader.hpp	/^		std::string SortOrder;$/;"	m	class:BamTools::SamHeader
SpacingFile	src/spacingFile/spacingFile.cpp	/^SpacingFile::SpacingFile(ContextSpacing *context)$/;"	f	class:SpacingFile
SpacingFile	src/spacingFile/spacingFile.h	/^class SpacingFile : public ToolBase {$/;"	c
StartNewChrom	src/genomeCoverageBed/genomeCoverageBed.cpp	/^void BedGenomeCoverage::StartNewChrom(const string& newChrom) {$/;"	f	class:BedGenomeCoverage
StrandQueue	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^StrandQueue::StrandQueue() {$/;"	f	class:StrandQueue
StrandQueue	src/utils/FileRecordTools/Records/StrandQueue.h	/^class StrandQueue {$/;"	c
SubtractFile	src/subtractFile/subtractFile.cpp	/^SubtractFile::SubtractFile(ContextSubtract *context)$/;"	f	class:SubtractFile
SubtractFile	src/subtractFile/subtractFile.h	/^class SubtractFile : public IntersectFile {$/;"	c
SupportData	src/utils/BamTools/include/BamAlignment.hpp	/^		} SupportData;$/;"	m	class:BamTools::BamAlignment	typeref:struct:BamTools::BamAlignment::_SupportData
T16	src/utils/htslib/test/hts_endian.c	64;"	d	file:
T32	src/utils/htslib/test/hts_endian.c	75;"	d	file:
T64	src/utils/htslib/test/hts_endian.c	93;"	d	file:
TABFILE_H	src/utils/tabFile/tabFile.h	13;"	d
TAB_BLANK	src/utils/tabFile/tabFile.h	/^    TAB_BLANK   = 1,$/;"	e	enum:TabLineStatus
TAB_FIELDS	src/utils/tabFile/tabFile.h	/^typedef vector<string> TAB_FIELDS;$/;"	t
TAB_HEADER	src/utils/tabFile/tabFile.h	/^    TAB_HEADER  = 0,$/;"	e	enum:TabLineStatus
TAB_INVALID	src/utils/tabFile/tabFile.h	/^    TAB_INVALID = -1,$/;"	e	enum:TabLineStatus
TAB_VALID	src/utils/tabFile/tabFile.h	/^    TAB_VALID   = 2$/;"	e	enum:TabLineStatus
TAG	src/utils/Contexts/ContextBase.h	/^		MULTICOV, TAG, JACCARD, OVERLAP, IGV, LINKS,MAKEWINDOWS, GROUPBY, EXPAND, SPACING, FISHER, GROUP_BY} PROGRAM_TYPE;$/;"	e	enum:ContextBase::__anon130
TAGBAM_H	src/tagBam/tagBam.h	13;"	d
TASK_SIZE	src/utils/htslib/thread_pool.c	997;"	d	file:
TBX_GENERIC	src/utils/htslib/htslib/tbx.h	38;"	d
TBX_MAX_SHIFT	src/utils/htslib/htslib/tbx.h	36;"	d
TBX_SAM	src/utils/htslib/htslib/tbx.h	39;"	d
TBX_UCSC	src/utils/htslib/htslib/tbx.h	41;"	d
TBX_VCF	src/utils/htslib/htslib/tbx.h	40;"	d
TD	src/utils/htslib/test/hts_endian.c	128;"	d	file:
TDIFF	src/utils/htslib/thread_pool.c	458;"	d	file:
TD_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *TD_blk;          \/\/ Tag Dictionary$/;"	m	struct:cram_block_compression_hdr
TD_hash	src/utils/htslib/cram/cram_structs.h	/^    khash_t(m_s2i) *TD_hash;     \/\/ Keyed on TD strings, map to TL[] indices$/;"	m	struct:cram_block_compression_hdr
TD_keys	src/utils/htslib/cram/cram_structs.h	/^    string_alloc_t *TD_keys;     \/\/ Pooled keys for TD hash.$/;"	m	struct:cram_block_compression_hdr
TF	src/utils/htslib/test/hts_endian.c	116;"	d	file:
TF_SHIFT	src/utils/htslib/cram/rANS_static.c	51;"	d	file:
THREAD_POOL_INTERNAL_H	src/utils/htslib/thread_pool_internal.h	43;"	d
TL	src/utils/htslib/cram/cram_structs.h	/^    int     TL;$/;"	m	struct:cram_record
TL	src/utils/htslib/cram/cram_structs.h	/^    unsigned char **TL;          \/\/ array of size nTL, pointer into TD_blk.$/;"	m	struct:cram_block_compression_hdr
TN	src/utils/htslib/cram/cram_structs.h	/^    uint32_t      *TN;$/;"	m	struct:cram_slice
TN_idx	src/utils/htslib/cram/cram_structs.h	/^    int32_t TN_idx;       \/\/ TN; idx to s->TN;$/;"	m	struct:cram_record
TOKENIZER_H_	src/utils/general/Tokenizer.h	9;"	d
TOOLBASE_H_	src/utils/ToolBase/ToolBase.h	9;"	d
TOOLS_DIR	src/utils/driver/Makefile	/^TOOLS_DIR = ..\/..\/..\/src\/$/;"	m
TOOL_DIR	src/closestFile/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/complementFile/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/coverageFile/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/fisher/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/groupBy/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/jaccard/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/mapFile/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOOL_DIR	src/subtractFile/Makefile	/^TOOL_DIR = ..\/..\/src\/$/;"	m
TOTFREQ	src/utils/htslib/cram/rANS_static.c	52;"	d	file:
TRIAL_SPAN	src/utils/htslib/cram/cram_io.c	94;"	d	file:
TabFile	src/utils/tabFile/tabFile.cpp	/^TabFile::TabFile(const string &tabFile)$/;"	f	class:TabFile
TabFile	src/utils/tabFile/tabFile.h	/^class TabFile {$/;"	c
TabLineStatus	src/utils/tabFile/tabFile.h	/^enum TabLineStatus$/;"	g
Tag	src/tagBam/tagBam.cpp	/^void TagBam::Tag() {$/;"	f	class:TagBam
TagBam	src/tagBam/tagBam.cpp	/^TagBam::TagBam(const string &bamFile, const vector<string> &annoFileNames,$/;"	f	class:TagBam
TagBam	src/tagBam/tagBam.h	/^class TagBam {$/;"	c
TagData	src/utils/BamTools/include/BamAlignment.hpp	/^		std::string AlignedBases, Qualities, ErrorString, TagData;$/;"	m	class:BamTools::BamAlignment
Test16	src/utils/htslib/test/hts_endian.c	/^} Test16;$/;"	t	typeref:struct:__anon45	file:
Test32	src/utils/htslib/test/hts_endian.c	/^} Test32;$/;"	t	typeref:struct:__anon46	file:
Test64	src/utils/htslib/test/hts_endian.c	/^} Test64;$/;"	t	typeref:struct:__anon47	file:
Test_double	src/utils/htslib/test/hts_endian.c	/^} Test_double;$/;"	t	typeref:struct:__anon49	file:
Test_float	src/utils/htslib/test/hts_endian.c	/^} Test_float;$/;"	t	typeref:struct:__anon48	file:
ToString	src/utils/BamTools/include/SamHeader.hpp	/^		const std::string ToString() $/;"	f	class:BamTools::SamHeader
ToString	src/utils/lineFileUtilities/lineFileUtilities.h	/^std::string ToString(const T & value) {$/;"	f
Tokenize	src/utils/lineFileUtilities/lineFileUtilities.h	/^void Tokenize(const string &str, vector<int> &elems, char delimiter = '\\t') $/;"	f
Tokenize	src/utils/lineFileUtilities/lineFileUtilities.h	/^void Tokenize(const string &str, vector<string> &elems, char delimiter = '\\t') $/;"	f
TokenizeColumns	src/utils/lineFileUtilities/lineFileUtilities.h	/^void TokenizeColumns(const string &str, vector<int> &elems) $/;"	f
Tokenizer	src/utils/general/Tokenizer.cpp	/^Tokenizer::Tokenizer()$/;"	f	class:Tokenizer
Tokenizer	src/utils/general/Tokenizer.h	/^class Tokenizer {$/;"	c
ToolBase	src/utils/ToolBase/ToolBase.h	/^	ToolBase(ContextBase *context) {_context = context; }$/;"	f	class:ToolBase
ToolBase	src/utils/ToolBase/ToolBase.h	/^class ToolBase {$/;"	c
Type	src/utils/BamTools/include/BamAlignment.hpp	/^		char     Type;   \/\/!< CIGAR operation type (MIDNSHPX=)$/;"	m	struct:BamTools::CigarOp
UINT	src/utils/bedFile/bedFile.h	/^typedef uint32_t UINT;$/;"	t
UNIONBEDG	src/utils/Contexts/ContextBase.h	/^		COMPLEMENT, SUBTRACT, SLOP, FLANK, SORT, RANDOM, SAMPLE, SHUFFLE, ANNOTATE, MULTIINTER, UNIONBEDG, PAIRTOBED,$/;"	e	enum:ContextBase::__anon130
UNIONBEDGRAPHS_H	src/unionBedGraphs/unionBedGraphs.h	14;"	d
UNKNOWN	src/utils/FileRecordTools/Records/Record.h	/^	typedef enum { FORWARD, REVERSE, UNKNOWN } strandType;$/;"	e	enum:Record::__anon124
UNKNOWN_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_FILE_TYPE, EMPTY_FILE_TYPE, SINGLE_LINE_DELIM_TEXT_FILE_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon122
UNKNOWN_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^	typedef enum  { UNKNOWN_RECORD_TYPE, EMPTY_RECORD_TYPE, BED3_RECORD_TYPE, BED4_RECORD_TYPE, BEDGRAPH_RECORD_TYPE, BED5_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
UNMAPPED_SLICE	src/utils/htslib/cram/cram_structs.h	/^    UNMAPPED_SLICE     = 3, \/\/ CRAM V1.0 only$/;"	e	enum:cram_content_type
UNMAPPED_SLICE	src/utils/htslib/htslib/cram.h	/^    UNMAPPED_SLICE     = 3, \/\/ CRAM V1.0 only$/;"	e	enum:cram_content_type
UNSORTED	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef enum { UNSORTED, ASC, DESC} SORT_TYPE;$/;"	e	enum:KeyListOpsMethods::__anon139
UNSPECIFIED_PROGRAM	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
UNTESTED	src/utils/Contexts/ContextBase.h	/^	typedef enum { YES, NO, UNTESTED } testType;$/;"	e	enum:ContextBase::__anon131
UPSTREAM	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { UPSTREAM, INTERSECT, DOWNSTREAM } streamDirType;$/;"	e	enum:CloseSweep::__anon136
USE_BGZF_DOPEN	src/utils/htslib/test/test_bgzf.c	/^    USE_BGZF_DOPEN,$/;"	e	enum:__anon51	file:
USE_BGZF_HOPEN	src/utils/htslib/test/test_bgzf.c	/^    USE_BGZF_HOPEN$/;"	e	enum:__anon51	file:
USE_BGZF_OPEN	src/utils/htslib/test/test_bgzf.c	/^    USE_BGZF_OPEN,$/;"	e	enum:__anon51	file:
USE_NOW	src/utils/general/Tokenizer.h	/^	typedef enum { USE_NOW, IGNORE } lastElemCode;$/;"	e	enum:Tokenizer::__anon1
USHORT	src/utils/bedFile/bedFile.h	/^typedef uint16_t USHORT;$/;"	t
UTILITIES_DIR	src/annotateBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bamToBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bamToFastq/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bed12ToBed6/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bedToBam/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bedToIgv/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/bedpeToBam/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/closestFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/clusterBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/complementFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/coverageFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/expand/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/fastaFromBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/fisher/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/flankBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/genomeCoverageBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/getOverlap/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/groupBy/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/intersectFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/jaccard/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/linksBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/mapFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/maskFastaFromBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/mergeFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/multiBamCov/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/multiIntersectBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/nekSandbox1/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/nucBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/pairToBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/pairToPair/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/randomBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/regressTest/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/reldist/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/sampleFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/shiftBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/shuffleBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/slopBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/sortBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/spacingFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/split/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/subtractFile/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/tagBam/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/unionBedGraphs/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/BamTools-Ancillary/Makefile	/^UTILITIES_DIR = ..\/$/;"	m
UTILITIES_DIR	src/utils/BinTree/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/BlockedIntervals/Makefile	/^UTILITIES_DIR = ..\/$/;"	m
UTILITIES_DIR	src/utils/Contexts/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/Fasta/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/FileRecordTools/FileReaders/Makefile	/^UTILITIES_DIR = ..\/..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/FileRecordTools/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/FileRecordTools/Records/Makefile	/^UTILITIES_DIR = ..\/..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/GenomeFile/Makefile	/^UTILITIES_DIR = ..\/$/;"	m
UTILITIES_DIR	src/utils/KeyListOps/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/NewChromsweep/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/RecordOutputMgr/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/ToolBase/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/VectorOps/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/bedFile/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/bedFilePE/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/bedGraphFile/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/chromsweep/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/driver/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/fileType/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/general/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/gzstream/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/sequenceUtilities/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/tabFile/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/utils/version/Makefile	/^UTILITIES_DIR = ..\/..\/utils\/$/;"	m
UTILITIES_DIR	src/windowBed/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTILITIES_DIR	src/windowMaker/Makefile	/^UTILITIES_DIR = ..\/utils\/$/;"	m
UTIL_DIR	Makefile	/^export UTIL_DIR	= src\/utils$/;"	m
UTIL_SUBDIRS	Makefile	/^UTIL_SUBDIRS =	$(SRC_DIR)\/utils\/FileRecordTools \\$/;"	m
Uncompressed	src/utils/BamTools/include/BamWriter.hpp	/^			Uncompressed$/;"	e	enum:BamTools::BamWriter::CompressionMode
Union	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::Union() {$/;"	f	class:UnionBedGraphs
UnionBedGraphs	src/unionBedGraphs/unionBedGraphs.cpp	/^UnionBedGraphs::UnionBedGraphs(std::ostream& _output,$/;"	f	class:UnionBedGraphs
UnionBedGraphs	src/unionBedGraphs/unionBedGraphs.h	/^class UnionBedGraphs$/;"	c
UpdateDistanceSummary	src/reldist/reldist.cpp	/^void RelativeDistance::UpdateDistanceSummary(float rel_dist)$/;"	f	class:RelativeDistance
UpdateInformation	src/unionBedGraphs/unionBedGraphs.cpp	/^void UnionBedGraphs::UpdateInformation(const PointWithDepth &item) {$/;"	f	class:UnionBedGraphs
VB	obj/BamAncillary.h	/^L/;"	v
VCFRECORD_H_	src/utils/FileRecordTools/Records/VcfRecord.h	9;"	d
VCF_BND	src/utils/htslib/htslib/vcf.h	140;"	d
VCF_FILETYPE	src/utils/bedFile/bedFile.h	/^    VCF_FILETYPE$/;"	e	enum:FileType
VCF_FILE_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^			GFF_FILE_TYPE, GZIP_FILE_TYPE, BAM_FILE_TYPE, VCF_FILE_TYPE} FILE_TYPE;$/;"	e	enum:FileRecordTypeChecker::__anon122
VCF_INDEL	src/utils/htslib/htslib/vcf.h	138;"	d
VCF_MNP	src/utils/htslib/htslib/vcf.h	137;"	d
VCF_OTHER	src/utils/htslib/htslib/vcf.h	139;"	d
VCF_RECORD_TYPE	src/utils/fileType/FileRecordTypeChecker.h	/^		BED6_RECORD_TYPE, BED12_RECORD_TYPE, BED_PLUS_RECORD_TYPE, BED6_PLUS_RECORD_TYPE, BAM_RECORD_TYPE, VCF_RECORD_TYPE, GFF_RECORD_TYPE,$/;"	e	enum:FileRecordTypeChecker::__anon123
VCF_REF	src/utils/htslib/htslib/vcf.h	135;"	d
VCF_SNP	src/utils/htslib/htslib/vcf.h	136;"	d
VCF_TAG_FIELD	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	static const int VCF_TAG_FIELD = 7;$/;"	m	class:SingleLineDelimTextFileReader
VECTOROPS_H	src/utils/VectorOps/VectorOps.h	13;"	d
VERSION	src/utils/version/version.cpp	/^const char VERSION[] = VERSION_GIT;$/;"	v
VERSION_FILE	Makefile	/^VERSION_FILE=.\/src\/utils\/version\/version_git.h$/;"	m
VERSION_GIT	src/utils/version/version_git.h	3;"	d
VERSION_GIT_H	src/utils/version/version_git.h	2;"	d
VERSION_H	src/utils/version/version.h	2;"	d
ValueGreaterThan	src/utils/VectorOps/VectorOps.cpp	/^struct ValueGreaterThan$/;"	s	file:
ValueLessThan	src/utils/VectorOps/VectorOps.cpp	/^struct ValueLessThan$/;"	s	file:
VcfRecord	src/utils/FileRecordTools/Records/VcfRecord.h	/^	VcfRecord() {}$/;"	f	class:VcfRecord
VcfRecord	src/utils/FileRecordTools/Records/VcfRecord.h	/^class VcfRecord : public BedPlusInterval {$/;"	c
VectorOps	src/utils/VectorOps/VectorOps.cpp	/^VectorOps::VectorOps(const vector<string> &vec)$/;"	f	class:VectorOps
VectorOps	src/utils/VectorOps/VectorOps.h	/^class VectorOps {$/;"	c
Version	src/utils/BamTools/include/SamHeader.hpp	/^		std::string Version;$/;"	m	class:BamTools::SamHeader
WANTED_STRAND_TYPE	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	WANTED_STRAND_TYPE;$/;"	t	class:FileRecordMergeMgr	typeref:enum:FileRecordMergeMgr::__anon125
WIN32_LEAN_AND_MEAN	src/utils/htslib/bgzip.c	40;"	d	file:
WINDOW	src/utils/Contexts/ContextBase.h	/^	typedef enum {UNSPECIFIED_PROGRAM, INTERSECT, WINDOW, CLOSEST, COVERAGE, MAP, GENOMECOV, MERGE, CLUSTER,$/;"	e	enum:ContextBase::__anon130
WINDOWBED_H	src/windowBed/windowBed.h	13;"	d
WINDOW_METHOD	src/windowMaker/windowMaker.h	/^    enum WINDOW_METHOD {$/;"	g	class:WindowMaker
WINDOW_SIZE	src/utils/htslib/bgzip.c	/^static const int WINDOW_SIZE = 64 * 1024;$/;"	v	file:
WRITE_COMPRESSED	src/utils/htslib/test/test_view.c	/^    WRITE_COMPRESSED = 2,$/;"	e	enum:test_op	file:
WRITE_CRAM	src/utils/htslib/test/test_view.c	/^    WRITE_CRAM       = 8$/;"	e	enum:test_op	file:
WindowIntersectBam	src/windowBed/windowBed.cpp	/^void BedWindow::WindowIntersectBam(string bamFile) {$/;"	f	class:BedWindow
WindowIntersectBed	src/windowBed/windowBed.cpp	/^void BedWindow::WindowIntersectBed() {$/;"	f	class:BedWindow
WindowMaker	src/windowMaker/windowMaker.cpp	/^WindowMaker::WindowMaker(string &fileName, ID_METHOD id_method, INPUT_FILE_TYPE input_file_type, uint32_t count, bool reverse)$/;"	f	class:WindowMaker
WindowMaker	src/windowMaker/windowMaker.cpp	/^WindowMaker::WindowMaker(string &fileName, ID_METHOD id_method, INPUT_FILE_TYPE input_file_type, uint32_t size, uint32_t step, bool reverse)$/;"	f	class:WindowMaker
WindowMaker	src/windowMaker/windowMaker.h	/^class WindowMaker {$/;"	c
WriteURL	src/linksBed/linksBed.cpp	/^void BedLinks::WriteURL(BED &bed, string &base) {$/;"	f	class:BedLinks
X	src/utils/htslib/cram/cram_structs.h	/^	} X;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon84
YES	src/utils/Contexts/ContextBase.h	/^	typedef enum { YES, NO, UNTESTED } testType;$/;"	e	enum:ContextBase::__anon131
Z_CRAM_STRAT	src/utils/htslib/cram/cram_encode.c	50;"	d	file:
_AC_KLIST_H	src/utils/htslib/htslib/klist.h	27;"	d
_AlignmentFlag_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _AlignmentFlag_t {$/;"	s
_Bin_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _Bin_t {$/;"	s
_CRAM_ENCODINGS_H_	src/utils/htslib/cram/cram_codecs.h	32;"	d
_CRAM_H_	src/utils/htslib/cram/cram.h	43;"	d
_CRAM_INDEX_H_	src/utils/htslib/cram/cram_index.h	32;"	d
_CRAM_IO_H_	src/utils/htslib/cram/cram_io.h	43;"	d
_CRAM_READ_H_	src/utils/htslib/cram/cram_decode.h	42;"	d
_CRAM_SAMTOOLS_H_	src/utils/htslib/cram/cram_samtools.h	32;"	d
_CRAM_STATS_H_	src/utils/htslib/cram/cram_stats.h	32;"	d
_CRAM_STRUCTS_H_	src/utils/htslib/cram/cram_structs.h	32;"	d
_CRAM_WRITE_H_	src/utils/htslib/cram/cram_encode.h	42;"	d
_Comp	src/utils/BamTools/include/BamReader.hpp	/^		struct _Comp {$/;"	s	class:BamTools::BamReader
_EXT_OBJECTS	src/bedpeToBam/Makefile	/^_EXT_OBJECTS=bedFile.o bedFilePE.o genomeFile.o lineFileUtilities.o gzstream.o fileType.o$/;"	m
_EXT_OBJECTS	src/utils/BinTree/Makefile	/^_EXT_OBJECTS=$/;"	m
_EXT_OBJECTS	src/utils/BlockedIntervals/Makefile	/^_EXT_OBJECTS=bedFile.o fileType.o gzstream.o$/;"	m
_EXT_OBJECTS	src/utils/Contexts/Makefile	/^_EXT_OBJECTS=ParseTools.o string.o$/;"	m
_EXT_OBJECTS	src/utils/FileRecordTools/FileReaders/Makefile	/^_EXT_OBJECTS=string.o CompressionTools.o$/;"	m
_EXT_OBJECTS	src/utils/FileRecordTools/Makefile	/^_EXT_OBJECTS=SingleLineDelimTextFileReader.o BamFileReader.o Bed3Interval.o Bed6Interval.o BedPlusInterval.o Bed12Interval.o BamRecord.o \\$/;"	m
_EXT_OBJECTS	src/utils/FileRecordTools/Records/Makefile	/^_EXT_OBJECTS=ParseTools.o string.o ChromIdLookup.o$/;"	m
_EXT_OBJECTS	src/utils/KeyListOps/Makefile	/^_EXT_OBJECTS=$/;"	m
_EXT_OBJECTS	src/utils/NewChromsweep/Makefile	/^_EXT_OBJECTS=$/;"	m
_EXT_OBJECTS	src/utils/RecordOutputMgr/Makefile	/^_EXT_OBJECTS=$/;"	m
_EXT_OBJECTS	src/utils/ToolBase/Makefile	/^_EXT_OBJECTS=$/;"	m
_EXT_OBJECTS	src/utils/bedFile/Makefile	/^_EXT_OBJECTS=lineFileUtilities.o gzstream.o fileType.o$/;"	m
_EXT_OBJECTS	src/utils/bedFilePE/Makefile	/^_EXT_OBJECTS=lineFileUtilities.o fileType.o$/;"	m
_EXT_OBJECTS	src/utils/bedGraphFile/Makefile	/^_EXT_OBJECTS=lineFileUtilities.o gzstream.o fileType.o$/;"	m
_EXT_OBJECTS	src/utils/chromsweep/Makefile	/^_EXT_OBJECTS=lineFileUtilities.o fileType.o$/;"	m
_EXT_OBJECTS	src/utils/sequenceUtilities/Makefile	/^_EXT_OBJECTS =$/;"	m
_EXT_OBJECTS	src/utils/tabFile/Makefile	/^_EXT_OBJECTS=lineFileUtilities.o gzstream.o fileType.o$/;"	m
_FASTA_H	src/utils/Fasta/Fasta.h	10;"	d
_FILE_OFFSET_BITS	src/nucBed/LargeFileSupport.h	3;"	d
_FILE_OFFSET_BITS	src/utils/Fasta/LargeFileSupport.h	3;"	d
_InsertSize_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _InsertSize_t {$/;"	s
_Length_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _Length_t {$/;"	s
_MFILE_H_	src/utils/htslib/cram/mFILE.h	32;"	d
_MapQuality_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _MapQuality_t {$/;"	s
_MatePosition_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _MatePosition_t {$/;"	s
_MateRefID_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _MateRefID_t {$/;"	s
_MetaData	src/utils/BamTools/include/BamReader.hpp	/^			_MetaData(_SamFile* _file, uint32_t size) : file(_file)$/;"	f	struct:BamTools::BamReader::_MetaData
_MetaData	src/utils/BamTools/include/BamReader.hpp	/^		struct _MetaData {$/;"	s	class:BamTools::BamReader
_NumCigarOperations_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _NumCigarOperations_t {$/;"	s
_OPEN_TRACE_FILE_H_	src/utils/htslib/cram/open_trace_file.h	65;"	d
_OS_H_	src/utils/htslib/cram/os.h	76;"	d
_Open_impl	src/utils/BamTools/include/BamReader.hpp	/^		bool _Open_impl(uint32_t idx, const std::string& filename)$/;"	f	class:BamTools::BamReader
_Open_impl	src/utils/BamTools/include/BamReader.hpp	/^		bool _Open_impl(uint32_t idx, samFile* fp, const std::string& filename = "-")$/;"	f	class:BamTools::BamReader
_POOLED_ALLOC_H_	src/utils/htslib/cram/pooled_alloc.h	32;"	d
_Position_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _Position_t {$/;"	s
_QueryNameLength_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _QueryNameLength_t {$/;"	s
_QuerySequenceLength_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _QuerySequenceLength_t {$/;"	s
_RefID_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^struct _RefID_t {$/;"	s
_SAM_HDR_H_	src/utils/htslib/cram/sam_header.h	48;"	d
_STRING_ALLOC_H_	src/utils/htslib/cram/string_alloc.h	32;"	d
_SamFile	src/utils/BamTools/include/BamReader.hpp	/^			_SamFile(samFile* fp, uint32_t _idx, BamReader* reader) : $/;"	f	struct:BamTools::BamReader::_SamFile
_SamFile	src/utils/BamTools/include/BamReader.hpp	/^		struct _SamFile {$/;"	s	class:BamTools::BamReader
_SupportData	src/utils/BamTools/include/BamAlignment.hpp	/^			_SupportData(BamAlignment& parent): $/;"	f	struct:BamTools::BamAlignment::_SupportData
_SupportData	src/utils/BamTools/include/BamAlignment.hpp	/^		struct _SupportData {$/;"	s	class:BamTools::BamAlignment
_TagGetter	src/utils/BamTools/include/BamAlignment.hpp	/^			_TagGetter(const BamAlignment& parent, Left& right) : _TagGetterBase<Left>(parent, right){};$/;"	f	struct:BamTools::BamAlignment::_TagGetter
_TagGetter	src/utils/BamTools/include/BamAlignment.hpp	/^			_TagGetter(const BamAlignment& parent, Right& right) : _TagGetterBase<Right>(parent, right) {}$/;"	f	struct:BamTools::BamAlignment::_TagGetter
_TagGetter	src/utils/BamTools/include/BamAlignment.hpp	/^		struct _TagGetter : _TagGetterBase<Right>$/;"	s	class:BamTools::BamAlignment
_TagGetter	src/utils/BamTools/include/BamAlignment.hpp	/^		struct _TagGetter<Left, Left> : _TagGetterBase<Left>$/;"	s	class:BamTools::BamAlignment
_TagGetterBase	src/utils/BamTools/include/BamAlignment.hpp	/^			_TagGetterBase(const BamAlignment& parent, Destination& dest) : _dest(dest), _parent(parent) {}$/;"	f	struct:BamTools::BamAlignment::_TagGetterBase
_TagGetterBase	src/utils/BamTools/include/BamAlignment.hpp	/^		struct _TagGetterBase $/;"	s	class:BamTools::BamAlignment
__AC_KHASH_H	src/utils/htslib/htslib/khash.h	118;"	d
__BCF_SR_SORT_H__	src/utils/htslib/bcf_sr_sort.h	35;"	d
__HTSLIBPP_BAMALIGNEMNT_HPP__	src/utils/BamTools/include/BamAlignment.hpp	2;"	d
__HTSLIBPP_BAMREADER_HPP__	src/utils/BamTools/include/BamReader.hpp	2;"	d
__HTSLIBPP_BAM_WRITER_HPP__	src/utils/BamTools/include/BamWriter.hpp	2;"	d
__HTSLIBPP_SAMHEADER_H__	src/utils/BamTools/include/SamHeader.hpp	2;"	d
__KHASH_IMPL	src/utils/htslib/htslib/khash.h	211;"	d
__KHASH_PROTOTYPES	src/utils/htslib/htslib/khash.h	202;"	d
__KHASH_TYPE	src/utils/htslib/htslib/khash.h	194;"	d
__KSEQ_BASIC	src/utils/htslib/htslib/kseq.h	169;"	d
__KSEQ_READ	src/utils/htslib/htslib/kseq.h	189;"	d
__KSEQ_TYPE	src/utils/htslib/htslib/kseq.h	231;"	d
__KS_BASIC	src/utils/htslib/htslib/kseq.h	52;"	d
__KS_GETUNTIL	src/utils/htslib/htslib/kseq.h	94;"	d
__KS_INLINED	src/utils/htslib/htslib/kseq.h	67;"	d
__KS_TYPE	src/utils/htslib/htslib/kseq.h	40;"	d
__NORETURN__	src/utils/htslib/cram/misc.h	83;"	d
__NORETURN__	src/utils/htslib/cram/misc.h	85;"	d
__PRI64__	src/utils/htslib/cram/os.h	167;"	d
__PRINTF_FORMAT__	src/utils/htslib/cram/misc.h	94;"	d
__PRINTF_FORMAT__	src/utils/htslib/cram/misc.h	96;"	d
__SPLIT_H	src/utils/Fasta/split.h	2;"	d
__ac_HASH_UPPER	src/utils/htslib/htslib/khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v
__ac_Wang_hash	src/utils/htslib/htslib/khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f
__ac_X31_hash_string	src/utils/htslib/htslib/khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f
__ac_fsize	src/utils/htslib/htslib/khash.h	173;"	d
__ac_isdel	src/utils/htslib/htslib/khash.h	166;"	d
__ac_iseither	src/utils/htslib/htslib/khash.h	167;"	d
__ac_isempty	src/utils/htslib/htslib/khash.h	165;"	d
__ac_set_isboth_false	src/utils/htslib/htslib/khash.h	170;"	d
__ac_set_isdel_false	src/utils/htslib/htslib/khash.h	168;"	d
__ac_set_isdel_true	src/utils/htslib/htslib/khash.h	171;"	d
__ac_set_isempty_false	src/utils/htslib/htslib/khash.h	169;"	d
__bam_mplp_t	src/utils/htslib/sam.c	/^struct __bam_mplp_t {$/;"	s	file:
__bam_plp_t	src/utils/htslib/sam.c	/^struct __bam_plp_t {$/;"	s	file:
__bgzidx_t	src/utils/htslib/bgzf.c	/^struct __bgzidx_t$/;"	s	file:
__call__	docs/conf.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:Mock	file:
__err_connect	src/utils/htslib/knetfile.c	153;"	d	file:
__err_connect	src/utils/htslib/knetfile.c	92;"	d	file:
__getattr__	docs/conf.py	/^    def __getattr__(cls, name):$/;"	m	class:Mock	file:
__hts_idx_t	src/utils/htslib/hts.c	/^struct __hts_idx_t {$/;"	s	file:
__init__	docs/conf.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Mock
__init__	src/utils/BamTools/mapping/BamAlignment.py	/^    def __init__(self, mapstr):$/;"	m	class:ReadOnlyPropertyMapping
__init__	src/utils/BamTools/mapping/BamAlignment.py	/^    def __init__(self, mapstr):$/;"	m	class:SimplePropertyMapping
__ksplit_aux	src/utils/htslib/kstring.c	210;"	d	file:
__kstring_t	src/utils/htslib/htslib/bgzf.h	/^typedef struct __kstring_t {$/;"	s
__kstring_t	src/utils/htslib/htslib/hts.h	/^typedef struct __kstring_t {$/;"	s
__kstring_t	src/utils/htslib/htslib/kseq.h	/^typedef struct __kstring_t {$/;"	s
__kstring_t	src/utils/htslib/htslib/kstring.h	/^typedef struct __kstring_t {$/;"	s
__linkbuf_t	src/utils/htslib/sam.c	/^typedef struct __linkbuf_t {$/;"	s	file:
_aDist	src/utils/NewChromsweep/CloseSweep.h	/^	bool _aDist;$/;"	m	class:CloseSweep
_add_gb_track_line	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _add_gb_track_line;$/;"	m	class:BedGenomeCoverage
_afterVal	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	string _afterVal; \/\/to store values to be printed after record, such as column operations.$/;"	m	class:RecordOutputMgr
_allFileHaveLeadingZeroInChromNames	src/utils/Contexts/ContextBase.h	/^    testType _allFileHaveLeadingZeroInChromNames;$/;"	m	class:ContextBase
_allFilesHaveChrInChromNames	src/utils/Contexts/ContextBase.h	/^    testType _allFilesHaveChrInChromNames;$/;"	m	class:ContextBase
_allFilesOpened	src/utils/Contexts/ContextBase.h	/^	bool _allFilesOpened;$/;"	m	class:ContextBase
_allRecs	src/utils/NewChromsweep/CloseSweep.h	/^	vector<elemsType *> _allRecs;$/;"	m	class:RecDistList
_allTies	src/utils/NewChromsweep/CloseSweep.h	/^	bool _allTies;$/;"	m	class:CloseSweep
_annoFileNames	src/annotateBed/annotateBed.h	/^    vector<string> _annoFileNames;$/;"	m	class:BedAnnotate
_annoFileNames	src/tagBam/tagBam.h	/^    vector<string> _annoFileNames;$/;"	m	class:TagBam
_annoFiles	src/annotateBed/annotateBed.h	/^    vector<BedFile*> _annoFiles;$/;"	m	class:BedAnnotate
_annoFiles	src/tagBam/tagBam.h	/^    vector<BedFile*> _annoFiles;$/;"	m	class:TagBam
_annoLabels	src/tagBam/tagBam.h	/^    vector<string> _annoLabels;$/;"	m	class:TagBam
_annoTitles	src/annotateBed/annotateBed.h	/^    vector<string> _annoTitles;$/;"	m	class:BedAnnotate
_anyHit	src/utils/Contexts/ContextBase.h	/^	bool _anyHit;$/;"	m	class:ContextBase
_anyHit	src/windowBed/windowBed.h	/^    bool _anyHit;$/;"	m	class:BedWindow
_argc	src/utils/Contexts/ContextBase.h	/^	int _argc;$/;"	m	class:ContextBase
_argsProcessed	src/utils/Contexts/ContextBase.h	/^	vector<bool> _argsProcessed; \/\/used for processing cmdLine args.$/;"	m	class:ContextBase
_argv	src/utils/Contexts/ContextBase.h	/^	char **_argv;$/;"	m	class:ContextBase
_bDist	src/utils/NewChromsweep/CloseSweep.h	/^	bool _bDist;$/;"	m	class:CloseSweep
_bam	src/utils/BamTools/include/BamAlignment.hpp	/^		bam1_t _bam;$/;"	m	class:BamTools::BamAlignment
_bamAlignment	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	BamTools::BamAlignment _bamAlignment;$/;"	m	class:BamFileReader
_bamAlignment	src/utils/FileRecordTools/Records/BamRecord.h	/^	BamTools::BamAlignment _bamAlignment;$/;"	m	class:BamRecord
_bamBlockMgr	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	BlockMgr *_bamBlockMgr;$/;"	m	class:RecordOutputMgr
_bamChromId	src/utils/FileRecordTools/Records/BamRecord.h	/^	int _bamChromId; \/\/different from chromId, because BAM file may be in different order$/;"	m	class:BamRecord
_bamFile	src/bamToFastq/bamToFastq.h	/^    string _bamFile;$/;"	m	class:BamToFastq
_bamFile	src/tagBam/tagBam.h	/^    string _bamFile;$/;"	m	class:TagBam
_bamHeader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	string _bamHeader;$/;"	m	class:BamFileReader
_bamHeaderAndRefIdx	src/utils/Contexts/ContextBase.h	/^    int _bamHeaderAndRefIdx;$/;"	m	class:ContextBase
_bamInput	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _bamInput;$/;"	m	class:BedGenomeCoverage
_bamInput	src/pairToBed/pairToBed.h	/^    bool _bamInput;$/;"	m	class:BedIntersectPE
_bamInput	src/windowBed/windowBed.h	/^    bool _bamInput;$/;"	m	class:BedWindow
_bamOutput	src/pairToBed/pairToBed.h	/^    bool _bamOutput;$/;"	m	class:BedIntersectPE
_bamOutput	src/windowBed/windowBed.h	/^    bool _bamOutput;$/;"	m	class:BedWindow
_bamReader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	BamTools::BamReader *_bamReader;$/;"	m	class:BamFileReader
_bamReader	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	BamTools::BamReader *_bamReader;$/;"	m	class:InputStreamMgr
_bamReader	src/utils/FileRecordTools/FileRecordMgr.h	/^	BamTools::BamReader *_bamReader;$/;"	m	class:FileRecordMgr
_bamRuledOut	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _bamRuledOut;$/;"	m	class:InputStreamMgr
_bamWriter	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	BamTools::BamWriter *_bamWriter;$/;"	m	class:RecordOutputMgr
_bam_files	src/multiBamCov/multiBamCov.h	/^    vector<string> _bam_files;$/;"	m	class:MultiCovBam
_base	src/linksBed/linksBed.h	/^    string _base;$/;"	m	class:BedLinks
_bcf1_sync_alleles	src/utils/htslib/vcf.c	/^static inline int _bcf1_sync_alleles(const bcf_hdr_t *hdr, bcf1_t *line, int nals)$/;"	f	file:
_bcf_hrec_format	src/utils/htslib/vcf.c	/^static void _bcf_hrec_format(const bcf_hrec_t *hrec, int is_bcf, kstring_t *str)$/;"	f	file:
_bcf_sr_regions_t	src/utils/htslib/htslib/synced_bcf_reader.h	/^typedef struct _bcf_sr_regions_t$/;"	s
_bcf_sweep_t	src/utils/htslib/vcf_sweep.c	/^struct _bcf_sweep_t$/;"	s	file:
_bed	src/annotateBed/annotateBed.h	/^    BedFile *_bed;$/;"	m	class:BedAnnotate
_bed	src/clusterBed/clusterBed.h	/^    BedFile *_bed;    $/;"	m	class:BedCluster
_bed	src/fastaFromBed/fastaFromBed.h	/^    BedFile  *_bed;$/;"	m	class:Bed2Fa
_bed	src/flankBed/flankBed.h	/^    BedFile *_bed;$/;"	m	class:BedFlank
_bed	src/genomeCoverageBed/genomeCoverageBed.h	/^    BedFile *_bed;$/;"	m	class:BedGenomeCoverage
_bed	src/linksBed/linksBed.h	/^    BedFile *_bed;$/;"	m	class:BedLinks
_bed	src/maskFastaFromBed/maskFastaFromBed.h	/^    BedFile *_bed;$/;"	m	class:MaskFastaFromBed
_bed	src/multiBamCov/multiBamCov.h	/^	BedFile *_bed;$/;"	m	class:MultiCovBam
_bed	src/nucBed/nucBed.h	/^    BedFile  *_bed;$/;"	m	class:NucBed
_bed	src/shiftBed/shiftBed.h	/^    BedFile *_bed;$/;"	m	class:BedShift
_bed	src/shuffleBed/shuffleBed.h	/^    BedFile *_bed;$/;"	m	class:BedShuffle
_bed	src/slopBed/slopBed.h	/^    BedFile *_bed;$/;"	m	class:BedSlop
_bed	src/sortBed/sortBed.h	/^    BedFile *_bed;$/;"	m	class:BedSort
_bedA	src/pairToBed/pairToBed.h	/^    BedFilePE *_bedA;$/;"	m	class:BedIntersectPE
_bedA	src/pairToPair/pairToPair.h	/^    BedFilePE *_bedA;$/;"	m	class:PairToPair
_bedA	src/reldist/reldist.h	/^    BedFile *_bedA, *_bedB;$/;"	m	class:RelativeDistance
_bedA	src/windowBed/windowBed.h	/^    BedFile *_bedA, *_bedB;$/;"	m	class:BedWindow
_bedAFile	src/reldist/reldist.h	/^    string _bedAFile;$/;"	m	class:RelativeDistance
_bedAFile	src/windowBed/windowBed.h	/^    string _bedAFile;$/;"	m	class:BedWindow
_bedAFilePE	src/pairToBed/pairToBed.h	/^    string _bedAFilePE;$/;"	m	class:BedIntersectPE
_bedAFilePE	src/pairToPair/pairToPair.h	/^    string _bedAFilePE;$/;"	m	class:PairToPair
_bedB	src/pairToBed/pairToBed.h	/^    BedFile *_bedB;$/;"	m	class:BedIntersectPE
_bedB	src/pairToPair/pairToPair.h	/^    BedFilePE *_bedB;$/;"	m	class:PairToPair
_bedB	src/reldist/reldist.h	/^    BedFile *_bedA, *_bedB;$/;"	m	class:RelativeDistance
_bedB	src/windowBed/windowBed.h	/^    BedFile *_bedA, *_bedB;$/;"	m	class:BedWindow
_bedBFile	src/pairToBed/pairToBed.h	/^    string _bedBFile;$/;"	m	class:BedIntersectPE
_bedBFile	src/reldist/reldist.h	/^    string _bedBFile;$/;"	m	class:RelativeDistance
_bedBFile	src/windowBed/windowBed.h	/^    string _bedBFile;$/;"	m	class:BedWindow
_bedBFilePE	src/pairToPair/pairToPair.h	/^    string _bedBFilePE;$/;"	m	class:PairToPair
_bedFields	src/utils/bedFile/bedFile.h	/^    vector<string> _bedFields;$/;"	m	class:BedFile
_bedFile	src/clusterBed/clusterBed.h	/^    string _bedFile;$/;"	m	class:BedCluster
_bedFile	src/fastaFromBed/fastaFromBed.h	/^    string _bedFile;$/;"	m	class:Bed2Fa
_bedFile	src/flankBed/flankBed.h	/^    string _bedFile;$/;"	m	class:BedFlank
_bedFile	src/genomeCoverageBed/genomeCoverageBed.h	/^    string _bedFile;$/;"	m	class:BedGenomeCoverage
_bedFile	src/linksBed/linksBed.h	/^    string _bedFile;$/;"	m	class:BedLinks
_bedFile	src/maskFastaFromBed/maskFastaFromBed.h	/^    string _bedFile;$/;"	m	class:MaskFastaFromBed
_bedFile	src/nucBed/nucBed.h	/^    string _bedFile;$/;"	m	class:NucBed
_bedFile	src/shiftBed/shiftBed.h	/^    string _bedFile;$/;"	m	class:BedShift
_bedFile	src/shuffleBed/shuffleBed.h	/^    string _bedFile;$/;"	m	class:BedShuffle
_bedFile	src/slopBed/slopBed.h	/^    string _bedFile;$/;"	m	class:BedSlop
_bedFile	src/sortBed/sortBed.h	/^    string _bedFile;$/;"	m	class:BedSort
_bedGraph	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _bedGraph;$/;"	m	class:BedGenomeCoverage
_bedGraphAll	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _bedGraphAll;$/;"	m	class:BedGenomeCoverage
_bedGraphStream	src/utils/bedGraphFile/bedGraphFile.h	/^    istream *_bedGraphStream;$/;"	m	class:BedGraphFile
_bedLine	src/utils/bedFile/bedFile.h	/^    string _bedLine;$/;"	m	class:BedFile
_bedOpsCmd	src/regressTest/RegressTest.cpp	/^const string RegressTest::_bedOpsCmd = "\/home\/nek3d\/testWorkspace\/bedops\/bin\/bedops --intersect ";$/;"	m	class:RegressTest	file:
_bedOpsCmd	src/regressTest/RegressTest.h	/^	static const string _bedOpsCmd;$/;"	m	class:RegressTest
_bedStream	src/utils/bedFile/bedFile.h	/^    istream   *_bedStream;$/;"	m	class:BedFile
_bedStream	src/utils/bedFilePE/bedFilePE.h	/^    istream *_bedStream;$/;"	m	class:BedFilePE
_bed_file	src/multiBamCov/multiBamCov.h	/^    string _bed_file;$/;"	m	class:MultiCovBam
_bedpe	src/shuffleBed/shuffleBed.h	/^    BedFilePE *_bedpe;$/;"	m	class:BedShuffle
_begin	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *_begin;$/;"	m	class:RecordList
_begin	src/utils/general/BTlist.h	/^	BTlistNode<T> *_begin;$/;"	m	class:BTlist
_bgStream	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	BGZF* _bgStream;$/;"	m	class:InputStreamMgr
_binFirstShift	src/utils/BinTree/BinTree.h	/^	static const binNumType _binFirstShift = 14;       \/* How much to shift to get to finest bin. *\/$/;"	m	class:BinTree
_binFirstShift	src/utils/bedFile/bedFile.h	/^const USHORT _binFirstShift = 14;       \/* How much to shift to get to finest bin. *\/$/;"	v
_binLevels	src/utils/bedFile/bedFile.h	/^const BINLEVEL _binLevels = 7;$/;"	v
_binNextShift	src/utils/BinTree/BinTree.h	/^	static const binNumType _binNextShift  = 3;        \/* How much to shift to get to next larger bin. *\/$/;"	m	class:BinTree
_binNextShift	src/utils/bedFile/bedFile.h	/^const USHORT _binNextShift  = 3;        \/* How much to shift to get to next larger bin. *\/$/;"	v
_binOffsetsExtended	src/utils/BinTree/BinTree.h	/^	binNumType *_binOffsetsExtended;$/;"	m	class:BinTree
_binOffsetsExtended	src/utils/bedFile/bedFile.h	/^const BIN _binOffsetsExtended[] = {32678+4096+512+64+8+1, 4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};$/;"	v
_binTree	src/intersectFile/intersectFile.h	/^	BinTree *_binTree;$/;"	m	class:IntersectFile
_binsHit	src/utils/BinTree/BinTree.h	/^	map<binNumType, int> _binsHit;$/;"	m	class:BinTree
_blockCount	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	int _blockCount;$/;"	m	class:Bed12Interval
_blockCountStr	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _blockCountStr;$/;"	m	class:Bed12Interval
_blockMgr	src/utils/FileRecordTools/FileRecordMgr.h	/^	BlockMgr *_blockMgr;$/;"	m	class:FileRecordMgr
_blockRecordsMgr	src/utils/FileRecordTools/Records/BlockMgr.h	/^	RecordMgr *_blockRecordsMgr;$/;"	m	class:BlockMgr
_blockRecordsType	src/utils/FileRecordTools/Records/BlockMgr.h	/^	const static FileRecordTypeChecker::RECORD_TYPE _blockRecordsType = FileRecordTypeChecker::BED6_RECORD_TYPE;$/;"	m	class:BlockMgr
_blockSize	src/utils/general/FreeList.h	/^	int _blockSize;$/;"	m	class:FreeList
_blockSizeTokens	src/utils/FileRecordTools/Records/BlockMgr.h	/^	Tokenizer _blockSizeTokens;$/;"	m	class:BlockMgr
_blockSizes	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _blockSizes;$/;"	m	class:Bed12Interval
_blockStartTokens	src/utils/FileRecordTools/Records/BlockMgr.h	/^	Tokenizer _blockStartTokens;$/;"	m	class:BlockMgr
_blockStarts	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _blockStarts;$/;"	m	class:Bed12Interval
_breakOnDeletionOps	src/utils/FileRecordTools/Records/BlockMgr.h	/^	bool _breakOnDeletionOps;$/;"	m	class:BlockMgr
_breakOnSkipOps	src/utils/FileRecordTools/Records/BlockMgr.h	/^	bool _breakOnSkipOps;$/;"	m	class:BlockMgr
_bufStreamMgr	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	BufferedStreamMgr *_bufStreamMgr;$/;"	m	class:FileReader
_bufStreamMgr	src/utils/FileRecordTools/FileRecordMgr.h	/^	BufferedStreamMgr *_bufStreamMgr;$/;"	m	class:FileRecordMgr
_buffer	src/utils/general/FreeList.h	/^	deque<T *> _buffer;$/;"	m	class:FreeList
_buffer	src/utils/general/PushBackStreamBuf.h	/^	BTlist<int> _buffer;$/;"	m	class:PushBackStreamBuf
_buffer	src/utils/general/QuickString.h	/^	char *_buffer;$/;"	m	class:string
_cache	src/utils/chromsweep/chromsweep.h	/^    list<BED> _cache;$/;"	m	class:ChromSweep
_caches	src/utils/NewChromsweep/NewChromsweep.h	/^    vector <recListType>_caches;$/;"	m	class:NewChromSweep
_callback_close	src/utils/htslib/test/hfile.c	/^int _callback_close(void* cb_data)$/;"	f
_callback_read	src/utils/htslib/test/hfile.c	/^ssize_t _callback_read(void* cb_data, void* buf, size_t sz)$/;"	f
_callback_seek	src/utils/htslib/test/hfile.c	/^off_t _callback_seek(void* cb_data, off_t ofs, int whence)$/;"	f
_callback_write	src/utils/htslib/test/hfile.c	/^ssize_t _callback_write(void* cb_data, const void* buf, size_t sz)$/;"	f
_chooseChrom	src/shuffleBed/shuffleBed.h	/^    bool _chooseChrom;$/;"	m	class:BedShuffle
_chrId	src/utils/FileRecordTools/Records/Record.h	/^	int _chrId;$/;"	m	class:Record
_chrName	src/utils/FileRecordTools/Records/Record.h	/^	string _chrName;$/;"	m	class:Record
_chromCov	src/genomeCoverageBed/genomeCoverageBed.h	/^    chromDepthMap _chromCov;$/;"	m	class:BedGenomeCoverage
_chromList	src/complementFile/complementFile.h	/^	const vector<string> &_chromList;$/;"	m	class:ComplementFile
_chromList	src/utils/GenomeFile/GenomeFile.h	/^    vector<string> _chromList;$/;"	m	class:GenomeFile
_chromList	src/utils/GenomeFile/NewGenomeFile.h	/^    vector<string> _chromList;$/;"	m	class:NewGenomeFile
_chromSizeIds	src/utils/GenomeFile/NewGenomeFile.h	/^    lookupType _chromSizeIds;$/;"	m	class:NewGenomeFile
_chromSizes	src/utils/GenomeFile/GenomeFile.h	/^    chromToSizes _chromSizes;$/;"	m	class:GenomeFile
_chroms	src/shuffleBed/shuffleBed.h	/^    vector<string> _chroms;$/;"	m	class:BedShuffle
_cigarStr	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _cigarStr; \/\/stored for fast retrieval in column ops$/;"	m	class:BamRecord
_cln	src/utils/htslib/sam.c	1867;"	d	file:
_cmd	src/utils/htslib/test/test-bcf-sr.pl	/^sub _cmd$/;"	s
_cmd	src/utils/htslib/test/test.pl	/^sub _cmd$/;"	s
_colOps	src/utils/KeyListOps/KeyListOps.h	/^    colOpsType _colOps;$/;"	m	class:KeyListOps
_column	src/utils/KeyListOps/KeyListOpsMethods.h	/^	int _column;$/;"	m	class:KeyListOpsMethods
_columns	src/utils/KeyListOps/KeyListOps.h	/^    string _columns;$/;"	m	class:KeyListOps
_configFile	src/regressTest/RegressTest.h	/^	ifstream _configFile;$/;"	m	class:RegressTest
_configFilename	src/regressTest/RegressTest.h	/^	string _configFilename;$/;"	m	class:RegressTest
_context	src/utils/BinTree/BinTree.h	/^	ContextIntersect *_context;$/;"	m	class:BinTree
_context	src/utils/NewChromsweep/CloseSweep.h	/^   ContextClosest *_context;$/;"	m	class:CloseSweep
_context	src/utils/NewChromsweep/NewChromsweep.h	/^    ContextIntersect *_context;$/;"	m	class:NewChromSweep
_context	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	ContextBase *_context;$/;"	m	class:RecordOutputMgr
_context	src/utils/ToolBase/ToolBase.h	/^	ContextBase *_context;$/;"	m	class:ToolBase
_cop	src/utils/htslib/sam.c	1866;"	d	file:
_copyDists	src/utils/NewChromsweep/CloseSweep.h	/^	vector<int> _copyDists;$/;"	m	class:CloseSweep
_copyRetList	src/utils/NewChromsweep/CloseSweep.h	/^	RecordKeyVector _copyRetList;$/;"	m	class:CloseSweep
_correctCmd	src/regressTest/RegressTest.cpp	/^const string RegressTest::_correctCmd = "CORRECT";$/;"	m	class:RegressTest	file:
_correctCmd	src/regressTest/RegressTest.h	/^	static const string _correctCmd;$/;"	m	class:RegressTest
_correctFiles	src/regressTest/RegressTest.h	/^	fileListType *_correctFiles; \/\/list of files for correctness tests. First in pair is file name, second is description.$/;"	m	class:RegressTest
_count	src/utils/Contexts/ContextCoverage.h	/^    bool _count;$/;"	m	class:ContextCoverage
_count	src/windowMaker/windowMaker.h	/^    uint32_t _count;$/;"	m	class:WindowMaker
_coverageType	src/utils/Contexts/ContextCoverage.h	/^    coverageType _coverageType;$/;"	m	class:ContextCoverage
_cumLen	src/shuffleBed/shuffleBed.h	/^    long double _cumLen;$/;"	m	class:BedShuffle
_currBamBlockList	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	RecordKeyVector *_currBamBlockList;$/;"	m	class:RecordOutputMgr
_currCapacity	src/utils/general/QuickString.h	/^	size_t _currCapacity;$/;"	m	class:string
_currChrom	src/complementFile/complementFile.h	/^	string _currChrom;$/;"	m	class:ComplementFile
_currChromCoverage	src/genomeCoverageBed/genomeCoverageBed.h	/^    vector<DEPTH> _currChromCoverage;$/;"	m	class:BedGenomeCoverage
_currChromDepthHist	src/genomeCoverageBed/genomeCoverageBed.h	/^    chromHistMap _currChromDepthHist;$/;"	m	class:BedGenomeCoverage
_currChromId	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	int _currChromId;$/;"	m	class:FileReader
_currChromId	src/utils/GenomeFile/NewGenomeFile.h	/^    int _currChromId;$/;"	m	class:NewGenomeFile
_currChromName	src/genomeCoverageBed/genomeCoverageBed.h	/^    string _currChromName ;$/;"	m	class:BedGenomeCoverage
_currChromName	src/utils/GenomeFile/NewGenomeFile.h	/^    string _currChromName;$/;"	m	class:NewGenomeFile
_currChromSize	src/genomeCoverageBed/genomeCoverageBed.h	/^    int _currChromSize ;$/;"	m	class:BedGenomeCoverage
_currChromSize	src/utils/GenomeFile/NewGenomeFile.h	/^    CHRPOS _currChromSize;$/;"	m	class:NewGenomeFile
_currChromStr	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	string _currChromStr;$/;"	m	class:SingleLineDelimTextFileReader
_currDataPos	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	int _currDataPos;$/;"	m	class:SingleLineDelimTextFileReader
_currDbRecs	src/utils/NewChromsweep/NewChromsweep.h	/^    vector<Record *> _currDbRecs;$/;"	m	class:NewChromSweep
_currDepthMap	src/coverageFile/coverageFile.h	/^	depthMapType _currDepthMap;$/;"	m	class:CoverageFile
_currEnd	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *_currEnd;$/;"	m	class:RecordList
_currEnd	src/utils/general/BTlist.h	/^	BTlistNode<T> *_currEnd;$/;"	m	class:BTlist
_currNumIdxs	src/utils/NewChromsweep/CloseSweep.h	/^	int _currNumIdxs;$/;"	m	class:RecDistList
_currPidOfMemoryLogging	src/regressTest/RegressTest.h	/^	string _currPidOfMemoryLogging;$/;"	m	class:RegressTest
_currPos	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    int _currPos;$/;"	m	class:RecordKeyVector
_currPosInGenomeList	src/complementFile/complementFile.h	/^	int _currPosInGenomeList;$/;"	m	class:ComplementFile
_currQueryChromName	src/utils/NewChromsweep/NewChromsweep.h	/^    string _currQueryChromName;$/;"	m	class:NewChromSweep
_currQueryRec	src/utils/NewChromsweep/NewChromsweep.h	/^    Record * _currQueryRec;$/;"	m	class:NewChromSweep
_currRec	src/spacingFile/spacingFile.h	/^    Record *_currRec;$/;"	m	class:SpacingFile
_currRecordNum	src/sampleFile/sampleFile.h	/^	size_t _currRecordNum;$/;"	m	class:SampleFile
_currScanBuffer	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	string _currScanBuffer;$/;"	m	class:BufferedStreamMgr
_currSize	src/utils/general/QuickString.h	/^	size_t _currSize;$/;"	m	class:string
_currStartPos	src/complementFile/complementFile.h	/^	int _currStartPos;$/;"	m	class:ComplementFile
_curr_chrom	src/utils/chromsweep/chromsweep.h	/^    string _curr_chrom;$/;"	m	class:ChromSweep
_curr_db	src/utils/chromsweep/chromsweep.h	/^    BED _curr_qy, _curr_db;$/;"	m	class:ChromSweep
_curr_qy	src/utils/chromsweep/chromsweep.h	/^    BED _curr_qy, _curr_db;$/;"	m	class:ChromSweep
_currentOutBufSize	src/utils/general/InflateStreamBuf.h	/^	int _currentOutBufSize;$/;"	m	class:InflateStreamBuf
_dUTP	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _dUTP;$/;"	m	class:BedGenomeCoverage
_databaseRecordsTotalLength	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long _databaseRecordsTotalLength;$/;"	m	class:NewChromSweep
_databaseTotalRecords	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long _databaseTotalRecords;$/;"	m	class:NewChromSweep
_db	src/linksBed/linksBed.h	/^    string _db;$/;"	m	class:BedLinks
_db	src/utils/chromsweep/chromsweep.h	/^    BedFile *_query, *_db;$/;"	m	class:ChromSweep
_dbCounts	src/fisher/fisher.h	/^    unsigned long _dbCounts;$/;"	m	class:Fisher
_dbFRMs	src/utils/NewChromsweep/NewChromsweep.h	/^    vector<FileRecordMgr *> _dbFRMs;$/;"	m	class:NewChromSweep
_dbFile	src/fastaFromBed/fastaFromBed.h	/^    string _dbFile;$/;"	m	class:Bed2Fa
_dbFile	src/nucBed/nucBed.h	/^    string _dbFile;$/;"	m	class:NucBed
_dbFileIdxs	src/utils/Contexts/ContextBase.h	/^    vector<int> _dbFileIdxs;$/;"	m	class:ContextBase
_dbFileRecordsLength	src/utils/NewChromsweep/NewChromsweep.h	/^    vector<unsigned long> _dbFileRecordsLength; \/\/each value in this vector have the$/;"	m	class:NewChromSweep
_dbFileType	src/utils/KeyListOps/KeyListOps.h	/^    FileRecordTypeChecker::FILE_TYPE _dbFileType;$/;"	m	class:KeyListOps
_dbForward	src/utils/NewChromsweep/CloseSweep.h	/^	bool _dbForward;$/;"	m	class:CloseSweep
_dbNameTags	src/utils/Contexts/ContextBase.h	/^    vector<string> _dbNameTags;$/;"	m	class:ContextBase
_dbReverse	src/utils/NewChromsweep/CloseSweep.h	/^	bool _dbReverse;$/;"	m	class:CloseSweep
_dbUnion	src/jaccard/jaccard.h	/^	unsigned long _dbUnion;$/;"	m	class:Jaccard
_db_midpoints	src/reldist/reldist.h	/^    map<string, vector<CHRPOS> > _db_midpoints;$/;"	m	class:RelativeDistance
_defaultHeader	src/utils/Contexts/ContextGroupBy.h	/^	string _defaultHeader;$/;"	m	class:ContextGroupBy
_default_group_order	src/utils/BamTools/include/SamHeader.hpp	/^	static const std::string _default_group_order = "unknown";$/;"	m	namespace:BamTools
_defualt_version	src/utils/BamTools/include/SamHeader.hpp	/^	static const std::string _defualt_version = "1.4";$/;"	m	namespace:BamTools
_defulat_sort_order	src/utils/BamTools/include/SamHeader.hpp	/^	static const std::string _defulat_sort_order = "coordinate";$/;"	m	namespace:BamTools
_deleteTmpBlocks	src/subtractFile/subtractFile.h	/^	bool _deleteTmpBlocks;$/;"	m	class:SubtractFile
_delimChar	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	char _delimChar;$/;"	m	class:SingleLineDelimTextFileReader
_delimChar	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^	char _delimChar;$/;"	m	class:SingleLineDelimTransferBuffer
_delimChar	src/utils/fileType/FileRecordTypeChecker.h	/^	char _delimChar;$/;"	m	class:FileRecordTypeChecker
_delimPositions	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	int *_delimPositions;$/;"	m	class:SingleLineDelimTextFileReader
_delimStr	src/utils/KeyListOps/KeyListOpsMethods.h	/^	string _delimStr;$/;"	m	class:KeyListOpsMethods
_delimStr	src/utils/VectorOps/VectorOps.h	/^    string _delimStr;$/;"	m	class:VectorOps
_depthArray	src/coverageFile/coverageFile.h	/^	size_t *_depthArray;$/;"	m	class:CoverageFile
_depthArrayCapacity	src/coverageFile/coverageFile.h	/^	size_t _depthArrayCapacity;$/;"	m	class:CoverageFile
_desiredStrand	src/utils/Contexts/ContextBase.h	/^	FileRecordMergeMgr::WANTED_STRAND_TYPE _desiredStrand;$/;"	m	class:ContextBase
_desiredStrand	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	WANTED_STRAND_TYPE _desiredStrand;$/;"	m	class:FileRecordMergeMgr
_dest	src/utils/BamTools/include/BamAlignment.hpp	/^			Destination& _dest;$/;"	m	struct:BamTools::BamAlignment::_TagGetterBase
_devNull	src/regressTest/RegressTest.cpp	/^const string RegressTest::_devNull = " \/dev\/null ";$/;"	m	class:RegressTest	file:
_devNull	src/regressTest/RegressTest.h	/^	static const string _devNull;$/;"	m	class:RegressTest
_diffNames	src/utils/Contexts/ContextClosest.h	/^    bool _diffNames;$/;"	m	class:ContextClosest
_diffStrand	src/annotateBed/annotateBed.h	/^    bool _diffStrand;$/;"	m	class:BedAnnotate
_diffStrand	src/multiBamCov/multiBamCov.h	/^    bool _diffStrand;$/;"	m	class:MultiCovBam
_diffStrand	src/pairToBed/pairToBed.h	/^    bool _diffStrand;$/;"	m	class:BedIntersectPE
_diffStrand	src/tagBam/tagBam.h	/^    bool _diffStrand;$/;"	m	class:TagBam
_diffStrand	src/utils/Contexts/ContextBase.h	/^    bool _diffStrand;$/;"	m	class:ContextBase
_diffStrand	src/utils/NewChromsweep/CloseSweep.h	/^	bool _diffStrand;$/;"	m	class:CloseSweep
_diffStrand	src/utils/chromsweep/chromsweep.h	/^    bool _diffStrand;$/;"	m	class:ChromSweep
_dist	src/utils/NewChromsweep/CloseSweep.h	/^	int _dist;$/;"	m	class:distanceTuple
_distIndex	src/utils/NewChromsweep/CloseSweep.h	/^	indexType * _distIndex;$/;"	m	class:RecDistList
_distance	src/spacingFile/spacingFile.h	/^    string _distance;$/;"	m	class:SpacingFile
_dontDelete	src/utils/FileRecordTools/Records/RecordList.h	/^	bool _dontDelete; \/\/this will usally be false, but set to true when$/;"	m	class:RecordList
_dontDelete	src/utils/general/BTlist.h	/^	bool _dontDelete; \/\/this will usally be false, but set to true when$/;"	m	class:BTlist
_dontReport	src/subtractFile/subtractFile.h	/^	bool _dontReport;$/;"	m	class:SubtractFile
_dorand48	src/utils/htslib/win/rand.c	/^_dorand48(unsigned short xseed[3])$/;"	f	file:
_eachBase	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _eachBase;$/;"	m	class:BedGenomeCoverage
_eachBaseZeroBased	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _eachBaseZeroBased;$/;"	m	class:BedGenomeCoverage
_eitherFraction	src/utils/Contexts/ContextBase.h	/^    bool _eitherFraction;$/;"	m	class:ContextBase
_elems	src/utils/general/Tokenizer.h	/^	vector<string> _elems;$/;"	m	class:Tokenizer
_empty	src/utils/NewChromsweep/CloseSweep.h	/^	bool _empty;$/;"	m	class:RecDistList
_end1	src/bamToFastq/bamToFastq.h	/^    BamAlignment _end1;$/;"	m	class:BamToFastq
_end2	src/bamToFastq/bamToFastq.h	/^    BamAlignment _end2;$/;"	m	class:BamToFastq
_endPos	src/utils/FileRecordTools/Records/Record.h	/^	int _endPos;$/;"	m	class:Record
_endPosStr	src/utils/FileRecordTools/Records/Record.h	/^	string _endPosStr;$/;"	m	class:Record
_eof	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	bool _eof;$/;"	m	class:BamFileReader
_eof	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	bool _eof;$/;"	m	class:BufferedStreamMgr
_eofHit	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _eofHit;$/;"	m	class:InputStreamMgr
_eofHit	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _eofHit;$/;"	m	class:FileRecordTypeChecker
_errMsg	src/utils/KeyListOps/KeyListOpsMethods.h	/^	string _errMsg;$/;"	m	class:KeyListOpsMethods
_errorMsg	src/utils/Contexts/ContextBase.h	/^	string _errorMsg;$/;"	m	class:ContextBase
_error_str	src/utils/BamTools/include/BamReader.hpp	/^		std::string _error_str;$/;"	m	class:BamTools::BamReader
_errors	src/utils/driver/BedtoolsDriver.h	/^	string _errors;$/;"	m	class:BedtoolsDriver
_exclude	src/shuffleBed/shuffleBed.h	/^    BedFile *_exclude;$/;"	m	class:BedShuffle
_excludeFile	src/fisher/fisher.h	/^    BedFile *_excludeFile;$/;"	m	class:Fisher
_excludeFile	src/shuffleBed/shuffleBed.h	/^    string _excludeFile;$/;"	m	class:BedShuffle
_excludeFile	src/utils/Contexts/ContextFisher.h	/^	string _excludeFile;$/;"	m	class:ContextFisher
_explicitBedOutput	src/utils/Contexts/ContextBase.h	/^    bool _explicitBedOutput;$/;"	m	class:ContextBase
_faOut	src/fastaFromBed/fastaFromBed.h	/^    ostream *_faOut;$/;"	m	class:Bed2Fa
_faidxFile	src/sortBed/sortBed.h	/^    string _faidxFile;\/* genome index, generated by samtools faidx 1st col is chromosome *\/$/;"	m	class:BedSort
_fastaInFile	src/maskFastaFromBed/maskFastaFromBed.h	/^    string _fastaInFile;$/;"	m	class:MaskFastaFromBed
_fastaOutFile	src/fastaFromBed/fastaFromBed.h	/^    string _fastaOutFile;$/;"	m	class:Bed2Fa
_fastaOutFile	src/maskFastaFromBed/maskFastaFromBed.h	/^    string _fastaOutFile;$/;"	m	class:MaskFastaFromBed
_fastq1	src/bamToFastq/bamToFastq.h	/^    string _fastq1, _fastq2;    \/\/ the names of the fastq output files$/;"	m	class:BamToFastq
_fastq2	src/bamToFastq/bamToFastq.h	/^    string _fastq1, _fastq2;    \/\/ the names of the fastq output files$/;"	m	class:BamToFastq
_fields	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^	char **_fields;$/;"	m	class:SingleLineDelimTransferBuffer
_fields	src/utils/FileRecordTools/Records/PlusFields.h	/^	vector<string> _fields;$/;"	m	class:PlusFields
_fileHasChrInChromNames	src/utils/Contexts/ContextBase.h	/^	conventionType _fileHasChrInChromNames;$/;"	m	class:ContextBase
_fileHasLeadingZeroInChromNames	src/utils/Contexts/ContextBase.h	/^	conventionType _fileHasLeadingZeroInChromNames;$/;"	m	class:ContextBase
_fileIdsToDbIdxs	src/utils/Contexts/ContextBase.h	/^    map<int, int> _fileIdsToDbIdxs;$/;"	m	class:ContextBase
_fileIdx	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	int _fileIdx;$/;"	m	class:FileReader
_fileIdx	src/utils/FileRecordTools/FileRecordMgr.h	/^	int _fileIdx;$/;"	m	class:FileRecordMgr
_fileIdx	src/utils/FileRecordTools/Records/Record.h	/^	int _fileIdx; \/\/associated file the record came from$/;"	m	class:Record
_fileNames	src/utils/Contexts/ContextBase.h	/^	vector<string> _fileNames;$/;"	m	class:ContextBase
_filePrecessorOptions	src/regressTest/RegressTest.h	/^	vector<string> _filePrecessorOptions;$/;"	m	class:RegressTest
_filePrevChrom	src/utils/NewChromsweep/NewChromsweep.h	/^    map<int, string> _filePrevChrom;$/;"	m	class:NewChromSweep
_fileReader	src/utils/FileRecordTools/FileRecordMgr.h	/^	FileReader *_fileReader;$/;"	m	class:FileRecordMgr
_fileTracks	src/utils/NewChromsweep/NewChromsweep.h	/^    vector<_orderTrackType *> _fileTracks;$/;"	m	class:NewChromSweep
_fileType	src/utils/FileRecordTools/FileRecordMgr.h	/^	FileRecordTypeChecker::FILE_TYPE _fileType;$/;"	m	class:FileRecordMgr
_fileType	src/utils/bedFile/bedFile.h	/^    FileType   _fileType;     \/\/ what is the file type? (BED? GFF? VCF?)$/;"	m	class:BedFile
_fileType	src/utils/fileType/FileRecordTypeChecker.h	/^	FILE_TYPE _fileType;$/;"	m	class:FileRecordTypeChecker
_fileTypeNames	src/utils/fileType/FileRecordTypeChecker.h	/^	map<FILE_TYPE, string> _fileTypeNames;$/;"	m	class:FileRecordTypeChecker
_filename	src/utils/BamTools/include/SamHeader.hpp	/^		std::string _filename;$/;"	m	class:BamTools::SamHeader
_filename	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	string _filename;$/;"	m	class:BufferedStreamMgr
_filename	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	string _filename;$/;"	m	class:FileReader
_filename	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	string _filename;$/;"	m	class:InputStreamMgr
_filename	src/utils/FileRecordTools/FileRecordMgr.h	/^	string _filename;$/;"	m	class:FileRecordMgr
_filename	src/utils/fileType/FileRecordTypeChecker.h	/^	string _filename; \/\/useful for reporting errors with file.$/;"	m	class:FileRecordTypeChecker
_files	src/utils/BamTools/include/BamReader.hpp	/^		std::vector<_SamFile*> _files;$/;"	m	class:BamTools::BamReader
_files	src/utils/Contexts/ContextBase.h	/^	vector<FileRecordMgr *> _files;$/;"	m	class:ContextBase
_filesPerRun	src/regressTest/RegressTest.h	/^	int _filesPerRun;$/;"	m	class:RegressTest
_filterByStrand	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _filterByStrand;$/;"	m	class:BedGenomeCoverage
_finalDepthMap	src/coverageFile/coverageFile.h	/^	depthMapType _finalDepthMap;$/;"	m	class:CoverageFile
_finalDistances	src/utils/NewChromsweep/CloseSweep.h	/^	vector<int> _finalDistances;$/;"	m	class:CloseSweep
_finalInputStream	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	istream * _finalInputStream;$/;"	m	class:InputStreamMgr
_finalOutput	src/coverageFile/coverageFile.h	/^	string _finalOutput;$/;"	m	class:CoverageFile
_firstLine	src/utils/bedFile/bedFile.h	/^    bool _firstLine;$/;"	m	class:BedFile
_firstTie	src/utils/NewChromsweep/CloseSweep.h	/^	bool _firstTie;$/;"	m	class:CloseSweep
_firstValidDataLineIdx	src/utils/fileType/FileRecordTypeChecker.h	/^	int _firstValidDataLineIdx;$/;"	m	class:FileRecordTypeChecker
_floatValBuf	src/coverageFile/coverageFile.h	/^	char *_floatValBuf;$/;"	m	class:CoverageFile
_forceDownstream	src/utils/Contexts/ContextClosest.h	/^    bool _forceDownstream;$/;"	m	class:ContextClosest
_forceStrand	src/clusterBed/clusterBed.h	/^    bool   _forceStrand;$/;"	m	class:BedCluster
_forceStrand	src/flankBed/flankBed.h	/^    bool   _forceStrand;$/;"	m	class:BedFlank
_forceStrand	src/nucBed/nucBed.h	/^    bool _forceStrand;$/;"	m	class:NucBed
_forceStrand	src/slopBed/slopBed.h	/^    bool   _forceStrand;$/;"	m	class:BedSlop
_forceUpstream	src/utils/Contexts/ContextClosest.h	/^    bool _forceUpstream;$/;"	m	class:ContextClosest
_formatStr	src/utils/KeyListOps/KeyListOps.h	/^    string _formatStr;$/;"	m	class:KeyListOps
_forwardOnly	src/utils/Contexts/ContextBase.h	/^	bool _forwardOnly;$/;"	m	class:ContextBase
_foundChroms	src/utils/FileRecordTools/FileRecordMgr.h	/^        std::set<string> _foundChroms;$/;"	m	class:FileRecordMgr
_fourthFieldNumeric	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _fourthFieldNumeric; \/\/this is just to distinguish between Bed4 and BedGraph files.$/;"	m	class:FileRecordTypeChecker
_fp	src/utils/BamTools/include/BamWriter.hpp	/^		samFile* _fp;$/;"	m	class:BamTools::BamWriter
_fpReportFile	src/regressTest/RegressTest.h	/^	FILE *_fpReportFile;$/;"	m	class:RegressTest
_fractional	src/flankBed/flankBed.h	/^    bool   _fractional;$/;"	m	class:BedFlank
_fractional	src/shiftBed/shiftBed.h	/^    bool   _fractional;$/;"	m	class:BedShift
_fractional	src/slopBed/slopBed.h	/^    bool   _fractional;$/;"	m	class:BedSlop
_fractionalSubtract	src/utils/Contexts/ContextSubtract.h	/^    float _fractionalSubtract;$/;"	m	class:ContextSubtract
_fragmentSize	src/genomeCoverageBed/genomeCoverageBed.h	/^    int _fragmentSize;$/;"	m	class:BedGenomeCoverage
_frame	src/utils/FileRecordTools/Records/GffRecord.h	/^	string _frame;$/;"	m	class:GffRecord
_freeList	src/utils/FileRecordTools/Records/RecordMgr.h	/^	void *_freeList;$/;"	m	class:RecordMgr
_freeList	src/utils/general/FreeList.h	/^	vector<T *> _freeList;$/;"	m	class:FreeList
_freeListBlockSize	src/utils/FileRecordTools/FileRecordMgr.h	/^	int _freeListBlockSize;$/;"	m	class:FileRecordMgr
_freeListBlockSize	src/utils/FileRecordTools/Records/RecordMgr.h	/^	int _freeListBlockSize;$/;"	m	class:RecordMgr
_freqIter	src/utils/KeyListOps/KeyListOpsMethods.h	/^	freqMapType::iterator _freqIter;$/;"	m	class:KeyListOpsMethods
_freqMap	src/utils/KeyListOps/KeyListOpsMethods.h	/^	freqMapType _freqMap;$/;"	m	class:KeyListOpsMethods
_frm	src/complementFile/complementFile.h	/^	FileRecordMergeMgr *_frm;$/;"	m	class:ComplementFile
_frm	src/mergeFile/mergeFile.h	/^	FileRecordMergeMgr *_frm;$/;"	m	class:MergeFile
_frm	src/utils/FileRecordTools/Records/Record.h	/^	FileRecordMgr *_frm;$/;"	m	class:Record
_fullHeaderFound	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	bool _fullHeaderFound;$/;"	m	class:SingleLineDelimTextFileReader
_gb_track_line_opts	src/genomeCoverageBed/genomeCoverageBed.h	/^    string _gb_track_line_opts;$/;"	m	class:BedGenomeCoverage
_generatedFileNumber	src/regressTest/RegressTest.h	/^	int _generatedFileNumber; \/\/ a "tag" to give generatedFiles.$/;"	m	class:RegressTest
_genome	src/flankBed/flankBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedFlank
_genome	src/genomeCoverageBed/genomeCoverageBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedGenomeCoverage
_genome	src/randomBed/randomBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedRandom
_genome	src/shiftBed/shiftBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedShift
_genome	src/shuffleBed/shuffleBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedShuffle
_genome	src/slopBed/slopBed.h	/^    GenomeFile *_genome;$/;"	m	class:BedSlop
_genomeFile	src/complementFile/complementFile.h	/^	const NewGenomeFile *_genomeFile;$/;"	m	class:ComplementFile
_genomeFile	src/flankBed/flankBed.h	/^    string _genomeFile;$/;"	m	class:BedFlank
_genomeFile	src/genomeCoverageBed/genomeCoverageBed.h	/^    string _genomeFile;$/;"	m	class:BedGenomeCoverage
_genomeFile	src/randomBed/randomBed.h	/^    string _genomeFile;$/;"	m	class:BedRandom
_genomeFile	src/shiftBed/shiftBed.h	/^    string _genomeFile;$/;"	m	class:BedShift
_genomeFile	src/shuffleBed/shuffleBed.h	/^    string _genomeFile;$/;"	m	class:BedShuffle
_genomeFile	src/slopBed/slopBed.h	/^    string _genomeFile;$/;"	m	class:BedSlop
_genomeFile	src/utils/Contexts/ContextBase.h	/^	NewGenomeFile *_genomeFile;$/;"	m	class:ContextBase
_genomeFile	src/utils/FileRecordTools/FileRecordMgr.h	/^	NewGenomeFile *_genomeFile;$/;"	m	class:FileRecordMgr
_genomeFile	src/utils/GenomeFile/GenomeFile.h	/^    string  _genomeFile;$/;"	m	class:GenomeFile
_genomeFileName	src/utils/GenomeFile/NewGenomeFile.h	/^    string  _genomeFileName;$/;"	m	class:NewGenomeFile
_genomeLength	src/utils/GenomeFile/GenomeFile.h	/^    uint32_t _genomeLength;$/;"	m	class:GenomeFile
_genomeLength	src/utils/GenomeFile/NewGenomeFile.h	/^    CHRPOS _genomeLength;$/;"	m	class:NewGenomeFile
_genomeSize	src/shuffleBed/shuffleBed.h	/^    uint32_t _genomeSize;$/;"	m	class:BedShuffle
_get_mem	src/utils/htslib/sam.c	1170;"	d	file:
_get_mem	src/utils/htslib/sam.c	947;"	d	file:
_givenEmptyBuffer	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _givenEmptyBuffer;$/;"	m	class:FileRecordTypeChecker
_group	src/utils/FileRecordTools/Records/GffRecord.h	/^	string _group;$/;"	m	class:GffRecord
_groupCols	src/groupBy/groupBy.h	/^	vector<int> _groupCols;$/;"	m	class:GroupBy
_groupStr	src/utils/Contexts/ContextGroupBy.h	/^	string _groupStr;$/;"	m	class:ContextGroupBy
_hadError	src/utils/driver/BedtoolsDriver.h	/^	bool _hadError;$/;"	m	class:BedtoolsDriver
_hardOptions	src/regressTest/RegressTest.h	/^	string _hardOptions;$/;"	m	class:RegressTest
_hardOptsCmd	src/regressTest/RegressTest.cpp	/^const string RegressTest::_hardOptsCmd = "HARD_OPTIONS";$/;"	m	class:RegressTest	file:
_hardOptsCmd	src/regressTest/RegressTest.h	/^	static const string _hardOptsCmd;$/;"	m	class:RegressTest
_hasColumnOpsMethods	src/utils/Contexts/ContextBase.h	/^	bool _hasColumnOpsMethods;$/;"	m	class:ContextBase
_hasConstantSeed	src/utils/Contexts/ContextBase.h	/^	bool _hasConstantSeed;$/;"	m	class:ContextBase
_hasGenomeFile	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _hasGenomeFile;$/;"	m	class:FileRecordMgr
_hasName	src/utils/fileType/FileRecordTypeChecker.h	/^	map<RECORD_TYPE, bool> _hasName;$/;"	m	class:FileRecordTypeChecker
_hasPattern	src/nucBed/nucBed.h	/^    bool   _hasPattern;$/;"	m	class:NucBed
_hasReciprocal	src/utils/FileRecordTools/Records/BlockMgr.h	/^	bool _hasReciprocal;$/;"	m	class:BlockMgr
_hasScore	src/utils/fileType/FileRecordTypeChecker.h	/^	map<RECORD_TYPE, bool> _hasScore;$/;"	m	class:FileRecordTypeChecker
_hasStrand	src/utils/fileType/FileRecordTypeChecker.h	/^	map<RECORD_TYPE, bool> _hasStrand;$/;"	m	class:FileRecordTypeChecker
_haveExclude	src/fisher/fisher.h	/^    bool _haveExclude;$/;"	m	class:Fisher
_haveExclude	src/shuffleBed/shuffleBed.h	/^    bool _haveExclude;$/;"	m	class:BedShuffle
_haveFractionA	src/utils/Contexts/ContextBase.h	/^    bool _haveFractionA;$/;"	m	class:ContextBase
_haveFractionB	src/utils/Contexts/ContextBase.h	/^    bool _haveFractionB;$/;"	m	class:ContextBase
_haveInclude	src/shuffleBed/shuffleBed.h	/^    bool _haveInclude;$/;"	m	class:BedShuffle
_haveSeed	src/randomBed/randomBed.h	/^    bool _haveSeed;$/;"	m	class:BedRandom
_haveSeed	src/shuffleBed/shuffleBed.h	/^    bool _haveSeed;$/;"	m	class:BedShuffle
_haveSize	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _haveSize;$/;"	m	class:BedGenomeCoverage
_haveStrandedDistMode	src/utils/Contexts/ContextClosest.h	/^    bool _haveStrandedDistMode;$/;"	m	class:ContextClosest
_haveTieMode	src/utils/Contexts/ContextClosest.h	/^    bool _haveTieMode;$/;"	m	class:ContextClosest
_hdr	src/utils/BamTools/include/BamWriter.hpp	/^		SamHeader _hdr;$/;"	m	class:BamTools::BamWriter
_hdrs	src/utils/BamTools/include/BamReader.hpp	/^		std::vector<SamHeader> _hdrs;$/;"	m	class:BamTools::BamReader
_header	src/utils/BamTools/include/SamHeader.hpp	/^		bam_hdr_t* _header;$/;"	m	class:BamTools::SamHeader
_header	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	string _header;$/;"	m	class:SingleLineDelimTextFileReader
_header	src/utils/bedFile/bedFile.h	/^    string _header;$/;"	m	class:BedFile
_headers	src/utils/Contexts/ContextBase.h	/^	map<int, string> _headers;$/;"	m	class:ContextBase
_hitCount	src/coverageFile/coverageFile.h	/^	size_t _hitCount;$/;"	m	class:CoverageFile
_hits	src/utils/chromsweep/chromsweep.h	/^    vector<BED> _hits;$/;"	m	class:ChromSweep
_hops	src/utils/BamTools/include/BamReader.hpp	/^		hFILE_callback_ops _hops;$/;"	m	class:BamTools::BamReader
_i	src/utils/Contexts/ContextBase.h	/^	int _i;$/;"	m	class:ContextBase
_id_method	src/windowMaker/windowMaker.h	/^    ID_METHOD _id_method;$/;"	m	class:WindowMaker
_ignoreCase	src/nucBed/nucBed.h	/^    bool _ignoreCase;$/;"	m	class:NucBed
_ignoreCase	src/utils/Contexts/ContextGroupBy.h	/^	bool _ignoreCase;$/;"	m	class:ContextGroupBy
_ignoreDownstream	src/utils/Contexts/ContextClosest.h	/^    bool _ignoreDownstream;$/;"	m	class:ContextClosest
_ignoreDownstream	src/utils/NewChromsweep/CloseSweep.h	/^	bool _ignoreDownstream;$/;"	m	class:CloseSweep
_ignoreOverlaps	src/utils/Contexts/ContextClosest.h	/^    bool _ignoreOverlaps;$/;"	m	class:ContextClosest
_ignoreStrand	src/pairToPair/pairToPair.h	/^    bool _ignoreStrand;$/;"	m	class:PairToPair
_ignoreUpstream	src/utils/Contexts/ContextClosest.h	/^    bool _ignoreUpstream;$/;"	m	class:ContextClosest
_ignoreUpstream	src/utils/NewChromsweep/CloseSweep.h	/^	bool _ignoreUpstream;$/;"	m	class:CloseSweep
_include	src/shuffleBed/shuffleBed.h	/^    BedFile *_include;$/;"	m	class:BedShuffle
_includeChroms	src/shuffleBed/shuffleBed.h	/^    vector<string> _includeChroms;$/;"	m	class:BedShuffle
_includeFile	src/shuffleBed/shuffleBed.h	/^    string _includeFile;$/;"	m	class:BedShuffle
_infStreamBuf	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	InflateStreamBuf *_infStreamBuf;$/;"	m	class:InputStreamMgr
_inheader	src/utils/Contexts/ContextBase.h	/^	bool _inheader;$/;"	m	class:ContextBase
_inheader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	bool _inheader;$/;"	m	class:SingleLineDelimTextFileReader
_inheader	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _inheader;$/;"	m	class:FileRecordTypeChecker
_inputFile	src/sampleFile/sampleFile.h	/^	FileRecordMgr *_inputFile;$/;"	m	class:SampleFile
_inputFile	src/spacingFile/spacingFile.h	/^    FileRecordMgr *_inputFile;$/;"	m	class:SpacingFile
_inputFileStream	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	ifstream *_inputFileStream;$/;"	m	class:InputStreamMgr
_inputStreamMgr	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	InputStreamMgr *_inputStreamMgr;$/;"	m	class:BufferedStreamMgr
_insertSize	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _insertSize;$/;"	m	class:BamRecord
_insufficientData	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _insufficientData; \/\/set to true if scan buffer had only header lines.$/;"	m	class:FileRecordTypeChecker
_intersectionVal	src/jaccard/jaccard.h	/^    unsigned long _intersectionVal;$/;"	m	class:Jaccard
_ioBufSize	src/utils/Contexts/ContextBase.h	/^    int _ioBufSize;$/;"	m	class:ContextBase
_ioBufSize	src/utils/FileRecordTools/FileRecordMgr.h	/^	int _ioBufSize;$/;"	m	class:FileRecordMgr
_isBAM	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isBAM;$/;"	m	class:FileRecordTypeChecker
_isBam	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _isBam;$/;"	m	class:InputStreamMgr
_isBam	src/utils/KeyListOps/KeyListOpsMethods.h	/^	bool _isBam;$/;"	m	class:KeyListOpsMethods
_isBed	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isBed;$/;"	m	class:FileRecordTypeChecker
_isBedpe	src/shuffleBed/shuffleBed.h	/^    bool _isBedpe;$/;"	m	class:BedShuffle
_isBgzipped	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _isBgzipped;$/;"	m	class:InputStreamMgr
_isBinary	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isBinary;$/;"	m	class:FileRecordTypeChecker
_isCompressed	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isCompressed;$/;"	m	class:FileRecordTypeChecker
_isDelimited	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isDelimited;$/;"	m	class:FileRecordTypeChecker
_isFileOpen	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	bool _isFileOpen;$/;"	m	class:FileReader
_isGFF	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isGFF;$/;"	m	class:FileRecordTypeChecker
_isGFFplus	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isGFFplus;$/;"	m	class:FileRecordTypeChecker
_isGff	src/utils/bedFile/bedFile.h	/^    bool _isGff;$/;"	m	class:BedFile
_isGroupBy	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _isGroupBy; \/\/hopefully also only true for GroupBy$/;"	m	class:FileRecordMgr
_isGroupBy	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isGroupBy;$/;"	m	class:FileRecordTypeChecker
_isGzipped	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _isGzipped;$/;"	m	class:InputStreamMgr
_isGzipped	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isGzipped;$/;"	m	class:FileRecordTypeChecker
_isMateUnmapped	src/utils/FileRecordTools/Records/Record.h	/^	bool _isMateUnmapped;$/;"	m	class:Record
_isNeg	src/utils/NewChromsweep/CloseSweep.h	/^	bool _isNeg;$/;"	m	class:distanceTuple
_isNumericOp	src/utils/KeyListOps/KeyListOps.h	/^	map<OP_TYPES, bool> _isNumericOp;$/;"	m	class:KeyListOps
_isOldProgBedops	src/regressTest/RegressTest.h	/^	bool _isOldProgBedops;$/;"	m	class:RegressTest
_isSortedInput	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _isSortedInput;$/;"	m	class:FileRecordMgr
_isStdin	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _isStdin;$/;"	m	class:InputStreamMgr
_isText	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isText;$/;"	m	class:FileRecordTypeChecker
_isUncompressedBam	src/pairToBed/pairToBed.h	/^    bool  _isUncompressedBam;$/;"	m	class:BedIntersectPE
_isUncompressedBam	src/windowBed/windowBed.h	/^    bool _isUncompressedBam;$/;"	m	class:BedWindow
_isUnmapped	src/utils/FileRecordTools/Records/Record.h	/^	bool _isUnmapped;$/;"	m	class:Record
_isVCF	src/utils/fileType/FileRecordTypeChecker.h	/^	bool _isVCF;$/;"	m	class:FileRecordTypeChecker
_isValidHit	src/utils/FileRecordTools/Records/Record.h	/^	bool _isValidHit;$/;"	m	class:Record
_isVcf	src/utils/bedFile/bedFile.h	/^    bool _isVcf;$/;"	m	class:BedFile
_itemRGB	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _itemRGB;$/;"	m	class:Bed12Interval
_iter	src/utils/KeyListOps/KeyListOpsMethods.h	/^	RecordKeyVector::iterator_type _iter;$/;"	m	class:KeyListOpsMethods
_kClosest	src/utils/NewChromsweep/CloseSweep.h	/^   int _kClosest; \/\/ how many closest hits we want to each query.$/;"	m	class:CloseSweep
_kVal	src/utils/NewChromsweep/CloseSweep.h	/^	int _kVal; \/\/max unique allowed$/;"	m	class:RecDistList
_keepDuplicates	src/multiBamCov/multiBamCov.h	/^    bool _keepDuplicates;$/;"	m	class:MultiCovBam
_keepFailedQC	src/multiBamCov/multiBamCov.h	/^    bool _keepFailedQC;$/;"	m	class:MultiCovBam
_keepFinalIncElem	src/utils/general/Tokenizer.h	/^	lastElemCode _keepFinalIncElem;$/;"	m	class:Tokenizer
_key	src/utils/FileRecordTools/Records/RecordKeyList.h	/^    elemType _key;$/;"	m	class:RecordKeyList
_key	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    elemType _key;$/;"	m	class:RecordKeyVector
_keyList	src/utils/KeyListOps/KeyListOpsMethods.h	/^	RecordKeyVector *_keyList;$/;"	m	class:KeyListOpsMethods
_keyListOps	src/utils/Contexts/ContextBase.h	/^	KeyListOps *_keyListOps;$/;"	m	class:ContextBase
_kf_gammap	src/fisher/kfunc.cpp	/^ double _kf_gammap(double s, double z)$/;"	f
_kf_gammap	src/utils/htslib/kfunc.c	/^static double _kf_gammap(double s, double z)$/;"	f	file:
_kf_gammaq	src/fisher/kfunc.cpp	/^ double _kf_gammaq(double s, double z)$/;"	f
_kf_gammaq	src/utils/htslib/kfunc.c	/^static double _kf_gammaq(double s, double z)$/;"	f	file:
_lastTie	src/utils/NewChromsweep/CloseSweep.h	/^	bool _lastTie;$/;"	m	class:CloseSweep
_leftFlank	src/flankBed/flankBed.h	/^    float  _leftFlank;$/;"	m	class:BedFlank
_leftJoin	src/utils/Contexts/ContextBase.h	/^    bool _leftJoin;$/;"	m	class:ContextBase
_leftSlop	src/slopBed/slopBed.h	/^    float  _leftSlop;$/;"	m	class:BedSlop
_leftSlop	src/windowBed/windowBed.h	/^    int _leftSlop;$/;"	m	class:BedWindow
_length	src/randomBed/randomBed.h	/^    uint32_t _length;$/;"	m	class:BedRandom
_lexicoAssumed	src/utils/NewChromsweep/NewChromsweep.h	/^    bool _lexicoAssumed; \/\/whether we've had to try to guess that any file might be in lexicographical order.$/;"	m	class:NewChromSweep
_lexicoAssumedChromName	src/utils/NewChromsweep/NewChromsweep.h	/^    string _lexicoAssumedChromName; \/\/which chromosome we had to make that guess for. Used in error reporting.$/;"	m	class:NewChromSweep
_lexicoAssumedFileIdx	src/utils/NewChromsweep/NewChromsweep.h	/^    int _lexicoAssumedFileIdx; \/\/which file we had to make the guess for. Also for error reporting.$/;"	m	class:NewChromSweep
_lexicoDisproven	src/utils/NewChromsweep/NewChromsweep.h	/^    bool _lexicoDisproven; \/\/whether we've established that any file ISN'T in lexicographical order$/;"	m	class:NewChromSweep
_lineNum	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	int _lineNum;$/;"	m	class:SingleLineDelimTextFileReader
_lineNum	src/utils/bedFile/bedFile.h	/^    int _lineNum;$/;"	m	class:BedFile
_list	src/utils/FileRecordTools/Records/RecordKeyList.h	/^    listType _list;$/;"	m	class:RecordKeyList
_mainBuf	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	bufType *_mainBuf;$/;"	m	class:BufferedStreamMgr
_mainBufCurrLen	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	int _mainBufCurrLen;$/;"	m	class:BufferedStreamMgr
_mainBufCurrStartPos	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	int _mainBufCurrStartPos;$/;"	m	class:BufferedStreamMgr
_mainFile	src/annotateBed/annotateBed.h	/^    string _mainFile;$/;"	m	class:BedAnnotate
_mainMap	src/utils/BinTree/BinTree.h	/^	mainMapType _mainMap;$/;"	m	class:BinTree
_maskChar	src/maskFastaFromBed/maskFastaFromBed.h	/^    char   _maskChar;     \/\/ typically "N", but user's can choose something else, e.g., "X"$/;"	m	class:MaskFastaFromBed
_matchOnDiffStrand	src/windowBed/windowBed.h	/^    bool _matchOnDiffStrand;$/;"	m	class:BedWindow
_matchOnSameStrand	src/windowBed/windowBed.h	/^    bool _matchOnSameStrand;$/;"	m	class:BedWindow
_mateChrName	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _mateChrName;$/;"	m	class:BamRecord
_matePos	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _matePos;$/;"	m	class:BamRecord
_max	src/genomeCoverageBed/genomeCoverageBed.h	/^    int _max;$/;"	m	class:BedGenomeCoverage
_maxDistance	src/clusterBed/clusterBed.h	/^    int    _maxDistance;$/;"	m	class:BedCluster
_maxDistance	src/utils/Contexts/ContextBase.h	/^	int _maxDistance;$/;"	m	class:ContextBase
_maxDistance	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	int _maxDistance;$/;"	m	class:FileRecordMergeMgr
_maxId	src/utils/GenomeFile/NewGenomeFile.h	/^    int _maxId;$/;"	m	class:NewGenomeFile
_maxNumDatabaseFields	src/utils/Contexts/ContextBase.h	/^    int _maxNumDatabaseFields;$/;"	m	class:ContextBase
_maxPrevLeftClosestEndPos	src/utils/NewChromsweep/CloseSweep.h	/^	vector<int> _maxPrevLeftClosestEndPos;$/;"	m	class:CloseSweep
_maxPrevLeftClosestEndPosReverse	src/utils/NewChromsweep/CloseSweep.h	/^	vector<int> _maxPrevLeftClosestEndPosReverse;$/;"	m	class:CloseSweep
_maxTries	src/shuffleBed/shuffleBed.h	/^    size_t _maxTries;$/;"	m	class:BedShuffle
_mean	src/utils/Contexts/ContextCoverage.h	/^    bool _mean;$/;"	m	class:ContextCoverage
_memoryLogfilename	src/regressTest/RegressTest.h	/^	string _memoryLogfilename;$/;"	m	class:RegressTest
_merged_chrom	src/utils/bedFile/bedFile.h	/^    string _merged_chrom;$/;"	m	class:BedFile
_merged_end	src/utils/bedFile/bedFile.h	/^    int _merged_end;$/;"	m	class:BedFile
_merged_start	src/utils/bedFile/bedFile.h	/^    int _merged_start;$/;"	m	class:BedFile
_methods	src/utils/KeyListOps/KeyListOps.h	/^	KeyListOpsMethods _methods;$/;"	m	class:KeyListOps
_minDownstreamRecs	src/utils/NewChromsweep/CloseSweep.h	/^	vector<RecDistList *> _minDownstreamRecs;$/;"	m	class:CloseSweep
_minQual	src/multiBamCov/multiBamCov.h	/^    int _minQual;$/;"	m	class:MultiCovBam
_minUpstreamRecs	src/utils/NewChromsweep/CloseSweep.h	/^	vector<RecDistList *> _minUpstreamRecs;$/;"	m	class:CloseSweep
_misc_h	src/utils/htslib/cram/misc.h	64;"	d
_mkstr	src/utils/BamTools/include/BamAlignment.hpp	/^	static std::string _mkstr(const uint8_t* what) { return std::string((const char*)what + 1); }$/;"	f	namespace:BamTools
_multiDbMode	src/utils/Contexts/ContextClosest.h	/^    multiDbModeType _multiDbMode;$/;"	m	class:ContextClosest
_mustBeForward	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _mustBeForward;$/;"	m	class:FileRecordMgr
_mustBeReverse	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _mustBeReverse;$/;"	m	class:FileRecordMgr
_mustDeleteVec	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    bool _mustDeleteVec;$/;"	m	class:RecordKeyVector
_name	src/utils/FileRecordTools/Records/Record.h	/^	string _name;$/;"	m	class:Record
_nameCheckDisabled	src/utils/Contexts/ContextBase.h	/^	bool _nameCheckDisabled;$/;"	m	class:ContextBase
_nameConventionWarningMsg	src/utils/Contexts/ContextBase.h	/^   string _nameConventionWarningMsg;$/;"	m	class:ContextBase
_nameConventionWarningTripped	src/utils/Contexts/ContextBase.h	/^   bool _nameConventionWarningTripped;$/;"	m	class:ContextBase
_newVersion	src/regressTest/RegressTest.h	/^	string _newVersion;$/;"	m	class:RegressTest
_next	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *_next;$/;"	m	class:RecordListNode
_next	src/utils/general/BTlist.h	/^	BTlistNode *_next;$/;"	m	class:BTlistNode
_nextPos	src/utils/general/FreeList.h	/^	int _nextPos;$/;"	m	class:FreeList
_noEnforceCoordSort	src/utils/Contexts/ContextBase.h	/^    bool _noEnforceCoordSort;$/;"	m	class:ContextBase
_noEnforceCoordSort	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _noEnforceCoordSort; \/\/only true for GroupBy$/;"	m	class:FileRecordMgr
_noHit	src/utils/Contexts/ContextBase.h	/^    bool _noHit;$/;"	m	class:ContextBase
_noHit	src/windowBed/windowBed.h	/^    bool _noHit;$/;"	m	class:BedWindow
_noOverlapping	src/shuffleBed/shuffleBed.h	/^    bool _noOverlapping;$/;"	m	class:BedShuffle
_no_hits	src/utils/chromsweep/chromsweep.h	/^    vector<BED> _no_hits;$/;"	m	class:ChromSweep
_nonNumErrFlag	src/utils/KeyListOps/KeyListOpsMethods.h	/^	bool _nonNumErrFlag;$/;"	m	class:KeyListOpsMethods
_nullBed	src/utils/bedFile/bedFile.h	/^    BED _nullBed;$/;"	m	class:BedFile
_nullBed	src/utils/chromsweep/chromsweep.h	/^    BED _nullBed;$/;"	m	class:ChromSweep
_nullKeyList	src/utils/KeyListOps/KeyListOpsMethods.h	/^	RecordKeyVector _nullKeyList; \/\/this has to exist just so we can initialize _iter, below.$/;"	m	class:KeyListOpsMethods
_nullStr	src/utils/Contexts/ContextBase.h	/^	string _nullStr; \/\/placeholder return value when col ops aren't valid.$/;"	m	class:ContextBase
_nullVal	src/utils/KeyListOps/KeyListOpsMethods.h	/^	string _nullVal;$/;"	m	class:KeyListOpsMethods
_numArray	src/utils/KeyListOps/KeyListOpsMethods.h	/^	vector<double> _numArray;$/;"	m	class:KeyListOpsMethods
_numBins	src/utils/bedFile/bedFile.h	/^const BIN      _numBins   = 37450;$/;"	v
_numBytesInBuffer	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	int _numBytesInBuffer; \/\/this will hold the length of the buffer after the scan.$/;"	m	class:InputStreamMgr
_numBytesInBuffer	src/utils/fileType/FileRecordTypeChecker.h	/^	int _numBytesInBuffer; \/\/this will hold the length of the buffer after the scan.$/;"	m	class:FileRecordTypeChecker
_numChroms	src/shuffleBed/shuffleBed.h	/^    int _numChroms;$/;"	m	class:BedShuffle
_numClosestHitsWanted	src/utils/Contexts/ContextClosest.h	/^    int _numClosestHitsWanted;$/;"	m	class:ContextClosest
_numCurrSamples	src/sampleFile/sampleFile.h	/^	size_t _numCurrSamples; \/\/the number of samples kept so far.$/;"	m	class:SampleFile
_numDBs	src/utils/NewChromsweep/NewChromsweep.h	/^    int _numDBs; \/\/don't really need this stored, but here for code brevity.$/;"	m	class:NewChromSweep
_numExpectedElems	src/utils/general/Tokenizer.h	/^	int _numExpectedElems;$/;"	m	class:Tokenizer
_numFields	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	int _numFields;$/;"	m	class:SingleLineDelimTextFileReader
_numFields	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^	int _numFields;$/;"	m	class:SingleLineDelimTransferBuffer
_numFields	src/utils/FileRecordTools/Records/GffRecord.h	/^	int _numFields;$/;"	m	class:GffRecord
_numFields	src/utils/bedFile/bedFile.h	/^    unsigned int _numFields;$/;"	m	class:BedFile
_numFields	src/utils/fileType/FileRecordTypeChecker.h	/^	int _numFields;$/;"	m	class:FileRecordTypeChecker
_numFiles	src/utils/NewChromsweep/NewChromsweep.h	/^    int _numFiles; \/\/ditto. Just numDBs + num queries, which for now is always 1.$/;"	m	class:NewChromSweep
_numFixedFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	int _numFixedFields; \/\/first fields have names, and are not stored in otherIdxs.$/;"	m	class:BedPlusInterval
_numIntersections	src/jaccard/jaccard.h	/^    int _numIntersections;$/;"	m	class:Jaccard
_numOffsetFields	src/utils/FileRecordTools/Records/PlusFields.h	/^	int _numOffsetFields; \/\/could be 3 for BedPlus, but GFF has 8 or 9$/;"	m	class:PlusFields
_numOutputRecords	src/utils/Contexts/ContextBase.h	/^	int _numOutputRecords;$/;"	m	class:ContextBase
_numPrintFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	int _numPrintFields;$/;"	m	class:BedPlusInterval
_numPrintFields	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	int _numPrintFields;$/;"	m	class:GffPlusRecord
_numSamples	src/sampleFile/sampleFile.h	/^	size_t _numSamples; \/\/the number of samples we ultimately want$/;"	m	class:SampleFile
_numToGenerate	src/randomBed/randomBed.h	/^    uint32_t _numToGenerate;$/;"	m	class:BedRandom
_obeySplits	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _obeySplits;$/;"	m	class:BedGenomeCoverage
_obeySplits	src/multiBamCov/multiBamCov.h	/^    bool _obeySplits;$/;"	m	class:MultiCovBam
_obeySplits	src/utils/Contexts/ContextBase.h	/^    bool _obeySplits;$/;"	m	class:ContextBase
_oldInputStream	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	istream *_oldInputStream;$/;"	m	class:InputStreamMgr
_oldVersion	src/regressTest/RegressTest.h	/^	string _oldVersion;$/;"	m	class:RegressTest
_only_3p_end	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _only_3p_end;$/;"	m	class:BedGenomeCoverage
_only_5p_end	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _only_5p_end;$/;"	m	class:BedGenomeCoverage
_opCodes	src/utils/KeyListOps/KeyListOps.h	/^	map<string, OP_TYPES> _opCodes;$/;"	m	class:KeyListOps
_operations	src/utils/KeyListOps/KeyListOps.h	/^    string _operations;$/;"	m	class:KeyListOps
_orderTrackType	src/utils/NewChromsweep/NewChromsweep.h	/^    typedef map<string, int> _orderTrackType;$/;"	t	class:NewChromSweep
_org	src/linksBed/linksBed.h	/^    string _org;$/;"	m	class:BedLinks
_origProgramName	src/utils/Contexts/ContextBase.h	/^	string _origProgramName;$/;"	m	class:ContextBase
_outBuf	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	string _outBuf;$/;"	m	class:RecordOutputMgr
_outRecord	src/complementFile/complementFile.h	/^	Bed3Interval _outRecord;$/;"	m	class:ComplementFile
_outVals	src/utils/KeyListOps/KeyListOps.h	/^    string _outVals;$/;"	m	class:KeyListOps
_outputFileType	src/utils/Contexts/ContextBase.h	/^	ContextFileType _outputFileType;$/;"	m	class:ContextBase
_outputMgr	src/complementFile/complementFile.h	/^	RecordOutputMgr *_outputMgr;$/;"	m	class:ComplementFile
_outputTypeDetermined	src/utils/Contexts/ContextBase.h	/^	bool _outputTypeDetermined;$/;"	m	class:ContextBase
_overlapBases	src/utils/FileRecordTools/Records/BlockMgr.h	/^	vector<int> _overlapBases;$/;"	m	class:BlockMgr
_overlapCounts	src/fisher/fisher.h	/^    unsigned long _overlapCounts;$/;"	m	class:Fisher
_overlapFraction	src/multiBamCov/multiBamCov.h	/^    float _overlapFraction;$/;"	m	class:MultiCovBam
_overlapFraction	src/pairToBed/pairToBed.h	/^    float _overlapFraction;$/;"	m	class:BedIntersectPE
_overlapFraction	src/pairToPair/pairToPair.h	/^    float _overlapFraction;$/;"	m	class:PairToPair
_overlapFraction	src/shuffleBed/shuffleBed.h	/^    float  _overlapFraction;$/;"	m	class:BedShuffle
_overlapFraction	src/tagBam/tagBam.h	/^    float _overlapFraction;$/;"	m	class:TagBam
_overlapFraction	src/utils/FileRecordTools/Records/BlockMgr.h	/^	float _overlapFraction;$/;"	m	class:BlockMgr
_overlapFraction	src/utils/chromsweep/chromsweep.h	/^    float _overlapFraction;$/;"	m	class:ChromSweep
_overlapFractionA	src/utils/Contexts/ContextBase.h	/^    float _overlapFractionA;$/;"	m	class:ContextBase
_overlapFractionB	src/utils/Contexts/ContextBase.h	/^    float _overlapFractionB;$/;"	m	class:ContextBase
_overlapRecs	src/utils/NewChromsweep/CloseSweep.h	/^	vector<RecDistList *> _overlapRecs;$/;"	m	class:CloseSweep
_pair_chip_	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _pair_chip_;$/;"	m	class:BedGenomeCoverage
_pairedEnd	src/bamToFastq/bamToFastq.h	/^    bool _pairedEnd;$/;"	m	class:BamToFastq
_parent	src/utils/BamTools/include/BamAlignment.hpp	/^			const BamAlignment& _parent;$/;"	m	struct:BamTools::BamAlignment::_TagGetterBase
_parse_err	src/utils/htslib/sam.c	1168;"	d	file:
_parse_err	src/utils/htslib/sam.c	948;"	d	file:
_parse_err_param	src/utils/htslib/sam.c	1169;"	d	file:
_parse_err_param	src/utils/htslib/sam.c	949;"	d	file:
_parse_warn	src/utils/htslib/sam.c	1167;"	d	file:
_parse_warn	src/utils/htslib/sam.c	950;"	d	file:
_pattern	src/nucBed/nucBed.h	/^    string _pattern;$/;"	m	class:NucBed
_perBase	src/utils/Contexts/ContextCoverage.h	/^    bool _perBase;$/;"	m	class:ContextCoverage
_performCmd	src/regressTest/RegressTest.cpp	/^const string RegressTest::_performCmd = "PERFORM";$/;"	m	class:RegressTest	file:
_performCmd	src/regressTest/RegressTest.h	/^	static const string _performCmd;$/;"	m	class:RegressTest
_performFiles	src/regressTest/RegressTest.h	/^	fileListType *_performFiles; \/\/list of files for performance tests. First in pair is file name, second is description.$/;"	m	class:RegressTest
_plusFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	PlusFields _plusFields;$/;"	m	class:BedPlusInterval
_plusFields	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	PlusFields _plusFields;$/;"	m	class:GffPlusRecord
_plusFields	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	/^	PlusFields _plusFields;$/;"	m	class:NoPosPlusRecord
_possibleBamCode	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	vector<int> _possibleBamCode;$/;"	m	class:InputStreamMgr
_precision	src/utils/KeyListOps/KeyListOps.h	/^    int _precision;$/;"	m	class:KeyListOps
_prevChrom	src/utils/FileRecordTools/FileRecordMgr.h	/^	string _prevChrom;$/;"	m	class:FileRecordMgr
_prevChromId	src/utils/FileRecordTools/FileRecordMgr.h	/^	int _prevChromId;$/;"	m	class:FileRecordMgr
_prevCursor	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *_prevCursor;$/;"	m	class:RecordList
_prevCursor	src/utils/general/BTlist.h	/^	BTlistNode<T> *_prevCursor;$/;"	m	class:BTlist
_prevFields	src/groupBy/groupBy.h	/^	vector<string> _prevFields;$/;"	m	class:GroupBy
_prevQueryChromName	src/utils/NewChromsweep/NewChromsweep.h	/^    string _prevQueryChromName;$/;"	m	class:NewChromSweep
_prevRec	src/spacingFile/spacingFile.h	/^    Record *_prevRec;$/;"	m	class:SpacingFile
_prevRecord	src/groupBy/groupBy.h	/^	Record *_prevRecord;$/;"	m	class:GroupBy
_prevStart	src/utils/FileRecordTools/FileRecordMgr.h	/^	int _prevStart;$/;"	m	class:FileRecordMgr
_prev_chrom	src/utils/bedFile/bedFile.h	/^    string _prev_chrom;$/;"	m	class:BedFile
_prev_start	src/utils/bedFile/bedFile.h	/^    int _prev_start;$/;"	m	class:BedFile
_preventExceedingChromEnd	src/shuffleBed/shuffleBed.h	/^    bool _preventExceedingChromEnd;$/;"	m	class:BedShuffle
_primary_stream	src/utils/general/PushBackStreamBuf.h	/^	streambuf* _primary_stream;$/;"	m	class:PushBackStreamBuf
_printFullCols	src/utils/Contexts/ContextGroupBy.h	/^	bool _printFullCols;$/;"	m	class:ContextGroupBy
_printHeader	src/flankBed/flankBed.h	/^    bool   _printHeader;$/;"	m	class:BedFlank
_printHeader	src/shiftBed/shiftBed.h	/^    bool   _printHeader;$/;"	m	class:BedShift
_printHeader	src/slopBed/slopBed.h	/^    bool   _printHeader;$/;"	m	class:BedSlop
_printHeader	src/utils/Contexts/ContextBase.h	/^    bool _printHeader;$/;"	m	class:ContextBase
_printHeader	src/windowBed/windowBed.h	/^    bool _printHeader;$/;"	m	class:BedWindow
_printSeq	src/nucBed/nucBed.h	/^    bool   _printSeq;$/;"	m	class:NucBed
_printable	src/utils/Contexts/ContextBase.h	/^    bool _printable;$/;"	m	class:ContextBase
_printable	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	bool _printable;$/;"	m	class:RecordOutputMgr
_program	src/utils/Contexts/ContextBase.h	/^	PROGRAM_TYPE _program;$/;"	m	class:ContextBase
_programNames	src/utils/Contexts/ContextBase.h	/^	map<string, PROGRAM_TYPE> _programNames;$/;"	m	class:ContextBase
_properOnly	src/multiBamCov/multiBamCov.h	/^    bool _properOnly;$/;"	m	class:MultiCovBam
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_AlignmentFlag_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_Bin_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_InsertSize_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_Length_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_MapQuality_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_MatePosition_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_MateRefID_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_NumCigarOperations_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_Position_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_QueryNameLength_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_QuerySequenceLength_t
_ptr	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^        bam1_t* _ptr() const {$/;"	f	struct:_RefID_t
_pushBackStreamBuf	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	PushBackStreamBuf *_pushBackStreamBuf;$/;"	m	class:InputStreamMgr
_qForward	src/utils/NewChromsweep/CloseSweep.h	/^	bool _qForward;$/;"	m	class:CloseSweep
_qReverse	src/utils/NewChromsweep/CloseSweep.h	/^	bool _qReverse;$/;"	m	class:CloseSweep
_qsArray	src/utils/KeyListOps/KeyListOpsMethods.h	/^	vector<string> _qsArray;$/;"	m	class:KeyListOpsMethods
_qsizes	src/fisher/fisher.h	/^    vector<int> _qsizes;$/;"	m	class:Fisher
_qualities	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _qualities;$/;"	m	class:BamRecord
_query	src/utils/chromsweep/chromsweep.h	/^    BedFile *_query, *_db;$/;"	m	class:ChromSweep
_queryBases	src/utils/FileRecordTools/Records/BamRecord.h	/^	string _queryBases;$/;"	m	class:BamRecord
_queryCounts	src/fisher/fisher.h	/^    unsigned long _queryCounts;$/;"	m	class:Fisher
_queryFRM	src/groupBy/groupBy.h	/^	FileRecordMgr *_queryFRM;$/;"	m	class:GroupBy
_queryFRM	src/intersectFile/intersectFile.h	/^	FileRecordMgr *_queryFRM;$/;"	m	class:IntersectFile
_queryFRM	src/utils/NewChromsweep/NewChromsweep.h	/^    FileRecordMgr *_queryFRM;$/;"	m	class:NewChromSweep
_queryFileIdx	src/utils/Contexts/ContextBase.h	/^    int _queryFileIdx;$/;"	m	class:ContextBase
_queryLen	src/coverageFile/coverageFile.h	/^	size_t _queryLen;$/;"	m	class:CoverageFile
_queryOffset	src/coverageFile/coverageFile.h	/^	int _queryOffset;$/;"	m	class:CoverageFile
_queryRecordsTotalLength	src/utils/NewChromsweep/NewChromsweep.h	/^     unsigned long _queryRecordsTotalLength;$/;"	m	class:NewChromSweep
_queryTotalRecords	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long _queryTotalRecords;$/;"	m	class:NewChromSweep
_queryUnion	src/jaccard/jaccard.h	/^	unsigned long _queryUnion;$/;"	m	class:Jaccard
_queue	src/utils/BamTools/include/BamReader.hpp	/^		std::priority_queue<std::pair<_MetaData, bam1_t*>, std::vector<std::pair<_MetaData, bam1_t*> >, _Comp> _queue;$/;"	m	class:BamTools::BamReader
_queues	src/utils/FileRecordTools/Records/StrandQueue.h	/^	vector<queueType *> _queues;$/;"	m	class:StrandQueue
_rand48_add	src/utils/htslib/win/rand.c	/^static unsigned short _rand48_add = RAND48_ADD;$/;"	v	file:
_rand48_mult	src/utils/htslib/win/rand.c	/^static unsigned short _rand48_mult[3] = {$/;"	v	file:
_rand48_seed	src/utils/htslib/win/rand.c	/^static unsigned short _rand48_seed[3] = {$/;"	v	file:
_randomCmd	src/regressTest/RegressTest.cpp	/^const string RegressTest::_randomCmd = "RANDOM";$/;"	m	class:RegressTest	file:
_randomCmd	src/regressTest/RegressTest.h	/^	static const string _randomCmd;$/;"	m	class:RegressTest
_read_sam_file	src/utils/BamTools/include/BamReader.hpp	/^		bool _read_sam_file(_SamFile* file)$/;"	f	class:BamTools::BamReader
_read_token	src/utils/htslib/sam.c	1172;"	d	file:
_read_token	src/utils/htslib/sam.c	945;"	d	file:
_read_token_aux	src/utils/htslib/sam.c	1171;"	d	file:
_read_token_aux	src/utils/htslib/sam.c	946;"	d	file:
_reader_fill_buffer	src/utils/htslib/synced_bcf_reader.c	/^static void _reader_fill_buffer(bcf_srs_t *files, bcf_sr_t *reader)$/;"	f	file:
_reader_next_line	src/utils/htslib/synced_bcf_reader.c	/^int _reader_next_line(bcf_srs_t *files)$/;"	f
_reader_seek	src/utils/htslib/synced_bcf_reader.c	/^static int _reader_seek(bcf_sr_t *reader, const char *seq, int start, int end)$/;"	f	file:
_reader_shift_buffer	src/utils/htslib/synced_bcf_reader.c	/^static void _reader_shift_buffer(bcf_sr_t *reader)$/;"	f	file:
_readers_next_region	src/utils/htslib/synced_bcf_reader.c	/^static int _readers_next_region(bcf_srs_t *files)$/;"	f	file:
_rec	src/utils/NewChromsweep/CloseSweep.h	/^	Record *_rec;$/;"	m	class:distanceTuple
_recVec	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    vecType *_recVec;$/;"	m	class:RecordKeyVector
_reciprocal	src/multiBamCov/multiBamCov.h	/^    bool _reciprocal;$/;"	m	class:MultiCovBam
_reciprocal	src/utils/chromsweep/chromsweep.h	/^    bool _reciprocal;$/;"	m	class:ChromSweep
_reciprocalFraction	src/utils/Contexts/ContextBase.h	/^    bool _reciprocalFraction;$/;"	m	class:ContextBase
_recordMgr	src/utils/FileRecordTools/FileRecordMgr.h	/^	RecordMgr *_recordMgr;$/;"	m	class:FileRecordMgr
_recordType	src/utils/FileRecordTools/FileRecordMgr.h	/^	FileRecordTypeChecker::RECORD_TYPE _recordType;$/;"	m	class:FileRecordMgr
_recordType	src/utils/FileRecordTools/Records/RecordMgr.h	/^	FileRecordTypeChecker::RECORD_TYPE _recordType;$/;"	m	class:RecordMgr
_recordType	src/utils/fileType/FileRecordTypeChecker.h	/^	RECORD_TYPE _recordType;$/;"	m	class:FileRecordTypeChecker
_recordTypeNames	src/utils/fileType/FileRecordTypeChecker.h	/^	map<RECORD_TYPE, string> _recordTypeNames;$/;"	m	class:FileRecordTypeChecker
_redirect	src/regressTest/RegressTest.cpp	/^const string RegressTest::_redirect = " > ";$/;"	m	class:RegressTest	file:
_redirect	src/regressTest/RegressTest.h	/^	static const string _redirect;$/;"	m	class:RegressTest
_refDist	src/utils/NewChromsweep/CloseSweep.h	/^	bool _refDist;$/;"	m	class:CloseSweep
_references	src/utils/Contexts/ContextBase.h	/^	map<int, BamTools::RefVector> _references;$/;"	m	class:ContextBase
_references	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	BamTools::RefVector _references;$/;"	m	class:BamFileReader
_regidx_build_index	src/utils/htslib/regidx.c	/^int _regidx_build_index(regidx_t *idx)$/;"	f
_regidx_t	src/utils/htslib/regidx.c	/^struct _regidx_t$/;"	s	file:
_region_t	src/utils/htslib/synced_bcf_reader.c	/^typedef struct _region_t$/;"	s	file:
_regions_add	src/utils/htslib/synced_bcf_reader.c	/^static void _regions_add(bcf_sr_regions_t *reg, const char *chr, int start, int end)$/;"	f	file:
_regions_init_string	src/utils/htslib/synced_bcf_reader.c	/^static bcf_sr_regions_t *_regions_init_string(const char *str)$/;"	f	file:
_regions_match_alleles	src/utils/htslib/synced_bcf_reader.c	/^static int _regions_match_alleles(bcf_sr_regions_t *reg, int als_idx, bcf1_t *rec)$/;"	f	file:
_regions_parse_line	src/utils/htslib/synced_bcf_reader.c	/^static int _regions_parse_line(char *line, int ichr,int ifrom,int ito, char **chr,char **chr_end,int *from,int *to)$/;"	f	file:
_reldists	src/reldist/reldist.h	/^    map<float, size_t> _reldists;$/;"	m	class:RelativeDistance
_removeAll	src/utils/Contexts/ContextSubtract.h	/^    bool _removeAll;$/;"	m	class:ContextSubtract
_removeSum	src/utils/Contexts/ContextSubtract.h	/^    bool _removeSum;$/;"	m	class:ContextSubtract
_reportBoth	src/annotateBed/annotateBed.h	/^    bool _reportBoth;$/;"	m	class:BedAnnotate
_reportCounts	src/annotateBed/annotateBed.h	/^    bool _reportCounts;$/;"	m	class:BedAnnotate
_reportDBfileNames	src/utils/Contexts/ContextBase.h	/^    bool _reportDBfileNames;$/;"	m	class:ContextBase
_reportDBnameTags	src/utils/Contexts/ContextBase.h	/^    bool _reportDBnameTags;$/;"	m	class:ContextBase
_reportDistance	src/utils/Contexts/ContextClosest.h	/^    bool _reportDistance;$/;"	m	class:ContextClosest
_reportPrecision	src/utils/Contexts/ContextBase.h	/^	int _reportPrecision; \/\/used in fields reported from numeric ops from map and merge.$/;"	m	class:ContextBase
_reqDiffNames	src/pairToPair/pairToPair.h	/^    bool _reqDiffNames;$/;"	m	class:PairToPair
_requestedStrand	src/genomeCoverageBed/genomeCoverageBed.h	/^    string _requestedStrand;$/;"	m	class:BedGenomeCoverage
_results	src/utils/chromsweep/chromsweep.h	/^    queue< pair<BED, vector<BED> > > _results;$/;"	m	class:ChromSweep
_retStr	src/utils/KeyListOps/KeyListOpsMethods.h	/^	string _retStr;$/;"	m	class:KeyListOpsMethods
_reverse	src/windowMaker/windowMaker.h	/^    bool _reverse; \/\/ should window numbering be reversed?$/;"	m	class:WindowMaker
_reverseOnly	src/utils/Contexts/ContextBase.h	/^	bool _reverseOnly;$/;"	m	class:ContextBase
_rightFlank	src/flankBed/flankBed.h	/^    float  _rightFlank;$/;"	m	class:BedFlank
_rightSlop	src/slopBed/slopBed.h	/^    float  _rightSlop;$/;"	m	class:BedSlop
_rightSlop	src/windowBed/windowBed.h	/^    int _rightSlop;$/;"	m	class:BedWindow
_runToQueryEnd	src/utils/Contexts/ContextBase.h	/^    bool _runToQueryEnd;$/;"	m	class:ContextBase
_runToQueryEnd	src/utils/NewChromsweep/NewChromsweep.h	/^    bool _runToQueryEnd;$/;"	m	class:NewChromSweep
_sLine	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	string _sLine;$/;"	m	class:SingleLineDelimTextFileReader
_sameChrom	src/shuffleBed/shuffleBed.h	/^    bool _sameChrom;$/;"	m	class:BedShuffle
_sameStrand	src/annotateBed/annotateBed.h	/^    bool _sameStrand;$/;"	m	class:BedAnnotate
_sameStrand	src/multiBamCov/multiBamCov.h	/^    bool _sameStrand;$/;"	m	class:MultiCovBam
_sameStrand	src/pairToBed/pairToBed.h	/^    bool _sameStrand;$/;"	m	class:BedIntersectPE
_sameStrand	src/tagBam/tagBam.h	/^    bool _sameStrand;$/;"	m	class:TagBam
_sameStrand	src/utils/Contexts/ContextBase.h	/^    bool _sameStrand;$/;"	m	class:ContextBase
_sameStrand	src/utils/NewChromsweep/CloseSweep.h	/^	bool _sameStrand;$/;"	m	class:CloseSweep
_sameStrand	src/utils/chromsweep/chromsweep.h	/^    bool _sameStrand;$/;"	m	class:ChromSweep
_samples	src/sampleFile/sampleFile.h	/^	vector<Record *> _samples;$/;"	m	class:SampleFile
_saveDataStr	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	string _saveDataStr;$/;"	m	class:InputStreamMgr
_scale	src/genomeCoverageBed/genomeCoverageBed.h	/^    float _scale;$/;"	m	class:BedGenomeCoverage
_scanBuffer	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	BTlist<int> _scanBuffer;$/;"	m	class:InputStreamMgr
_score	src/utils/FileRecordTools/Records/Record.h	/^	string _score;$/;"	m	class:Record
_searchType	src/pairToBed/pairToBed.h	/^    string _searchType;$/;"	m	class:BedIntersectPE
_searchType	src/pairToPair/pairToPair.h	/^    string _searchType;$/;"	m	class:PairToPair
_seed	src/randomBed/randomBed.h	/^    int _seed;$/;"	m	class:BedRandom
_seed	src/sampleFile/sampleFile.h	/^	int _seed;$/;"	m	class:SampleFile
_seed	src/shuffleBed/shuffleBed.h	/^    int _seed;$/;"	m	class:BedShuffle
_seed	src/utils/Contexts/ContextBase.h	/^	int _seed;$/;"	m	class:ContextBase
_shiftMinus	src/shiftBed/shiftBed.h	/^    float  _shiftMinus;$/;"	m	class:BedShift
_shiftPlus	src/shiftBed/shiftBed.h	/^    float  _shiftPlus;$/;"	m	class:BedShift
_showHelp	src/utils/Contexts/ContextBase.h	/^	bool _showHelp;$/;"	m	class:ContextBase
_showHist	src/utils/Contexts/ContextCoverage.h	/^    bool _showHist;$/;"	m	class:ContextCoverage
_signDistance	src/utils/Contexts/ContextClosest.h	/^    bool _signDistance;$/;"	m	class:ContextClosest
_size	src/utils/FileRecordTools/Records/RecordList.h	/^	size_t _size;$/;"	m	class:RecordList
_size	src/utils/VectorOps/VectorOps.h	/^    uint32_t _size;$/;"	m	class:VectorOps
_size	src/utils/general/BTlist.h	/^	size_t _size;$/;"	m	class:BTlist
_size	src/windowMaker/windowMaker.h	/^    uint32_t _size;$/;"	m	class:WindowMaker
_skipFirstArgs	src/utils/Contexts/ContextBase.h	/^	int _skipFirstArgs;$/;"	m	class:ContextBase
_skipFirstThreeFieldsWhenPrinting	src/utils/FileRecordTools/Records/Bed3Interval.h	/^	bool _skipFirstThreeFieldsWhenPrinting;$/;"	m	class:Bed3Interval
_skip_to_comma	src/utils/htslib/sam.c	1149;"	d	file:
_skip_to_comma	src/utils/htslib/sam.c	1160;"	d	file:
_slop	src/pairToPair/pairToPair.h	/^    int _slop;$/;"	m	class:PairToPair
_softMask	src/maskFastaFromBed/maskFastaFromBed.h	/^    bool _softMask;$/;"	m	class:MaskFastaFromBed
_softOptions	src/regressTest/RegressTest.h	/^	vector<string> _softOptions;$/;"	m	class:RegressTest
_sortOutput	src/utils/Contexts/ContextBase.h	/^    bool _sortOutput;$/;"	m	class:ContextBase
_sortedInput	src/utils/Contexts/ContextBase.h	/^    bool _sortedInput;$/;"	m	class:ContextBase
_source	src/utils/FileRecordTools/Records/GffRecord.h	/^	string _source;$/;"	m	class:GffRecord
_space	src/regressTest/RegressTest.cpp	/^const string RegressTest::_space = " ";$/;"	m	class:RegressTest	file:
_space	src/regressTest/RegressTest.h	/^	static const string _space;$/;"	m	class:RegressTest
_splitBlockInfo	src/utils/Contexts/ContextBase.h	/^	BlockMgr *_splitBlockInfo;$/;"	m	class:ContextBase
_splitBlockMgr	src/utils/Contexts/ContextIntersect.h	/^	BlockMgr *_splitBlockMgr;$/;"	m	class:ContextIntersect
_startOffsets	src/utils/GenomeFile/GenomeFile.h	/^    vector<uint32_t> _startOffsets;$/;"	m	class:GenomeFile
_startOffsets	src/utils/GenomeFile/NewGenomeFile.h	/^    vector<CHRPOS> _startOffsets;$/;"	m	class:NewGenomeFile
_startPos	src/utils/FileRecordTools/Records/Record.h	/^	int _startPos;$/;"	m	class:Record
_startPosStr	src/utils/FileRecordTools/Records/Record.h	/^	string _startPosStr;$/;"	m	class:Record
_startSites	src/genomeCoverageBed/genomeCoverageBed.h	/^    bool _startSites;$/;"	m	class:BedGenomeCoverage
_status	src/utils/bedFile/bedFile.h	/^    BedLineStatus _status;$/;"	m	class:BedFile
_step	src/windowMaker/windowMaker.h	/^    uint32_t _step;$/;"	m	class:WindowMaker
_storedRecords	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	StrandQueue _storedRecords;$/;"	m	class:FileRecordMergeMgr
_strand	src/utils/FileRecordTools/Records/Record.h	/^	string _strand;$/;"	m	class:Record
_strandIdxs	src/utils/FileRecordTools/Records/StrandQueue.h	/^	vector<Record::strandType> _strandIdxs;$/;"	m	class:StrandQueue
_strandVal	src/utils/FileRecordTools/Records/Record.h	/^	strandType _strandVal;$/;"	m	class:Record
_strandWindows	src/windowBed/windowBed.h	/^    bool _strandWindows;$/;"	m	class:BedWindow
_strandedDistMode	src/utils/Contexts/ContextClosest.h	/^    strandedDistanceModeType _strandedDistMode;$/;"	m	class:ContextClosest
_strandedSlop	src/pairToPair/pairToPair.h	/^    bool _strandedSlop;$/;"	m	class:PairToPair
_streamFinished	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	bool _streamFinished;$/;"	m	class:BufferedStreamMgr
_streamFinished	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool _streamFinished;$/;"	m	class:InputStreamMgr
_subCmd	src/utils/driver/BedtoolsDriver.h	/^	string _subCmd;$/;"	m	class:BedtoolsDriver
_subProgram	src/regressTest/RegressTest.h	/^	string _subProgram;$/;"	m	class:RegressTest
_summary	src/reldist/reldist.h	/^    bool _summary;$/;"	m	class:RelativeDistance
_supported	src/utils/driver/BedtoolsDriver.h	/^	supportType _supported;$/;"	m	class:BedtoolsDriver
_sweep	src/intersectFile/intersectFile.h	/^	NewChromSweep *_sweep;$/;"	m	class:IntersectFile
_tabFile	src/utils/tabFile/tabFile.h	/^    string _tabFile;$/;"	m	class:TabFile
_tabStream	src/utils/tabFile/tabFile.h	/^    istream *_tabStream;$/;"	m	class:TabFile
_tag	src/tagBam/tagBam.h	/^    string _tag;$/;"	m	class:TagBam
_tempChrPosStr	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	string _tempChrPosStr;$/;"	m	class:SingleLineDelimTextFileReader
_testLastQueryRec	src/utils/NewChromsweep/NewChromsweep.h	/^    bool _testLastQueryRec;$/;"	m	class:NewChromSweep
_thickEnd	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	int _thickEnd;$/;"	m	class:Bed12Interval
_thickEndStr	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _thickEndStr;$/;"	m	class:Bed12Interval
_thickStart	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	int _thickStart;$/;"	m	class:Bed12Interval
_thickStartStr	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	string _thickStartStr;$/;"	m	class:Bed12Interval
_tid2chrom	src/sortBed/sortBed.h	/^		map<size_t,string> _tid2chrom; \/** map chromosome name to sort order *\/$/;"	m	class:BedSort
_tieMode	src/utils/Contexts/ContextClosest.h	/^    tieModeType _tieMode;$/;"	m	class:ContextClosest
_tieMode	src/utils/NewChromsweep/CloseSweep.h	/^	ContextClosest::tieModeType _tieMode;$/;"	m	class:CloseSweep
_tmpBlocksMgr	src/subtractFile/subtractFile.h	/^	BlockMgr *_tmpBlocksMgr;$/;"	m	class:SubtractFile
_tmpDirname	src/regressTest/RegressTest.h	/^	string _tmpDirname;$/;"	m	class:RegressTest
_tmpZipBuf	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	char *_tmpZipBuf;$/;"	m	class:InputStreamMgr
_tokenizer	src/utils/fileType/FileRecordTypeChecker.h	/^	Tokenizer _tokenizer;$/;"	m	class:FileRecordTypeChecker
_tot_queries	src/reldist/reldist.h	/^    size_t _tot_queries;$/;"	m	class:RelativeDistance
_totalMergedRecordLength	src/utils/FileRecordTools/FileRecordMgr.h	/^	unsigned long _totalMergedRecordLength;$/;"	m	class:FileRecordMgr
_totalQueryLen	src/coverageFile/coverageFile.h	/^	size_t _totalQueryLen;$/;"	m	class:CoverageFile
_totalRecordLength	src/utils/FileRecordTools/FileRecordMgr.h	/^	unsigned long _totalRecordLength;$/;"	m	class:FileRecordMgr
_totalRecs	src/utils/NewChromsweep/CloseSweep.h	/^	int _totalRecs;$/;"	m	class:RecDistList
_total_flattened_length	src/utils/bedFile/bedFile.h	/^    unsigned long _total_flattened_length;$/;"	m	class:BedFile
_total_length	src/utils/bedFile/bedFile.h	/^    unsigned long _total_length;$/;"	m	class:BedFile
_tries	src/shuffleBed/shuffleBed.h	/^    size_t _tries;$/;"	m	class:BedShuffle
_typeChecker	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	FileRecordTypeChecker _typeChecker;$/;"	m	class:BufferedStreamMgr
_typeIsKnown	src/utils/bedFile/bedFile.h	/^    bool _typeIsKnown;        \/\/ do we know the type?   (i.e., BED, GFF, VCF)$/;"	m	class:BedFile
_uncompressedBam	src/utils/Contexts/ContextBase.h	/^    bool _uncompressedBam;$/;"	m	class:ContextBase
_unionVal	src/jaccard/jaccard.h	/^    unsigned long _unionVal;$/;"	m	class:Jaccard
_useBedOut	src/fastaFromBed/fastaFromBed.h	/^    bool _useBedOut;    \/\/ priginal BED records followed by FASTA on same line$/;"	m	class:Bed2Fa
_useBlocks	src/fastaFromBed/fastaFromBed.h	/^    bool _useBlocks;    \/\/ should the extracted sequence obey BED blocks$/;"	m	class:Bed2Fa
_useBufSize	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	int _useBufSize;$/;"	m	class:BufferedStreamMgr
_useBufferedOutput	src/utils/Contexts/ContextBase.h	/^    bool _useBufferedOutput;$/;"	m	class:ContextBase
_useEditDistance	src/pairToBed/pairToBed.h	/^    bool _useEditDistance;$/;"	m	class:BedIntersectPE
_useFasta	src/fastaFromBed/fastaFromBed.h	/^    bool _useFasta;$/;"	m	class:Bed2Fa
_useFullBamTags	src/utils/Contexts/ContextBase.h	/^    bool _useFullBamTags;$/;"	m	class:ContextBase
_useFullBamTags	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool _useFullBamTags;$/;"	m	class:FileRecordMgr
_useFullHeader	src/fastaFromBed/fastaFromBed.h	/^    bool _useFullHeader;$/;"	m	class:Bed2Fa
_useFullHeader	src/maskFastaFromBed/maskFastaFromBed.h	/^    bool _useFullHeader;$/;"	m	class:MaskFastaFromBed
_useFullHeader	src/nucBed/nucBed.h	/^    bool _useFullHeader;$/;"	m	class:NucBed
_useIntervals	src/tagBam/tagBam.h	/^    bool _useIntervals;$/;"	m	class:TagBam
_useMateTags	src/bamToFastq/bamToFastq.h	/^    bool _useMateTags;          \/\/ whether or not the mate sequence should be $/;"	m	class:BamToFastq
_useMergedIntervals	src/utils/Contexts/ContextBase.h	/^	bool _useMergedIntervals;$/;"	m	class:ContextBase
_useMergedIntervals	src/utils/chromsweep/chromsweep.h	/^    bool _useMergedIntervals;$/;"	m	class:ChromSweep
_useName	src/fastaFromBed/fastaFromBed.h	/^    bool _useName;$/;"	m	class:Bed2Fa
_useNamePlus	src/fastaFromBed/fastaFromBed.h	/^    bool _useNamePlus;$/;"	m	class:Bed2Fa
_useNames	src/tagBam/tagBam.h	/^    bool _useNames;$/;"	m	class:TagBam
_useScores	src/tagBam/tagBam.h	/^    bool _useScores;$/;"	m	class:TagBam
_useStrand	src/fastaFromBed/fastaFromBed.h	/^    bool _useStrand;    \/\/ should the extracted sequence obey strandedness?$/;"	m	class:Bed2Fa
_useTags	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	bool _useTags;$/;"	m	class:BamFileReader
_userName	src/regressTest/RegressTest.h	/^	string _userName;$/;"	m	class:RegressTest
_val	src/utils/FileRecordTools/Records/RecordList.h	/^	Record * _val;$/;"	m	class:RecordListNode
_val	src/utils/general/BTlist.h	/^	T _val;$/;"	m	class:BTlistNode
_varAlt	src/utils/FileRecordTools/Records/VcfRecord.h	/^	string _varAlt;$/;"	m	class:VcfRecord
_varRef	src/utils/FileRecordTools/Records/VcfRecord.h	/^	string _varRef;$/;"	m	class:VcfRecord
_vecd	src/utils/VectorOps/VectorOps.h	/^    vector<double> _vecd;$/;"	m	class:VectorOps
_vecs	src/utils/VectorOps/VectorOps.h	/^    vector<string> _vecs;$/;"	m	class:VectorOps
_visitedChromosomes	src/genomeCoverageBed/genomeCoverageBed.h	/^    set<string> _visitedChromosomes;$/;"	m	class:BedGenomeCoverage
_wasInitialized	src/utils/NewChromsweep/NewChromsweep.h	/^    bool _wasInitialized;$/;"	m	class:NewChromSweep
_window_method	src/windowMaker/windowMaker.h	/^    WINDOW_METHOD _window_method;$/;"	m	class:WindowMaker
_writeA	src/utils/Contexts/ContextBase.h	/^    bool _writeA;$/;"	m	class:ContextBase
_writeAllOverlap	src/utils/Contexts/ContextBase.h	/^    bool _writeAllOverlap;$/;"	m	class:ContextBase
_writeB	src/utils/Contexts/ContextBase.h	/^    bool _writeB;$/;"	m	class:ContextBase
_writeCount	src/utils/Contexts/ContextBase.h	/^    bool _writeCount;$/;"	m	class:ContextBase
_writeCount	src/windowBed/windowBed.h	/^    bool _writeCount;$/;"	m	class:BedWindow
_writeOverlap	src/utils/Contexts/ContextBase.h	/^    bool _writeOverlap;$/;"	m	class:ContextBase
_zeroLength	src/utils/FileRecordTools/Records/Record.h	/^	bool _zeroLength;$/;"	m	class:Record
a	src/utils/htslib/htslib/hts.h	/^        int *a;$/;"	m	struct:__anon16::__anon17
a	src/utils/htslib/md5.c	/^	hts_md5_u32plus a, b, c, d;$/;"	m	struct:hts_md5_context	file:
aTN	src/utils/htslib/cram/cram_structs.h	/^    int           nTN, aTN;  \/\/ used and allocated size for TN[]$/;"	m	struct:cram_slice
abs_cmp	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^bool abs_cmp(int i, int j) { return abs(i)<abs(j); }$/;"	f
add	src/split/splitBed.cpp	/^		void add(BED* entry)$/;"	f	class:BedSplitItems
addBEDIntoMap	src/utils/bedFile/bedFile.cpp	/^void BedFile::addBEDIntoMap(BED bedEntry) {$/;"	f	class:BedFile
addBlockNums	src/bed12ToBed6/bed12ToBed6.cpp	/^bool addBlockNums = false;$/;"	v
addColumns	src/utils/KeyListOps/KeyListOps.h	/^	void addColumns(const string &newCols) {$/;"	f	class:KeyListOps
addDatabaseNameTag	src/utils/Contexts/ContextIntersect.h	/^	void addDatabaseNameTag(const string &tag) { _dbNameTags.push_back(tag); }$/;"	f	class:ContextIntersect
addDbFileId	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::addDbFileId(int fileId) {$/;"	f	class:RecordOutputMgr
addFilePrecessorOption	src/regressTest/RegressTest.h	/^	void addFilePrecessorOption(const char *option) { _filePrecessorOptions.push_back(option); }$/;"	f	class:RegressTest
addInputFile	src/utils/Contexts/ContextBase.h	/^	void addInputFile(const string &inputFile) { _fileNames.push_back(inputFile); }$/;"	f	class:ContextBase
addOperations	src/utils/KeyListOps/KeyListOps.h	/^	void addOperations(const string &newOps) {$/;"	f	class:KeyListOps
addRec	src/utils/NewChromsweep/CloseSweep.cpp	/^bool RecDistList::addRec(int dist, Record *record, chromDirType chromDir) {$/;"	f	class:RecDistList
addRecordToTree	src/utils/BinTree/BinTree.cpp	/^bool BinTree::addRecordToTree(Record *record)$/;"	f	class:BinTree
addRecsToRetList	src/utils/NewChromsweep/CloseSweep.cpp	/^int CloseSweep::addRecsToRetList(RecDistList::elemsType *recs, int currDist, RecordKeyVector &retList) {$/;"	f	class:CloseSweep
addSingleRec	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::addSingleRec(Record *rec, int currDist, int &hitsUsed, RecordKeyVector &retList) {$/;"	f	class:CloseSweep
addToStorage	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^void FileRecordMergeMgr::addToStorage(Record *record) {$/;"	f	class:FileRecordMergeMgr
add_callback_headers	src/utils/htslib/hfile_libcurl.c	/^static int add_callback_headers(hFILE_libcurl *fp) {$/;"	f	file:
add_md_char	src/utils/htslib/cram/cram_decode.c	/^static inline void add_md_char(cram_slice *s, int decode_md, char c, int32_t *md_dist) {$/;"	f	file:
add_read_names	src/utils/htslib/cram/cram_encode.c	/^static void add_read_names(cram_fd *fd, cram_container *c, cram_slice *s,$/;"	f	file:
adjustStrandVal	src/utils/FileRecordTools/Records/Record.h	/^	virtual void adjustStrandVal() {$/;"	f	class:Record
adjustZeroLength	src/utils/FileRecordTools/Records/Record.cpp	/^void Record::adjustZeroLength()$/;"	f	class:Record
aend	src/utils/htslib/cram/cram_structs.h	/^    int32_t aend;         \/\/ alignment end$/;"	m	struct:cram_record
afeatures	src/utils/htslib/cram/cram_structs.h	/^    int           afeatures; \/\/ allocated size of features$/;"	m	struct:cram_slice
after	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::after(const Record *other) const$/;"	f	class:Record
after	src/utils/bedFile/bedFile.h	/^bool after(const BED &a, const BED &b) {$/;"	f
align_mem	src/utils/htslib/vcf.c	/^static inline void align_mem(kstring_t *s)$/;"	f	file:
allBinsType	src/utils/BinTree/BinTree.h	/^	typedef map<binNumType, binType> allBinsType; \/\/for each bin number, have a RecordList$/;"	t	class:BinTree
allCachesEmpty	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::allCachesEmpty() {$/;"	f	class:NewChromSweep
allClear	src/utils/FileRecordTools/Records/RecordKeyList.h	/^    bool allClear() { return (_key == NULL && empty()); }$/;"	f	class:RecordKeyList
allClear	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    bool allClear() { return (_key == NULL && empty()); }$/;"	f	class:RecordKeyVector
allCurrDBrecsNull	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::allCurrDBrecsNull() {$/;"	f	class:NewChromSweep
allElems	src/utils/NewChromsweep/CloseSweep.h	/^	elemsType *allElems(constIterType iter) const { return _allRecs[_distIndex[iter].second]; }$/;"	f	class:RecDistList
allHits	src/utils/bedFile/bedFile.cpp	/^void BedFile::allHits(string chrom, CHRPOS start, $/;"	f	class:BedFile
allHitsRightOfQueryIgnored	src/utils/NewChromsweep/CloseSweep.cpp	/^bool CloseSweep::allHitsRightOfQueryIgnored() {$/;"	f	class:CloseSweep
allToolsCommonHelp	src/utils/general/CommonHelp.cpp	/^void allToolsCommonHelp() {$/;"	f
allele	src/utils/htslib/htslib/vcf.h	/^    char **allele;      \/\/ allele[0] is the REF (allele[] pointers to the als block); all null terminated$/;"	m	struct:__anon26
alloc	src/utils/htslib/cram/cram_structs.h	/^    size_t alloc;$/;"	m	struct:cram_block
allocateAndAssignRecord	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^Record *BlockMgr::allocateAndAssignRecord(const Record *keyRecord, int startPos, int endPos)$/;"	f	class:BlockMgr
allocateFileReader	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::allocateFileReader(bool inheader)$/;"	f	class:FileRecordMgr
allocateRecord	src/utils/FileRecordTools/Records/RecordMgr.cpp	/^Record *RecordMgr::allocateRecord()$/;"	f	class:RecordMgr
alloced	src/utils/htslib/cram/mFILE.h	/^    size_t alloced;$/;"	m	struct:__anon60
als	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char **als;             \/\/ parsed alleles if targets_als set and _regions_match_alleles called$/;"	m	struct:_bcf_sr_regions_t
als	src/utils/htslib/htslib/vcf.h	/^    char *id, *als;     \/\/ ID and REF+ALT block (\\0-seperated)$/;"	m	struct:__anon26
als_str	src/utils/htslib/htslib/synced_bcf_reader.h	/^    kstring_t als_str;      \/\/ block of parsed alleles$/;"	m	struct:_bcf_sr_regions_t
als_type	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int als_type;           \/\/ alleles type, currently VCF_SNP or VCF_INDEL$/;"	m	struct:_bcf_sr_regions_t
annotate_help	src/annotateBed/annotateMain.cpp	/^void annotate_help(void) {$/;"	f
annotate_main	src/annotateBed/annotateMain.cpp	/^int annotate_main(int argc, char* argv[]) {$/;"	f
anyHits	src/utils/bedFile/bedFile.cpp	/^bool BedFile::anyHits(string chrom, CHRPOS start, CHRPOS end, string strand,$/;"	f	class:BedFile
api_usage_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,$/;"	e	enum:__anon32
api_version	src/utils/htslib/hfile_internal.h	/^    int api_version;$/;"	m	struct:hFILE_plugin
apos	src/utils/htslib/cram/cram_structs.h	/^    int32_t apos;         \/\/ AP$/;"	m	struct:cram_record
append	src/utils/general/QuickString.cpp	/^void string::append(char c)$/;"	f	class:string
append	src/utils/general/QuickString.cpp	/^void string::append(const char *inBuf, size_t inBufLen)$/;"	f	class:string
append	src/utils/general/QuickString.cpp	/^void string::append(double num) {$/;"	f	class:string
append	src/utils/general/QuickString.cpp	/^void string::append(float num) {$/;"	f	class:string
append	src/utils/general/QuickString.cpp	/^void string::append(int num) {$/;"	f	class:string
append	src/utils/general/QuickString.cpp	/^void string::append(uint32_t num) {$/;"	f	class:string
append	src/utils/general/QuickString.h	/^	void append(const string &str) { append(str.c_str(), str.size()); }$/;"	f	class:string
appendField	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^void SingleLineDelimTextFileReader::appendField(int fieldNum, string &str) const {$/;"	f	class:SingleLineDelimTextFileReader
append_header	src/utils/htslib/hfile_libcurl.c	/^static int append_header(hdrlist *hdrs, const char *data, int dup) {$/;"	f	file:
append_sub32	src/utils/htslib/cram/cram_io.h	/^static inline unsigned char *append_sub32(unsigned char *cp, uint32_t i) {$/;"	f
append_uint32	src/utils/htslib/cram/cram_io.h	/^static inline unsigned char *append_uint32(unsigned char *cp, uint32_t i) {$/;"	f
append_uint64	src/utils/htslib/cram/cram_io.h	/^static inline unsigned char *append_uint64(unsigned char *cp, uint64_t i) {$/;"	f
apply_filters	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char *apply_filters;    \/\/ If set, sites where none of the FILTER strings is listed$/;"	m	struct:__anon33
arg	src/utils/htslib/htslib/hts.h	/^    char *arg;                \/\/ string form, strdup()ed$/;"	m	struct:hts_opt
arg	src/utils/htslib/thread_pool_internal.h	/^    void *arg;$/;"	m	struct:hts_tpool_job
args	src/utils/BamTools/mapping/BamAlignment.py	/^    args = line[0]$/;"	v
args_t	src/utils/htslib/tabix.c	/^args_t;$/;"	t	typeref:struct:__anon99	file:
ari_decoder	src/utils/htslib/cram/rANS_static.c	/^} ari_decoder;$/;"	t	typeref:struct:__anon61	file:
assign	src/utils/general/QuickString.cpp	/^string &string::assign(const char *inBuf, size_t inBufLen)$/;"	f	class:string
assignChromId	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::assignChromId(Record *record) {$/;"	f	class:FileRecordMgr
assignNoCopy	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::assignNoCopy(RecordList &other) {$/;"	f	class:RecordList
assignNoCopy	src/utils/general/BTlist.h	/^	void assignNoCopy(BTlist<T> &other) {$/;"	f	class:BTlist
assignPrevFields	src/groupBy/groupBy.cpp	/^void GroupBy::assignPrevFields() {$/;"	f	class:GroupBy
assignWeightsBasedOnSize	src/utils/bedFile/bedFile.cpp	/^void BedFile::assignWeightsBasedOnSize() {$/;"	f	class:BedFile
at	src/utils/general/QuickString.h	/^	char &at(size_t pos) { return _buffer[pos]; }$/;"	f	class:string
at_eof	src/utils/htslib/htslib/hfile.h	/^    unsigned at_eof:1, mobile:1, readonly:1;$/;"	m	struct:hFILE
auth_hdr	src/utils/htslib/hfile_s3.c	/^    kstring_t auth_hdr;$/;"	m	struct:__anon55	file:
auth_header_callback	src/utils/htslib/hfile_s3.c	/^static int auth_header_callback(void *ctx, char ***hdrs) {$/;"	f	file:
auth_time	src/utils/htslib/hfile_s3.c	/^    time_t auth_time;$/;"	m	struct:__anon55	file:
aux	src/utils/htslib/cram/cram_structs.h	/^    int32_t aux;          \/\/ idx to s->aux_blk$/;"	m	struct:cram_record
aux	src/utils/htslib/htslib/sam.h	/^    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:28;$/;"	m	struct:__anon42
aux	src/utils/htslib/htslib/synced_bcf_reader.h	/^    void *aux;          \/\/ Opaque auxiliary data$/;"	m	struct:__anon33
aux_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *aux_blk;       \/\/ BAM aux block, created while decoding CRAM$/;"	m	struct:cram_slice
aux_block	src/utils/htslib/cram/cram_structs.h	/^    cram_block **aux_block;$/;"	m	struct:cram_slice
aux_fields1	src/utils/htslib/test/sam.c	/^static int aux_fields1(void)$/;"	f	file:
aux_size	src/utils/htslib/cram/cram_structs.h	/^    int32_t aux_size;     \/\/ total size of packed ntags in aux_blk$/;"	m	struct:cram_record
aux_t	src/utils/htslib/synced_bcf_reader.c	/^aux_t;$/;"	t	typeref:struct:__anon108	file:
aux_to_le	src/utils/htslib/sam.c	/^static int aux_to_le(char type, uint8_t *out, const uint8_t *in, size_t len) {$/;"	f	file:
aux_type2size	src/utils/htslib/sam.c	/^static inline int aux_type2size(uint8_t type)$/;"	f	file:
aux_val_to_le	src/utils/htslib/sam.c	1396;"	d	file:
aux_val_to_le	src/utils/htslib/sam.c	1409;"	d	file:
b	src/utils/htslib/cram/cram_codecs.h	/^    cram_block *b;$/;"	m	struct:__anon76
b	src/utils/htslib/cram/cram_codecs.h	/^    cram_block *b;$/;"	m	struct:__anon78
b	src/utils/htslib/cram/cram_structs.h	/^	} b;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon86
b	src/utils/htslib/htslib/kbitset.h	/^	unsigned long b[1];$/;"	m	struct:kbitset_t
b	src/utils/htslib/htslib/sam.h	/^    bam1_t *b;$/;"	m	struct:__anon42
b	src/utils/htslib/md5.c	/^	hts_md5_u32plus a, b, c, d;$/;"	m	struct:hts_md5_context	file:
b	src/utils/htslib/sam.c	/^    bam1_t *b;$/;"	m	struct:__bam_plp_t	file:
b	src/utils/htslib/sam.c	/^    bam1_t b;$/;"	m	struct:__linkbuf_t	file:
bIntervals	test/fisher/sim.py	/^bIntervals = [(x[0], int(x[1]), int(x[2])) for x in (l.split("\\t") for l in$/;"	v
back	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *back() const { return _currEnd; }$/;"	f	class:RecordList
back	src/utils/general/BTlist.h	/^	BTlistNode<T> *back() const { return _currEnd; }$/;"	f	class:BTlist
backend	src/utils/htslib/htslib/hfile.h	/^    const struct hFILE_backend *backend;$/;"	m	struct:hFILE	typeref:struct:hFILE::hFILE_backend
bai	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
bam	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
bam1_core_t	src/utils/htslib/htslib/sam.h	/^} bam1_core_t;$/;"	t	typeref:struct:__anon39
bam1_t	src/utils/htslib/htslib/sam.h	/^} bam1_t;$/;"	t	typeref:struct:__anon40
bamFileMap	src/multiBamCov/multiBamCov.h	/^    map<string, int> bamFileMap;$/;"	m	class:MultiCovBam
bam_aux	src/utils/htslib/cram/cram_samtools.h	53;"	d
bam_aux2A	src/utils/htslib/sam.c	/^char bam_aux2A(const uint8_t *s)$/;"	f
bam_aux2Z	src/utils/htslib/sam.c	/^char *bam_aux2Z(const uint8_t *s)$/;"	f
bam_aux2f	src/utils/htslib/sam.c	/^double bam_aux2f(const uint8_t *s)$/;"	f
bam_aux2i	src/utils/htslib/sam.c	/^int64_t bam_aux2i(const uint8_t *s)$/;"	f
bam_auxB2f	src/utils/htslib/sam.c	/^double bam_auxB2f(const uint8_t *s, uint32_t idx)$/;"	f
bam_auxB2i	src/utils/htslib/sam.c	/^int64_t bam_auxB2i(const uint8_t *s, uint32_t idx)$/;"	f
bam_auxB_len	src/utils/htslib/sam.c	/^uint32_t bam_auxB_len(const uint8_t *s)$/;"	f
bam_aux_append	src/utils/htslib/sam.c	/^int bam_aux_append(bam1_t *b, const char tag[2], char type, int len, const uint8_t *data)$/;"	f
bam_aux_del	src/utils/htslib/sam.c	/^int bam_aux_del(bam1_t *b, uint8_t *s)$/;"	f
bam_aux_get	src/utils/htslib/sam.c	/^uint8_t *bam_aux_get(const bam1_t *b, const char tag[2])$/;"	f
bam_aux_update_str	src/utils/htslib/sam.c	/^int bam_aux_update_str(bam1_t *b, const char tag[2], int len, const char *data)$/;"	f
bam_bin	src/utils/htslib/cram/cram_samtools.h	46;"	d
bam_blk_size	src/utils/htslib/cram/cram_samtools.h	35;"	d
bam_check	test/intersect/new_test-intersect.sh	/^bam_check() $/;"	f
bam_cigar	src/utils/htslib/cram/cram_samtools.h	52;"	d
bam_cigar2qlen	src/utils/htslib/sam.c	/^int bam_cigar2qlen(int n_cigar, const uint32_t *cigar)$/;"	f
bam_cigar2rlen	src/utils/htslib/sam.c	/^int bam_cigar2rlen(int n_cigar, const uint32_t *cigar)$/;"	f
bam_cigar_gen	src/utils/htslib/htslib/sam.h	88;"	d
bam_cigar_len	src/utils/htslib/cram/cram_samtools.h	44;"	d
bam_cigar_op	src/utils/htslib/htslib/sam.h	81;"	d
bam_cigar_opchr	src/utils/htslib/htslib/sam.h	87;"	d
bam_cigar_oplen	src/utils/htslib/htslib/sam.h	82;"	d
bam_cigar_type	src/utils/htslib/htslib/sam.h	109;"	d
bam_construct_seq	src/utils/htslib/cram/cram_samtools.c	/^int bam_construct_seq(bam_seq_t **bp, size_t extra_len,$/;"	f
bam_copy1	src/utils/htslib/sam.c	/^bam1_t *bam_copy1(bam1_t *bdst, const bam1_t *bsrc)$/;"	f
bam_destroy1	src/utils/htslib/sam.c	/^void bam_destroy1(bam1_t *b)$/;"	f
bam_dup	src/utils/htslib/cram/cram_samtools.h	55;"	d
bam_dup1	src/utils/htslib/sam.c	/^bam1_t *bam_dup1(const bam1_t *bsrc)$/;"	f
bam_endpos	src/utils/htslib/sam.c	/^int32_t bam_endpos(const bam1_t *b)$/;"	f
bam_flag	src/utils/htslib/cram/cram_samtools.h	45;"	d
bam_flag2str	src/utils/htslib/sam.c	/^char *bam_flag2str(int flag)$/;"	f
bam_flag_swap	src/utils/htslib/cram/cram_structs.h	/^    unsigned int bam_flag_swap[0x1000]; \/\/ cram -> bam flags$/;"	m	struct:cram_fd
bam_free	src/utils/htslib/cram/cram_samtools.h	57;"	d
bam_get_aux	src/utils/htslib/htslib/sam.h	247;"	d
bam_get_cigar	src/utils/htslib/htslib/sam.h	224;"	d
bam_get_l_aux	src/utils/htslib/htslib/sam.h	253;"	d
bam_get_qname	src/utils/htslib/htslib/sam.h	214;"	d
bam_get_qual	src/utils/htslib/htslib/sam.h	241;"	d
bam_get_seq	src/utils/htslib/htslib/sam.h	235;"	d
bam_hdr_destroy	src/utils/htslib/sam.c	/^void bam_hdr_destroy(bam_hdr_t *h)$/;"	f
bam_hdr_dup	src/utils/htslib/sam.c	/^bam_hdr_t *bam_hdr_dup(const bam_hdr_t *h0)$/;"	f
bam_hdr_init	src/utils/htslib/sam.c	/^bam_hdr_t *bam_hdr_init()$/;"	f
bam_hdr_read	src/utils/htslib/sam.c	/^bam_hdr_t *bam_hdr_read(BGZF *fp)$/;"	f
bam_hdr_t	src/utils/htslib/htslib/sam.h	/^} bam_hdr_t;$/;"	t	typeref:struct:__anon38
bam_hdr_write	src/utils/htslib/sam.c	/^int bam_hdr_write(BGZF *fp, const bam_hdr_t *h)$/;"	f
bam_header_to_cram	src/utils/htslib/cram/cram_samtools.c	/^SAM_hdr *bam_header_to_cram(bam_hdr_t *h) {$/;"	f
bam_index	src/utils/htslib/sam.c	/^static hts_idx_t *bam_index(BGZF *fp, int min_shift)$/;"	f	file:
bam_index_build	src/utils/htslib/htslib/sam.h	317;"	d
bam_index_build	src/utils/htslib/sam.c	/^int bam_index_build(const char *fn, int min_shift)$/;"	f
bam_index_build	src/utils/htslib/sam.c	556;"	d	file:
bam_index_load	src/utils/htslib/htslib/sam.h	316;"	d
bam_init1	src/utils/htslib/sam.c	/^bam1_t *bam_init1()$/;"	f
bam_ins_size	src/utils/htslib/cram/cram_samtools.h	42;"	d
bam_is_mrev	src/utils/htslib/htslib/sam.h	208;"	d
bam_is_rev	src/utils/htslib/htslib/sam.h	202;"	d
bam_itr_destroy	src/utils/htslib/htslib/sam.h	309;"	d
bam_itr_next	src/utils/htslib/htslib/sam.h	312;"	d
bam_itr_queryi	src/utils/htslib/htslib/sam.h	310;"	d
bam_itr_querys	src/utils/htslib/htslib/sam.h	311;"	d
bam_list_lock	src/utils/htslib/cram/cram_structs.h	/^    pthread_mutex_t bam_list_lock;$/;"	m	struct:cram_fd
bam_map_qual	src/utils/htslib/cram/cram_samtools.h	47;"	d
bam_mate_pos	src/utils/htslib/cram/cram_samtools.h	40;"	d
bam_mate_ref	src/utils/htslib/cram/cram_samtools.h	41;"	d
bam_mplp_auto	src/utils/htslib/sam.c	/^int bam_mplp_auto(bam_mplp_t iter, int *_tid, int *_pos, int *n_plp, const bam_pileup1_t **plp)$/;"	f
bam_mplp_constructor	src/utils/htslib/sam.c	/^void bam_mplp_constructor(bam_mplp_t iter,$/;"	f
bam_mplp_destroy	src/utils/htslib/sam.c	/^void bam_mplp_destroy(bam_mplp_t iter)$/;"	f
bam_mplp_destructor	src/utils/htslib/sam.c	/^void bam_mplp_destructor(bam_mplp_t iter,$/;"	f
bam_mplp_init	src/utils/htslib/sam.c	/^bam_mplp_t bam_mplp_init(int n, bam_plp_auto_f func, void **data)$/;"	f
bam_mplp_init_overlaps	src/utils/htslib/sam.c	/^void bam_mplp_init_overlaps(bam_mplp_t iter)$/;"	f
bam_mplp_reset	src/utils/htslib/sam.c	/^void bam_mplp_reset(bam_mplp_t iter)$/;"	f
bam_mplp_set_maxcnt	src/utils/htslib/sam.c	/^void bam_mplp_set_maxcnt(bam_mplp_t iter, int maxcnt)$/;"	f
bam_mplp_t	src/utils/htslib/htslib/sam.h	/^typedef struct __bam_mplp_t *bam_mplp_t;$/;"	t	typeref:struct:__bam_mplp_t
bam_name	src/utils/htslib/cram/cram_samtools.h	49;"	d
bam_name2id	src/utils/htslib/sam.c	/^int bam_name2id(bam_hdr_t *h, const char *ref)$/;"	f
bam_name_len	src/utils/htslib/cram/cram_samtools.h	48;"	d
bam_pileup1_t	src/utils/htslib/htslib/sam.h	/^} bam_pileup1_t;$/;"	t	typeref:struct:__anon42
bam_pileup_cd	src/utils/htslib/htslib/sam.h	/^} bam_pileup_cd;$/;"	t	typeref:union:__anon41
bam_plp_auto	src/utils/htslib/sam.c	/^const bam_pileup1_t *bam_plp_auto(bam_plp_t iter, int *_tid, int *_pos, int *_n_plp)$/;"	f
bam_plp_auto_f	src/utils/htslib/htslib/sam.h	/^typedef int (*bam_plp_auto_f)(void *data, bam1_t *b);$/;"	t
bam_plp_constructor	src/utils/htslib/sam.c	/^void bam_plp_constructor(bam_plp_t plp,$/;"	f
bam_plp_destroy	src/utils/htslib/sam.c	/^void bam_plp_destroy(bam_plp_t iter)$/;"	f
bam_plp_destructor	src/utils/htslib/sam.c	/^void bam_plp_destructor(bam_plp_t plp,$/;"	f
bam_plp_init	src/utils/htslib/sam.c	/^bam_plp_t bam_plp_init(bam_plp_auto_f func, void *data)$/;"	f
bam_plp_init_overlaps	src/utils/htslib/sam.c	/^void bam_plp_init_overlaps(bam_plp_t iter)$/;"	f
bam_plp_next	src/utils/htslib/sam.c	/^const bam_pileup1_t *bam_plp_next(bam_plp_t iter, int *_tid, int *_pos, int *_n_plp)$/;"	f
bam_plp_push	src/utils/htslib/sam.c	/^int bam_plp_push(bam_plp_t iter, const bam1_t *b)$/;"	f
bam_plp_reset	src/utils/htslib/sam.c	/^void bam_plp_reset(bam_plp_t iter)$/;"	f
bam_plp_set_maxcnt	src/utils/htslib/sam.c	/^void bam_plp_set_maxcnt(bam_plp_t iter, int maxcnt)$/;"	f
bam_plp_t	src/utils/htslib/htslib/sam.h	/^typedef struct __bam_plp_t *bam_plp_t;$/;"	t	typeref:struct:__bam_plp_t
bam_pos	src/utils/htslib/cram/cram_samtools.h	39;"	d
bam_qual	src/utils/htslib/cram/cram_samtools.h	50;"	d
bam_read1	src/utils/htslib/sam.c	/^int bam_read1(BGZF *fp, bam1_t *b)$/;"	f
bam_readrec	src/utils/htslib/sam.c	/^static int bam_readrec(BGZF *fp, void *ignored, void *bv, int *tid, int *beg, int *end)$/;"	f	file:
bam_ref	src/utils/htslib/cram/cram_samtools.h	38;"	d
bam_reg2bin	src/utils/htslib/cram/cram_samtools.h	59;"	d
bam_seq	src/utils/htslib/cram/cram_samtools.h	51;"	d
bam_seq_len	src/utils/htslib/cram/cram_samtools.h	43;"	d
bam_seq_t	src/utils/htslib/cram/cram_samtools.h	/^typedef bam1_t bam_seq_t;$/;"	t
bam_seqi	src/utils/htslib/htslib/sam.h	260;"	d
bam_set_blk_size	src/utils/htslib/cram/cram_samtools.h	36;"	d
bam_str2flag	src/utils/htslib/sam.c	/^int bam_str2flag(const char *str)$/;"	f
bam_write1	src/utils/htslib/sam.c	/^int bam_write1(BGZF *fp, const bam1_t *b)$/;"	f
bams	src/utils/htslib/cram/cram_structs.h	/^    bam_seq_t **bams;$/;"	m	struct:cram_container
bams	src/utils/htslib/cram/cram_structs.h	/^    bam_seq_t **bams;$/;"	m	struct:spare_bams
bamtobed_IsCorrectMappingForBEDPE	src/bamToBed/bamToBed.cpp	/^bool bamtobed_IsCorrectMappingForBEDPE (const BamAlignment &bam) {$/;"	f
bamtobed_help	src/bamToBed/bamToBed.cpp	/^void bamtobed_help(void) {$/;"	f
bamtobed_main	src/bamToBed/bamToBed.cpp	/^int bamtobed_main(int argc, char* argv[]) {$/;"	f
bamtofastq_help	src/bamToFastq/bamToFastqMain.cpp	/^void bamtofastq_help(void) {$/;"	f
bamtofastq_main	src/bamToFastq/bamToFastqMain.cpp	/^int bamtofastq_main(int argc, char* argv[]) {$/;"	f
base	src/utils/htslib/cram/cram_structs.h	/^	    int base;    \/\/ actual base & qual$/;"	m	struct:cram_feature::__anon83::__anon85
base	src/utils/htslib/cram/cram_structs.h	/^	    int base;    \/\/ substitution code$/;"	m	struct:cram_feature::__anon83::__anon84
base	src/utils/htslib/cram/cram_structs.h	/^	    int base; \/\/ insertion single base$/;"	m	struct:cram_feature::__anon83::__anon90
base	src/utils/htslib/hfile.c	/^	hFILE base;$/;"	m	struct:__anon110	file:
base	src/utils/htslib/hfile.c	/^    hFILE base;$/;"	m	struct:__anon109	file:
base	src/utils/htslib/hfile.c	/^    hFILE base;$/;"	m	struct:__anon111	file:
base	src/utils/htslib/hfile_libcurl.c	/^    hFILE base;$/;"	m	struct:__anon102	file:
base	src/utils/htslib/hfile_net.c	/^    hFILE base;$/;"	m	struct:__anon44	file:
base	src/utils/htslib/multipart.c	/^    hFILE base;$/;"	m	struct:__anon106	file:
base64_kput	src/utils/htslib/hfile_s3.c	/^static void base64_kput(const unsigned char *data, size_t len, kstring_t *str)$/;"	f	file:
base_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *base_blk;$/;"	m	struct:cram_slice
bases_per_line	src/utils/htslib/cram/cram_structs.h	/^    int bases_per_line;$/;"	m	struct:ref_entry
bases_per_slice	src/utils/htslib/cram/cram_structs.h	/^    int bases_per_slice;$/;"	m	struct:cram_fd
bc	src/utils/htslib/htslib/tbx.h	/^    int32_t sc, bc, ec; \/\/ seq col., beg col. and end col.$/;"	m	struct:__anon36
bcf	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
bcf1_sync	src/utils/htslib/vcf.c	/^static int bcf1_sync(bcf1_t *line)$/;"	f	file:
bcf1_sync_alleles	src/utils/htslib/vcf.c	/^static inline void bcf1_sync_alleles(bcf1_t *line, kstring_t *str)$/;"	f	file:
bcf1_sync_filter	src/utils/htslib/vcf.c	/^static inline void bcf1_sync_filter(bcf1_t *line, kstring_t *str)$/;"	f	file:
bcf1_sync_id	src/utils/htslib/vcf.c	/^static inline void bcf1_sync_id(bcf1_t *line, kstring_t *str)$/;"	f	file:
bcf1_sync_info	src/utils/htslib/vcf.c	/^static inline void bcf1_sync_info(bcf1_t *line, kstring_t *str)$/;"	f	file:
bcf1_t	src/utils/htslib/htslib/vcf.h	/^} bcf1_t;$/;"	t	typeref:struct:__anon27
bcf_acgt2int	src/utils/htslib/htslib/vcfutils.h	/^static inline int bcf_acgt2int(char c)$/;"	f
bcf_add_filter	src/utils/htslib/vcf.c	/^int bcf_add_filter(const bcf_hdr_t *hdr, bcf1_t *line, int flt_id)$/;"	f
bcf_add_id	src/utils/htslib/vcf.c	/^int bcf_add_id(const bcf_hdr_t *hdr, bcf1_t *line, const char *id)$/;"	f
bcf_alleles2gt	src/utils/htslib/htslib/vcf.h	616;"	d
bcf_calc_ac	src/utils/htslib/vcfutils.c	/^int bcf_calc_ac(const bcf_hdr_t *header, bcf1_t *line, int *ac, int which)$/;"	f
bcf_clear	src/utils/htslib/vcf.c	/^void bcf_clear(bcf1_t *v)$/;"	f
bcf_clear1	src/utils/htslib/htslib/vcf.h	248;"	d
bcf_close	src/utils/htslib/htslib/vcf.h	287;"	d
bcf_copy	src/utils/htslib/vcf.c	/^bcf1_t *bcf_copy(bcf1_t *dst, bcf1_t *src)$/;"	f
bcf_dec_int1	src/utils/htslib/htslib/vcf.h	/^static inline int32_t bcf_dec_int1(const uint8_t *p, int type, uint8_t **q)$/;"	f
bcf_dec_size	src/utils/htslib/htslib/vcf.h	/^static inline int32_t bcf_dec_size(const uint8_t *p, uint8_t **q, int *type)$/;"	f
bcf_dec_size_safe	src/utils/htslib/vcf.c	/^static int bcf_dec_size_safe(uint8_t *p, uint8_t *end, uint8_t **q,$/;"	f	file:
bcf_dec_t	src/utils/htslib/htslib/vcf.h	/^} bcf_dec_t;$/;"	t	typeref:struct:__anon26
bcf_dec_typed_int1	src/utils/htslib/htslib/vcf.h	/^static inline int32_t bcf_dec_typed_int1(const uint8_t *p, uint8_t **q)$/;"	f
bcf_dec_typed_int1_safe	src/utils/htslib/vcf.c	/^static int bcf_dec_typed_int1_safe(uint8_t *p, uint8_t *end, uint8_t **q,$/;"	f	file:
bcf_destroy	src/utils/htslib/vcf.c	/^void bcf_destroy(bcf1_t *v)$/;"	f
bcf_destroy1	src/utils/htslib/htslib/vcf.h	245;"	d
bcf_dup	src/utils/htslib/vcf.c	/^bcf1_t *bcf_dup(bcf1_t *src)$/;"	f
bcf_empty	src/utils/htslib/vcf.c	/^void bcf_empty(bcf1_t *v)$/;"	f
bcf_empty1	src/utils/htslib/htslib/vcf.h	246;"	d
bcf_enc_int1	src/utils/htslib/htslib/vcf.h	/^static inline void bcf_enc_int1(kstring_t *s, int32_t x)$/;"	f
bcf_enc_inttype	src/utils/htslib/htslib/vcf.h	/^static inline int bcf_enc_inttype(long x)$/;"	f
bcf_enc_size	src/utils/htslib/htslib/vcf.h	/^static inline void bcf_enc_size(kstring_t *s, int size, int type)$/;"	f
bcf_enc_vchar	src/utils/htslib/vcf.c	/^void bcf_enc_vchar(kstring_t *s, int l, const char *a)$/;"	f
bcf_enc_vfloat	src/utils/htslib/vcf.c	/^void bcf_enc_vfloat(kstring_t *s, int n, float *a)$/;"	f
bcf_enc_vint	src/utils/htslib/vcf.c	/^void bcf_enc_vint(kstring_t *s, int n, int32_t *a, int wsize)$/;"	f
bcf_float_is_missing	src/utils/htslib/htslib/vcf.h	/^static inline int bcf_float_is_missing(float f)$/;"	f
bcf_float_is_vector_end	src/utils/htslib/htslib/vcf.h	/^static inline int bcf_float_is_vector_end(float f)$/;"	f
bcf_float_missing	src/utils/htslib/vcf.c	/^uint32_t bcf_float_missing    = 0x7F800001;$/;"	v
bcf_float_set	src/utils/htslib/htslib/vcf.h	/^static inline void bcf_float_set(float *ptr, uint32_t value)$/;"	f
bcf_float_set_missing	src/utils/htslib/htslib/vcf.h	885;"	d
bcf_float_set_vector_end	src/utils/htslib/htslib/vcf.h	884;"	d
bcf_float_vector_end	src/utils/htslib/vcf.c	/^uint32_t bcf_float_vector_end = 0x7F800002;$/;"	v
bcf_fmt_array	src/utils/htslib/vcf.c	/^void bcf_fmt_array(kstring_t *s, int n, int type, void *data)$/;"	f
bcf_fmt_sized_array	src/utils/htslib/vcf.c	/^uint8_t *bcf_fmt_sized_array(kstring_t *s, uint8_t *ptr)$/;"	f
bcf_fmt_t	src/utils/htslib/htslib/vcf.h	/^} bcf_fmt_t;$/;"	t	typeref:struct:__anon23
bcf_format_gt	src/utils/htslib/htslib/vcf.h	/^static inline void bcf_format_gt(bcf_fmt_t *fmt, int isample, kstring_t *str)$/;"	f
bcf_get_fmt	src/utils/htslib/vcf.c	/^bcf_fmt_t *bcf_get_fmt(const bcf_hdr_t *hdr, bcf1_t *line, const char *key)$/;"	f
bcf_get_fmt_id	src/utils/htslib/vcf.c	/^bcf_fmt_t *bcf_get_fmt_id(bcf1_t *line, const int id)$/;"	f
bcf_get_format_char	src/utils/htslib/htslib/vcf.h	726;"	d
bcf_get_format_float	src/utils/htslib/htslib/vcf.h	725;"	d
bcf_get_format_int32	src/utils/htslib/htslib/vcf.h	724;"	d
bcf_get_format_string	src/utils/htslib/vcf.c	/^int bcf_get_format_string(const bcf_hdr_t *hdr, bcf1_t *line, const char *tag, char ***dst, int *ndst)$/;"	f
bcf_get_format_values	src/utils/htslib/vcf.c	/^int bcf_get_format_values(const bcf_hdr_t *hdr, bcf1_t *line, const char *tag, void **dst, int *ndst, int type)$/;"	f
bcf_get_genotypes	src/utils/htslib/htslib/vcf.h	727;"	d
bcf_get_info	src/utils/htslib/vcf.c	/^bcf_info_t *bcf_get_info(const bcf_hdr_t *hdr, bcf1_t *line, const char *key)$/;"	f
bcf_get_info_flag	src/utils/htslib/htslib/vcf.h	669;"	d
bcf_get_info_float	src/utils/htslib/htslib/vcf.h	667;"	d
bcf_get_info_id	src/utils/htslib/vcf.c	/^bcf_info_t *bcf_get_info_id(bcf1_t *line, const int id)$/;"	f
bcf_get_info_int32	src/utils/htslib/htslib/vcf.h	666;"	d
bcf_get_info_string	src/utils/htslib/htslib/vcf.h	668;"	d
bcf_get_info_values	src/utils/htslib/vcf.c	/^int bcf_get_info_values(const bcf_hdr_t *hdr, bcf1_t *line, const char *tag, void **dst, int *ndst, int type)$/;"	f
bcf_get_variant_type	src/utils/htslib/vcf.c	/^int bcf_get_variant_type(bcf1_t *rec, int ith_allele)$/;"	f
bcf_get_variant_types	src/utils/htslib/vcf.c	/^int bcf_get_variant_types(bcf1_t *rec)$/;"	f
bcf_gt2alleles	src/utils/htslib/htslib/vcf.h	/^    static inline void bcf_gt2alleles(int igt, int *a, int *b)$/;"	f
bcf_gt_allele	src/utils/htslib/htslib/vcf.h	613;"	d
bcf_gt_is_missing	src/utils/htslib/htslib/vcf.h	611;"	d
bcf_gt_is_phased	src/utils/htslib/htslib/vcf.h	612;"	d
bcf_gt_missing	src/utils/htslib/htslib/vcf.h	610;"	d
bcf_gt_phased	src/utils/htslib/htslib/vcf.h	608;"	d
bcf_gt_type	src/utils/htslib/vcfutils.c	/^int bcf_gt_type(bcf_fmt_t *fmt_ptr, int isample, int *_ial, int *_jal)$/;"	f
bcf_gt_unphased	src/utils/htslib/htslib/vcf.h	609;"	d
bcf_has_filter	src/utils/htslib/vcf.c	/^int bcf_has_filter(const bcf_hdr_t *hdr, bcf1_t *line, char *filter)$/;"	f
bcf_hdr_add_hrec	src/utils/htslib/vcf.c	/^int bcf_hdr_add_hrec(bcf_hdr_t *hdr, bcf_hrec_t *hrec)$/;"	f
bcf_hdr_add_sample	src/utils/htslib/vcf.c	/^int bcf_hdr_add_sample(bcf_hdr_t *h, const char *s)$/;"	f
bcf_hdr_append	src/utils/htslib/vcf.c	/^int bcf_hdr_append(bcf_hdr_t *hdr, const char *line)$/;"	f
bcf_hdr_check_sanity	src/utils/htslib/vcf.c	/^void bcf_hdr_check_sanity(bcf_hdr_t *hdr)$/;"	f
bcf_hdr_combine	src/utils/htslib/vcf.c	/^int bcf_hdr_combine(bcf_hdr_t *dst, const bcf_hdr_t *src)$/;"	f
bcf_hdr_destroy	src/utils/htslib/vcf.c	/^void bcf_hdr_destroy(bcf_hdr_t *h)$/;"	f
bcf_hdr_dup	src/utils/htslib/vcf.c	/^bcf_hdr_t *bcf_hdr_dup(const bcf_hdr_t *hdr)$/;"	f
bcf_hdr_fmt_text	src/utils/htslib/vcf.c	/^char *bcf_hdr_fmt_text(const bcf_hdr_t *hdr, int is_bcf, int *len)$/;"	f
bcf_hdr_format	src/utils/htslib/vcf.c	/^int bcf_hdr_format(const bcf_hdr_t *hdr, int is_bcf, kstring_t *str)$/;"	f
bcf_hdr_get_hrec	src/utils/htslib/vcf.c	/^bcf_hrec_t *bcf_hdr_get_hrec(const bcf_hdr_t *hdr, int type, const char *key, const char *value, const char *str_class)$/;"	f
bcf_hdr_get_version	src/utils/htslib/vcf.c	/^const char *bcf_hdr_get_version(const bcf_hdr_t *hdr)$/;"	f
bcf_hdr_id2coltype	src/utils/htslib/htslib/vcf.h	774;"	d
bcf_hdr_id2hrec	src/utils/htslib/htslib/vcf.h	776;"	d
bcf_hdr_id2int	src/utils/htslib/vcf.c	/^int bcf_hdr_id2int(const bcf_hdr_t *h, int which, const char *id)$/;"	f
bcf_hdr_id2length	src/utils/htslib/htslib/vcf.h	771;"	d
bcf_hdr_id2name	src/utils/htslib/htslib/vcf.h	/^    static inline const char *bcf_hdr_id2name(const bcf_hdr_t *hdr, int rid) { return hdr->id[BCF_DT_CTG][rid].key; }$/;"	f
bcf_hdr_id2number	src/utils/htslib/htslib/vcf.h	772;"	d
bcf_hdr_id2type	src/utils/htslib/htslib/vcf.h	773;"	d
bcf_hdr_idinfo_exists	src/utils/htslib/htslib/vcf.h	775;"	d
bcf_hdr_init	src/utils/htslib/vcf.c	/^bcf_hdr_t *bcf_hdr_init(const char *mode)$/;"	f
bcf_hdr_int2id	src/utils/htslib/htslib/vcf.h	747;"	d
bcf_hdr_merge	src/utils/htslib/vcf.c	/^bcf_hdr_t *bcf_hdr_merge(bcf_hdr_t *dst, const bcf_hdr_t *src)$/;"	f
bcf_hdr_name2id	src/utils/htslib/htslib/vcf.h	/^    static inline int bcf_hdr_name2id(const bcf_hdr_t *hdr, const char *id) { return bcf_hdr_id2int(hdr, BCF_DT_CTG, id); }$/;"	f
bcf_hdr_nsamples	src/utils/htslib/htslib/vcf.h	474;"	d
bcf_hdr_parse	src/utils/htslib/vcf.c	/^int bcf_hdr_parse(bcf_hdr_t *hdr, char *htxt)$/;"	f
bcf_hdr_parse_line	src/utils/htslib/vcf.c	/^bcf_hrec_t *bcf_hdr_parse_line(const bcf_hdr_t *h, const char *line, int *len)$/;"	f
bcf_hdr_parse_sample_line	src/utils/htslib/vcf.c	/^int bcf_hdr_parse_sample_line(bcf_hdr_t *h, const char *str)$/;"	f
bcf_hdr_printf	src/utils/htslib/vcf.c	/^int bcf_hdr_printf(bcf_hdr_t *hdr, const char *fmt, ...)$/;"	f
bcf_hdr_read	src/utils/htslib/vcf.c	/^bcf_hdr_t *bcf_hdr_read(htsFile *hfp)$/;"	f
bcf_hdr_register_hrec	src/utils/htslib/vcf.c	/^int bcf_hdr_register_hrec(bcf_hdr_t *hdr, bcf_hrec_t *hrec)$/;"	f
bcf_hdr_remove	src/utils/htslib/vcf.c	/^void bcf_hdr_remove(bcf_hdr_t *hdr, int type, const char *key)$/;"	f
bcf_hdr_seqnames	src/utils/htslib/vcf.c	/^const char **bcf_hdr_seqnames(const bcf_hdr_t *h, int *n)$/;"	f
bcf_hdr_set	src/utils/htslib/vcf.c	/^int bcf_hdr_set(bcf_hdr_t *hdr, const char *fname)$/;"	f
bcf_hdr_set_idx	src/utils/htslib/vcf.c	/^static int bcf_hdr_set_idx(bcf_hdr_t *hdr, int dict_type, const char *tag, bcf_idinfo_t *idinfo)$/;"	f	file:
bcf_hdr_set_samples	src/utils/htslib/vcf.c	/^int bcf_hdr_set_samples(bcf_hdr_t *hdr, const char *samples, int is_file)$/;"	f
bcf_hdr_set_version	src/utils/htslib/vcf.c	/^void bcf_hdr_set_version(bcf_hdr_t *hdr, const char *version)$/;"	f
bcf_hdr_subset	src/utils/htslib/vcf.c	/^bcf_hdr_t *bcf_hdr_subset(const bcf_hdr_t *h0, int n, char *const* samples, int *imap)$/;"	f
bcf_hdr_sync	src/utils/htslib/vcf.c	/^int bcf_hdr_sync(bcf_hdr_t *h)$/;"	f
bcf_hdr_t	src/utils/htslib/htslib/vcf.h	/^} bcf_hdr_t;$/;"	t	typeref:struct:__anon21
bcf_hdr_write	src/utils/htslib/vcf.c	/^int bcf_hdr_write(htsFile *hfp, bcf_hdr_t *h)$/;"	f
bcf_header_debug	src/utils/htslib/vcf.c	/^void bcf_header_debug(bcf_hdr_t *hdr)$/;"	f
bcf_hrec_add_key	src/utils/htslib/vcf.c	/^void bcf_hrec_add_key(bcf_hrec_t *hrec, const char *str, int len)$/;"	f
bcf_hrec_debug	src/utils/htslib/vcf.c	/^void bcf_hrec_debug(FILE *fp, bcf_hrec_t *hrec)$/;"	f
bcf_hrec_destroy	src/utils/htslib/vcf.c	/^void bcf_hrec_destroy(bcf_hrec_t *hrec)$/;"	f
bcf_hrec_dup	src/utils/htslib/vcf.c	/^bcf_hrec_t *bcf_hrec_dup(bcf_hrec_t *hrec)$/;"	f
bcf_hrec_find_key	src/utils/htslib/vcf.c	/^int bcf_hrec_find_key(bcf_hrec_t *hrec, const char *key)$/;"	f
bcf_hrec_format	src/utils/htslib/vcf.c	/^void bcf_hrec_format(const bcf_hrec_t *hrec, kstring_t *str)$/;"	f
bcf_hrec_set_val	src/utils/htslib/vcf.c	/^void bcf_hrec_set_val(bcf_hrec_t *hrec, int i, const char *str, int len, int is_quoted)$/;"	f
bcf_hrec_t	src/utils/htslib/htslib/vcf.h	/^} bcf_hrec_t;$/;"	t	typeref:struct:__anon18
bcf_idinfo_def	src/utils/htslib/vcf.c	/^static bcf_idinfo_t bcf_idinfo_def = { .info = { 15, 15, 15 }, .hrec = { NULL, NULL, NULL}, .id = -1 };$/;"	v	file:
bcf_idinfo_t	src/utils/htslib/htslib/vcf.h	/^} bcf_idinfo_t;$/;"	t	typeref:struct:__anon19
bcf_idpair_t	src/utils/htslib/htslib/vcf.h	/^} bcf_idpair_t;$/;"	t	typeref:struct:__anon20
bcf_idx	src/utils/htslib/htslib/synced_bcf_reader.h	/^    hts_idx_t *bcf_idx;$/;"	m	struct:__anon31
bcf_ij2G	src/utils/htslib/htslib/vcfutils.h	132;"	d
bcf_index	src/utils/htslib/vcf.c	/^hts_idx_t *bcf_index(htsFile *fp, int min_shift)$/;"	f
bcf_index_build	src/utils/htslib/vcf.c	/^int bcf_index_build(const char *fn, int min_shift)$/;"	f
bcf_index_build2	src/utils/htslib/vcf.c	/^int bcf_index_build2(const char *fn, const char *fnidx, int min_shift)$/;"	f
bcf_index_build3	src/utils/htslib/vcf.c	/^int bcf_index_build3(const char *fn, const char *fnidx, int min_shift, int n_threads)$/;"	f
bcf_index_load	src/utils/htslib/htslib/vcf.h	798;"	d
bcf_index_load2	src/utils/htslib/vcf.c	/^hts_idx_t *bcf_index_load2(const char *fn, const char *fnidx)$/;"	f
bcf_index_seqnames	src/utils/htslib/htslib/vcf.h	799;"	d
bcf_info_t	src/utils/htslib/htslib/vcf.h	/^} bcf_info_t;$/;"	t	typeref:struct:__anon24
bcf_init	src/utils/htslib/vcf.c	/^bcf1_t *bcf_init()$/;"	f
bcf_init1	src/utils/htslib/htslib/vcf.h	240;"	d
bcf_int16_missing	src/utils/htslib/htslib/vcf.h	873;"	d
bcf_int16_vector_end	src/utils/htslib/htslib/vcf.h	869;"	d
bcf_int2acgt	src/utils/htslib/htslib/vcfutils.h	124;"	d
bcf_int32_missing	src/utils/htslib/htslib/vcf.h	874;"	d
bcf_int32_vector_end	src/utils/htslib/htslib/vcf.h	870;"	d
bcf_int8_missing	src/utils/htslib/htslib/vcf.h	872;"	d
bcf_int8_vector_end	src/utils/htslib/htslib/vcf.h	868;"	d
bcf_is_snp	src/utils/htslib/vcf.c	/^int bcf_is_snp(bcf1_t *v)$/;"	f
bcf_itr_destroy	src/utils/htslib/htslib/vcf.h	794;"	d
bcf_itr_next	src/utils/htslib/htslib/vcf.h	797;"	d
bcf_itr_queryi	src/utils/htslib/htslib/vcf.h	795;"	d
bcf_itr_querys	src/utils/htslib/htslib/vcf.h	796;"	d
bcf_open	src/utils/htslib/htslib/vcf.h	285;"	d
bcf_read	src/utils/htslib/vcf.c	/^int bcf_read(htsFile *fp, const bcf_hdr_t *h, bcf1_t *v)$/;"	f
bcf_read1	src/utils/htslib/htslib/vcf.h	241;"	d
bcf_read1_core	src/utils/htslib/vcf.c	/^static inline int bcf_read1_core(BGZF *fp, bcf1_t *v)$/;"	f	file:
bcf_read_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^    header_error, no_eof, no_memory, vcf_parse_error, bcf_read_error$/;"	e	enum:__anon32
bcf_readrec	src/utils/htslib/vcf.c	/^int bcf_readrec(BGZF *fp, void *null, void *vv, int *tid, int *beg, int *end)$/;"	f
bcf_record_check	src/utils/htslib/vcf.c	/^static int bcf_record_check(const bcf_hdr_t *hdr, bcf1_t *rec) {$/;"	f	file:
bcf_remove_allele_set	src/utils/htslib/vcfutils.c	/^int bcf_remove_allele_set(const bcf_hdr_t *header, bcf1_t *line, const struct kbitset_t *rm_set)$/;"	f
bcf_remove_alleles	src/utils/htslib/vcfutils.c	/^void bcf_remove_alleles(const bcf_hdr_t *header, bcf1_t *line, int rm_mask)$/;"	f
bcf_remove_filter	src/utils/htslib/vcf.c	/^int bcf_remove_filter(const bcf_hdr_t *hdr, bcf1_t *line, int flt_id, int pass)$/;"	f
bcf_seqname	src/utils/htslib/htslib/vcf.h	/^    static inline const char *bcf_seqname(const bcf_hdr_t *hdr, bcf1_t *rec) { return hdr->id[BCF_DT_CTG][rec->rid].key; }$/;"	f
bcf_set_variant_type	src/utils/htslib/vcf.c	/^static void bcf_set_variant_type(const char *ref, const char *alt, variant_t *var)$/;"	f	file:
bcf_set_variant_types	src/utils/htslib/vcf.c	/^static void bcf_set_variant_types(bcf1_t *b)$/;"	f	file:
bcf_sr_add_reader	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_add_reader(bcf_srs_t *files, const char *fname)$/;"	f
bcf_sr_destroy	src/utils/htslib/synced_bcf_reader.c	/^void bcf_sr_destroy(bcf_srs_t *files)$/;"	f
bcf_sr_destroy1	src/utils/htslib/synced_bcf_reader.c	/^static void bcf_sr_destroy1(bcf_sr_t *reader)$/;"	f	file:
bcf_sr_destroy_threads	src/utils/htslib/synced_bcf_reader.c	/^void bcf_sr_destroy_threads(bcf_srs_t *files) {$/;"	f
bcf_sr_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^bcf_sr_error;$/;"	t	typeref:enum:__anon32
bcf_sr_get_header	src/utils/htslib/htslib/synced_bcf_reader.h	235;"	d
bcf_sr_get_line	src/utils/htslib/htslib/synced_bcf_reader.h	232;"	d
bcf_sr_get_reader	src/utils/htslib/htslib/synced_bcf_reader.h	236;"	d
bcf_sr_has_line	src/utils/htslib/htslib/synced_bcf_reader.h	231;"	d
bcf_sr_init	src/utils/htslib/synced_bcf_reader.c	/^bcf_srs_t *bcf_sr_init(void)$/;"	f
bcf_sr_init_scores	src/utils/htslib/bcf_sr_sort.c	/^static void bcf_sr_init_scores(sr_sort_t *srt)$/;"	f	file:
bcf_sr_next_line	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_next_line(bcf_srs_t *files)$/;"	f
bcf_sr_opt_t	src/utils/htslib/htslib/synced_bcf_reader.h	/^bcf_sr_opt_t;$/;"	t	typeref:enum:__anon30
bcf_sr_region_done	src/utils/htslib/htslib/synced_bcf_reader.h	234;"	d
bcf_sr_regions_destroy	src/utils/htslib/synced_bcf_reader.c	/^void bcf_sr_regions_destroy(bcf_sr_regions_t *reg)$/;"	f
bcf_sr_regions_flush	src/utils/htslib/synced_bcf_reader.c	/^void bcf_sr_regions_flush(bcf_sr_regions_t *reg)$/;"	f
bcf_sr_regions_init	src/utils/htslib/synced_bcf_reader.c	/^bcf_sr_regions_t *bcf_sr_regions_init(const char *regions, int is_file, int ichr, int ifrom, int ito)$/;"	f
bcf_sr_regions_next	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_regions_next(bcf_sr_regions_t *reg)$/;"	f
bcf_sr_regions_overlap	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_regions_overlap(bcf_sr_regions_t *reg, const char *seq, int start, int end)$/;"	f
bcf_sr_regions_seek	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_regions_seek(bcf_sr_regions_t *reg, const char *seq)$/;"	f
bcf_sr_regions_t	src/utils/htslib/htslib/synced_bcf_reader.h	/^bcf_sr_regions_t;$/;"	t	typeref:struct:_bcf_sr_regions_t
bcf_sr_remove_reader	src/utils/htslib/synced_bcf_reader.c	/^void bcf_sr_remove_reader(bcf_srs_t *files, int i)$/;"	f
bcf_sr_seek	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_seek(bcf_srs_t *readers, const char *seq, int pos)$/;"	f
bcf_sr_seek_start	src/utils/htslib/synced_bcf_reader.c	/^static void bcf_sr_seek_start(bcf_srs_t *readers)$/;"	f	file:
bcf_sr_set_opt	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_set_opt(bcf_srs_t *readers, bcf_sr_opt_t opt, ...)$/;"	f
bcf_sr_set_regions	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_set_regions(bcf_srs_t *readers, const char *regions, int is_file)$/;"	f
bcf_sr_set_samples	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_set_samples(bcf_srs_t *files, const char *fname, int is_file)$/;"	f
bcf_sr_set_targets	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_set_targets(bcf_srs_t *readers, const char *targets, int is_file, int alleles)$/;"	f
bcf_sr_set_threads	src/utils/htslib/synced_bcf_reader.c	/^int bcf_sr_set_threads(bcf_srs_t *files, int n_threads)$/;"	f
bcf_sr_sort_destroy	src/utils/htslib/bcf_sr_sort.c	/^void bcf_sr_sort_destroy(sr_sort_t *srt)$/;"	f
bcf_sr_sort_init	src/utils/htslib/bcf_sr_sort.c	/^sr_sort_t *bcf_sr_sort_init(sr_sort_t *srt)$/;"	f
bcf_sr_sort_next	src/utils/htslib/bcf_sr_sort.c	/^int bcf_sr_sort_next(bcf_srs_t *readers, sr_sort_t *srt, const char *chr, int min_pos)$/;"	f
bcf_sr_sort_remove_reader	src/utils/htslib/bcf_sr_sort.c	/^void bcf_sr_sort_remove_reader(bcf_srs_t *readers, sr_sort_t *srt, int i)$/;"	f
bcf_sr_sort_set	src/utils/htslib/bcf_sr_sort.c	/^static void bcf_sr_sort_set(bcf_srs_t *readers, sr_sort_t *srt, const char *chr, int min_pos)$/;"	f	file:
bcf_sr_strerror	src/utils/htslib/synced_bcf_reader.c	/^char *bcf_sr_strerror(int errnum)$/;"	f
bcf_sr_swap_line	src/utils/htslib/htslib/synced_bcf_reader.h	233;"	d
bcf_sr_t	src/utils/htslib/htslib/synced_bcf_reader.h	/^bcf_sr_t;$/;"	t	typeref:struct:__anon31
bcf_srs_t	src/utils/htslib/htslib/synced_bcf_reader.h	/^bcf_srs_t;$/;"	t	typeref:struct:__anon33
bcf_str_missing	src/utils/htslib/htslib/vcf.h	875;"	d
bcf_str_vector_end	src/utils/htslib/htslib/vcf.h	871;"	d
bcf_subset	src/utils/htslib/vcf.c	/^int bcf_subset(const bcf_hdr_t *h, bcf1_t *v, int n, int *imap)$/;"	f
bcf_subset_format	src/utils/htslib/vcf.c	/^int bcf_subset_format(const bcf_hdr_t *hdr, bcf1_t *rec)$/;"	f
bcf_sweep_bwd	src/utils/htslib/vcf_sweep.c	/^bcf1_t *bcf_sweep_bwd(bcf_sweep_t *sw)$/;"	f
bcf_sweep_destroy	src/utils/htslib/vcf_sweep.c	/^void bcf_sweep_destroy(bcf_sweep_t *sw)$/;"	f
bcf_sweep_fwd	src/utils/htslib/vcf_sweep.c	/^bcf1_t *bcf_sweep_fwd(bcf_sweep_t *sw)$/;"	f
bcf_sweep_hdr	src/utils/htslib/vcf_sweep.c	/^bcf_hdr_t *bcf_sweep_hdr(bcf_sweep_t *sw) { return sw->hdr; }$/;"	f
bcf_sweep_init	src/utils/htslib/vcf_sweep.c	/^bcf_sweep_t *bcf_sweep_init(const char *fname)$/;"	f
bcf_sweep_t	src/utils/htslib/htslib/vcf_sweep.h	/^typedef struct _bcf_sweep_t bcf_sweep_t;$/;"	t	typeref:struct:_bcf_sweep_t
bcf_to_vcf	src/utils/htslib/test/test-vcf-api.c	/^void bcf_to_vcf(char *fname)$/;"	f
bcf_translate	src/utils/htslib/vcf.c	/^int bcf_translate(const bcf_hdr_t *dst_hdr, bcf_hdr_t *src_hdr, bcf1_t *line)$/;"	f
bcf_trim_alleles	src/utils/htslib/vcfutils.c	/^int bcf_trim_alleles(const bcf_hdr_t *header, bcf1_t *line)$/;"	f
bcf_type_shift	src/utils/htslib/vcf.c	/^uint8_t bcf_type_shift[] = { 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v
bcf_unpack	src/utils/htslib/vcf.c	/^int bcf_unpack(bcf1_t *b, int which)$/;"	f
bcf_unpack_fmt_core1	src/utils/htslib/vcf.c	/^static inline uint8_t *bcf_unpack_fmt_core1(uint8_t *ptr, int n_sample, bcf_fmt_t *fmt)$/;"	f	file:
bcf_unpack_info_core1	src/utils/htslib/vcf.c	/^static inline uint8_t *bcf_unpack_info_core1(uint8_t *ptr, bcf_info_t *info)$/;"	f	file:
bcf_update_alleles	src/utils/htslib/vcf.c	/^int bcf_update_alleles(const bcf_hdr_t *hdr, bcf1_t *line, const char **alleles, int nals)$/;"	f
bcf_update_alleles_str	src/utils/htslib/vcf.c	/^int bcf_update_alleles_str(const bcf_hdr_t *hdr, bcf1_t *line, const char *alleles_string)$/;"	f
bcf_update_filter	src/utils/htslib/vcf.c	/^int bcf_update_filter(const bcf_hdr_t *hdr, bcf1_t *line, int *flt_ids, int n)$/;"	f
bcf_update_format	src/utils/htslib/vcf.c	/^int bcf_update_format(const bcf_hdr_t *hdr, bcf1_t *line, const char *key, const void *values, int n, int type)$/;"	f
bcf_update_format_char	src/utils/htslib/htslib/vcf.h	600;"	d
bcf_update_format_float	src/utils/htslib/htslib/vcf.h	599;"	d
bcf_update_format_int32	src/utils/htslib/htslib/vcf.h	598;"	d
bcf_update_format_string	src/utils/htslib/vcf.c	/^int bcf_update_format_string(const bcf_hdr_t *hdr, bcf1_t *line, const char *key, const char **values, int n)$/;"	f
bcf_update_genotypes	src/utils/htslib/htslib/vcf.h	601;"	d
bcf_update_id	src/utils/htslib/vcf.c	/^int bcf_update_id(const bcf_hdr_t *hdr, bcf1_t *line, const char *id)$/;"	f
bcf_update_info	src/utils/htslib/vcf.c	/^int bcf_update_info(const bcf_hdr_t *hdr, bcf1_t *line, const char *key, const void *values, int n, int type)$/;"	f
bcf_update_info_flag	src/utils/htslib/htslib/vcf.h	578;"	d
bcf_update_info_float	src/utils/htslib/htslib/vcf.h	577;"	d
bcf_update_info_int32	src/utils/htslib/htslib/vcf.h	576;"	d
bcf_update_info_string	src/utils/htslib/htslib/vcf.h	579;"	d
bcf_write	src/utils/htslib/vcf.c	/^int bcf_write(htsFile *hfp, bcf_hdr_t *h, bcf1_t *v)$/;"	f
bcf_write1	src/utils/htslib/htslib/vcf.h	243;"	d
bed	src/utils/bedFile/bedFile.h	/^    BED bed;$/;"	m	struct:MATE
bed	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
bed12tobed6_help	src/bed12ToBed6/bed12ToBed6.cpp	/^void bed12tobed6_help(void) {$/;"	f
bed12tobed6_main	src/bed12ToBed6/bed12ToBed6.cpp	/^int bed12tobed6_main(int argc, char* argv[]) {$/;"	f
bedCovListMap	src/utils/bedFile/bedFile.h	/^    masterBedCovListMap  bedCovListMap;$/;"	m	class:BedFile
bedCovListVector	src/utils/bedFile/bedFile.h	/^typedef vector<BEDCOVLIST> bedCovListVector;$/;"	t
bedCovMap	src/utils/bedFile/bedFile.h	/^    masterBedCovMap      bedCovMap;$/;"	m	class:BedFile
bedCovVector	src/utils/bedFile/bedFile.h	/^typedef vector<BEDCOV> bedCovVector;$/;"	t
bedFile	src/utils/bedFile/bedFile.h	/^    string bedFile;$/;"	m	class:BedFile
bedFile	src/utils/bedFilePE/bedFilePE.h	/^    string bedFile;$/;"	m	class:BedFilePE
bedFileName	src/split/splitBed.h	/^    std::string bedFileName;$/;"	m	class:BedSplit
bedGraphFile	src/utils/bedGraphFile/bedGraphFile.h	/^    string bedGraphFile;$/;"	m	class:BedGraphFile
bedList	src/utils/bedFile/bedFile.h	/^    bedVector            bedList;$/;"	m	class:BedFile
bedMap	src/utils/bedFile/bedFile.h	/^    masterBedMap         bedMap;$/;"	m	class:BedFile
bedMapEnd1	src/utils/bedFilePE/bedFilePE.h	/^    masterMateMap bedMapEnd1;$/;"	m	class:BedFilePE
bedMapEnd2	src/utils/bedFilePE/bedFilePE.h	/^    masterMateMap bedMapEnd2;$/;"	m	class:BedFilePE
bedMapNoBin	src/utils/bedFile/bedFile.h	/^    masterBedMapNoBin    bedMapNoBin;$/;"	m	class:BedFile
bedType	src/split/splitBed.h	/^    int bedType;$/;"	m	class:BedSplit
bedType	src/utils/bedFile/bedFile.h	/^    unsigned int bedType;  \/\/ 3-6, 12 for BED$/;"	m	class:BedFile
bedType	src/utils/bedFilePE/bedFilePE.h	/^    unsigned int bedType;$/;"	m	class:BedFilePE
bedVector	src/utils/bedFile/bedFile.h	/^typedef vector<BED>    bedVector;$/;"	t
bedgraph_files	src/unionBedGraphs/unionBedGraphs.h	/^    vector<BedGraphFile*>               bedgraph_files;$/;"	m	class:UnionBedGraphs
bedpetobam_MakeBamHeader	src/bedpeToBam/bedpeToBam.cpp	/^void bedpetobam_MakeBamHeader(const string &genomeFile, RefVector &refs, string &header,$/;"	f
bedpetobam_help	src/bedpeToBam/bedpeToBam.cpp	/^void bedpetobam_help(void) {$/;"	f
bedpetobam_main	src/bedpeToBam/bedpeToBam.cpp	/^int bedpetobam_main(int argc, char* argv[]) {$/;"	f
bedpetobam_reg2bin	src/bedpeToBam/bedpeToBam.cpp	/^int bedpetobam_reg2bin(int beg, int end) {$/;"	f
bedtobam_help	src/bedToBam/bedToBam.cpp	/^void bedtobam_help(void) {$/;"	f
bedtobam_main	src/bedToBam/bedToBam.cpp	/^int bedtobam_main(int argc, char* argv[]) {$/;"	f
bedtobam_reg2bin	src/bedToBam/bedToBam.cpp	/^int bedtobam_reg2bin(int beg, int end) {$/;"	f
bedtoigv_help	src/bedToIgv/bedToIgv.cpp	/^void bedtoigv_help(void) {$/;"	f
bedtoigv_main	src/bedToIgv/bedToIgv.cpp	/^int bedtoigv_main(int argc, char* argv[]) {$/;"	f
bedtools_faq	src/bedtools.cpp	/^int bedtools_faq(void)$/;"	f
bedtools_help	src/bedtools.cpp	/^int bedtools_help(void)$/;"	f
beforeLeftClosestEndPos	src/utils/NewChromsweep/CloseSweep.cpp	/^bool CloseSweep::beforeLeftClosestEndPos(int dbIdx, Record *rec)$/;"	f	class:CloseSweep
beg	src/utils/htslib/htslib/hts.h	/^    int tid, beg, end, n_off, i;$/;"	m	struct:__anon16
beg	src/utils/htslib/sam.c	/^    int32_t beg, end;$/;"	m	struct:__linkbuf_t	file:
beg	src/utils/htslib/tbx.c	/^    int64_t beg, end;$/;"	m	struct:__anon115	file:
begin	src/utils/BamTools/include/BamAlignment.hpp	/^				const char* begin;$/;"	m	struct:BamTools::BamAlignment::_SupportData::__anon126
begin	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::const_iterator_type RecordKeyList::begin()  {$/;"	f	class:RecordKeyList
begin	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::iterator_type RecordKeyVector::begin()  {$/;"	f	class:RecordKeyVector
begin	src/utils/FileRecordTools/Records/RecordList.h	/^	const RecordListNode *begin() const { return _begin; }$/;"	f	class:RecordList
begin	src/utils/FileRecordTools/Records/RecordList.h	/^	const RecordListNode *begin() {$/;"	f	class:RecordList
begin	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void begin() { _iter = _keyList->begin(); }$/;"	f	class:KeyListOpsMethods
begin	src/utils/NewChromsweep/CloseSweep.h	/^	constIterType begin() const { return 0; }$/;"	f	class:RecDistList
begin	src/utils/general/BTlist.h	/^	const BTlistNode<T> *begin() const {$/;"	f	class:BTlist
begin	src/utils/general/BTlist.h	/^	const BTlistNode<T> *begin() {$/;"	f	class:BTlist
begin	src/utils/htslib/htslib/hfile.h	/^    char *buffer, *begin, *end, *limit;$/;"	m	struct:hFILE
beta	src/utils/htslib/cram/cram_codecs.h	/^	cram_beta_decoder            beta;$/;"	m	union:cram_codec::__anon80
bgzf	src/utils/htslib/htslib/hts.h	/^        BGZF *bgzf;$/;"	m	union:__anon11::__anon12
bgzf	src/utils/htslib/htslib/hts.h	/^    no_compression, gzip, bgzf, custom,$/;"	e	enum:htsCompression
bgzf_block_write	src/utils/htslib/bgzf.c	/^ssize_t bgzf_block_write(BGZF *fp, const void *data, size_t length)$/;"	f
bgzf_check_EOF	src/utils/htslib/bgzf.c	/^int bgzf_check_EOF(BGZF *fp) {$/;"	f
bgzf_check_EOF_common	src/utils/htslib/bgzf.c	/^static int bgzf_check_EOF_common(BGZF *fp)$/;"	f	file:
bgzf_close	src/utils/htslib/bgzf.c	/^int bgzf_close(BGZF* fp)$/;"	f
bgzf_compress	src/utils/htslib/bgzf.c	/^int bgzf_compress(void *_dst, size_t *dlen, const void *src, size_t slen, int level)$/;"	f
bgzf_compression	src/utils/htslib/bgzf.c	/^int bgzf_compression(BGZF *fp)$/;"	f
bgzf_decode_func	src/utils/htslib/bgzf.c	/^void *bgzf_decode_func(void *arg) {$/;"	f
bgzf_dopen	src/utils/htslib/bgzf.c	/^BGZF *bgzf_dopen(int fd, const char *mode)$/;"	f
bgzf_encode_func	src/utils/htslib/bgzf.c	/^void *bgzf_encode_func(void *arg) {$/;"	f
bgzf_fdopen	src/utils/htslib/htslib/bgzf.h	110;"	d
bgzf_flush	src/utils/htslib/bgzf.c	/^int bgzf_flush(BGZF *fp)$/;"	f
bgzf_flush_try	src/utils/htslib/bgzf.c	/^int bgzf_flush_try(BGZF *fp, ssize_t size)$/;"	f
bgzf_getc	src/utils/htslib/bgzf.c	/^int bgzf_getc(BGZF *fp)$/;"	f
bgzf_getline	src/utils/htslib/bgzf.c	/^int bgzf_getline(BGZF *fp, int delim, kstring_t *str)$/;"	f
bgzf_gzip_compress	src/utils/htslib/bgzf.c	/^static int bgzf_gzip_compress(BGZF *fp, void *_dst, size_t *dlen, const void *src, size_t slen, int level)$/;"	f	file:
bgzf_hfile	src/utils/htslib/bgzf.c	/^struct hFILE *bgzf_hfile(struct BGZF *fp) {$/;"	f
bgzf_hopen	src/utils/htslib/bgzf.c	/^BGZF *bgzf_hopen(hFILE *hfp, const char *mode)$/;"	f
bgzf_htell	src/utils/htslib/bgzf.c	/^static off_t bgzf_htell(BGZF *fp) {$/;"	f	file:
bgzf_index_add_block	src/utils/htslib/bgzf.c	/^int bgzf_index_add_block(BGZF *fp)$/;"	f
bgzf_index_build_init	src/utils/htslib/bgzf.c	/^int bgzf_index_build_init(BGZF *fp)$/;"	f
bgzf_index_destroy	src/utils/htslib/bgzf.c	/^void bgzf_index_destroy(BGZF *fp)$/;"	f
bgzf_index_dump	src/utils/htslib/bgzf.c	/^int bgzf_index_dump(BGZF *fp, const char *bname, const char *suffix)$/;"	f
bgzf_index_dump_hfile	src/utils/htslib/bgzf.c	/^int bgzf_index_dump_hfile(BGZF *fp, struct hFILE *idx, const char *name)$/;"	f
bgzf_index_load	src/utils/htslib/bgzf.c	/^int bgzf_index_load(BGZF *fp, const char *bname, const char *suffix)$/;"	f
bgzf_index_load_hfile	src/utils/htslib/bgzf.c	/^int bgzf_index_load_hfile(BGZF *fp, struct hFILE *idx, const char *name)$/;"	f
bgzf_is_bgzf	src/utils/htslib/bgzf.c	/^int bgzf_is_bgzf(const char *fn)$/;"	f
bgzf_job	src/utils/htslib/bgzf.c	/^typedef struct bgzf_job {$/;"	s	file:
bgzf_job	src/utils/htslib/bgzf.c	/^} bgzf_job;$/;"	t	typeref:struct:bgzf_job	file:
bgzf_mt	src/utils/htslib/bgzf.c	/^int bgzf_mt(BGZF *fp, int n_threads, int n_sub_blks)$/;"	f
bgzf_mt_eof	src/utils/htslib/bgzf.c	/^static void bgzf_mt_eof(BGZF *fp) {$/;"	f	file:
bgzf_mt_read_block	src/utils/htslib/bgzf.c	/^int bgzf_mt_read_block(BGZF *fp, bgzf_job *j)$/;"	f
bgzf_mt_reader	src/utils/htslib/bgzf.c	/^static void *bgzf_mt_reader(void *vp) {$/;"	f	file:
bgzf_mt_seek	src/utils/htslib/bgzf.c	/^static void bgzf_mt_seek(BGZF *fp) {$/;"	f	file:
bgzf_mt_writer	src/utils/htslib/bgzf.c	/^static void *bgzf_mt_writer(void *vp) {$/;"	f	file:
bgzf_mtaux_t	src/utils/htslib/bgzf.c	/^typedef struct bgzf_mtaux_t {$/;"	s	file:
bgzf_nul_func	src/utils/htslib/bgzf.c	/^void *bgzf_nul_func(void *arg) { return arg; }$/;"	f
bgzf_open	src/utils/htslib/bgzf.c	/^BGZF *bgzf_open(const char *path, const char *mode)$/;"	f
bgzf_open_ref	src/utils/htslib/cram/cram_io.c	/^static BGZF *bgzf_open_ref(char *fn, char *mode, int is_md5) {$/;"	f	file:
bgzf_raw_read	src/utils/htslib/bgzf.c	/^ssize_t bgzf_raw_read(BGZF *fp, void *data, size_t length)$/;"	f
bgzf_raw_write	src/utils/htslib/bgzf.c	/^ssize_t bgzf_raw_write(BGZF *fp, const void *data, size_t length)$/;"	f
bgzf_read	src/utils/htslib/bgzf.c	/^ssize_t bgzf_read(BGZF *fp, void *data, size_t length)$/;"	f
bgzf_read_block	src/utils/htslib/bgzf.c	/^int bgzf_read_block(BGZF *fp)$/;"	f
bgzf_read_init	src/utils/htslib/bgzf.c	/^static BGZF *bgzf_read_init(hFILE *hfpr)$/;"	f	file:
bgzf_seek	src/utils/htslib/bgzf.c	/^int64_t bgzf_seek(BGZF* fp, int64_t pos, int where)$/;"	f
bgzf_set_cache_size	src/utils/htslib/bgzf.c	/^void bgzf_set_cache_size(BGZF *fp, int cache_size)$/;"	f
bgzf_suffix	src/utils/htslib/test/test_bgzf.c	/^const char *bgzf_suffix = ".gz";$/;"	v
bgzf_tell	src/utils/htslib/htslib/bgzf.h	201;"	d
bgzf_thread_pool	src/utils/htslib/bgzf.c	/^int bgzf_thread_pool(BGZF *fp, hts_tpool *pool, int qsize) {$/;"	f
bgzf_uncompress	src/utils/htslib/bgzf.c	/^static int bgzf_uncompress(uint8_t *dst, size_t *dlen, const uint8_t *src, size_t slen) {$/;"	f	file:
bgzf_useek	src/utils/htslib/bgzf.c	/^int bgzf_useek(BGZF *fp, long uoffset, int where)$/;"	f
bgzf_utell	src/utils/htslib/bgzf.c	/^long bgzf_utell(BGZF *fp)$/;"	f
bgzf_write	src/utils/htslib/bgzf.c	/^ssize_t bgzf_write(BGZF *fp, const void *data, size_t length)$/;"	f
bgzf_write_init	src/utils/htslib/bgzf.c	/^static BGZF *bgzf_write_init(const char *mode)$/;"	f	file:
bgzf_zerr	src/utils/htslib/bgzf.c	/^static const char *bgzf_zerr(int errnum, z_stream *zs)$/;"	f	file:
bgzidx1_t	src/utils/htslib/bgzf.c	/^bgzidx1_t;$/;"	t	typeref:struct:__anon54	file:
bgzidx_t	src/utils/htslib/htslib/bgzf.h	/^typedef struct __bgzidx_t bgzidx_t;$/;"	t	typeref:struct:__bgzidx_t
bgzip_main_usage	src/utils/htslib/bgzip.c	/^static int bgzip_main_usage(void)$/;"	f	file:
bias	src/utils/htslib/cram/rANS_byte.h	/^    uint32_t bias;      \/\/ Bias$/;"	m	struct:__anon58
bidx	src/utils/htslib/hts.c	/^    bidx_t **bidx;$/;"	m	struct:__hts_idx_t	file:
bidx_t	src/utils/htslib/hts.c	/^typedef khash_t(bin) bidx_t;$/;"	t	file:
bin	src/utils/htslib/htslib/sam.h	/^    uint16_t bin;$/;"	m	struct:__anon39
binNumType	src/utils/BinTree/BinTree.h	/^	typedef int32_t binNumType;$/;"	t	class:BinTree
binType	src/utils/BinTree/BinTree.h	/^	typedef vector<Record *> binType;$/;"	t	class:BinTree
binary_format	src/utils/htslib/htslib/hts.h	/^    binary_format, text_format,$/;"	e	enum:htsExactFormat
bindir	src/utils/htslib/Makefile	/^bindir      = $(exec_prefix)\/bin$/;"	m
bins	src/utils/htslib/htslib/hts.h	/^    } bins;$/;"	m	struct:__anon16	typeref:struct:__anon16::__anon17
binsToBedCovLists	src/utils/bedFile/bedFile.h	/^typedef map<BIN, bedCovListVector> binsToBedCovLists;$/;"	t
binsToBedCovs	src/utils/bedFile/bedFile.h	/^typedef map<BIN, bedCovVector> binsToBedCovs;$/;"	t
binsToBeds	src/utils/bedFile/bedFile.h	/^typedef map<BIN, bedVector> binsToBeds;$/;"	t
binsToMates	src/utils/bedFile/bedFile.h	/^typedef map<BIN, mateVector> binsToMates;$/;"	t
bins_t	src/utils/htslib/hts.c	/^} bins_t;$/;"	t	typeref:struct:__anon3	file:
bit	src/utils/htslib/cram/cram_structs.h	/^    int bit;$/;"	m	struct:cram_block
bit_array_clear	src/utils/htslib/vcf.c	1040;"	d	file:
bit_array_set	src/utils/htslib/vcf.c	1039;"	d	file:
bit_array_size	src/utils/htslib/vcf.c	1038;"	d	file:
bit_array_test	src/utils/htslib/vcf.c	1041;"	d	file:
bl	src/utils/htslib/cram/cram_structs.h	/^    spare_bams *bl;$/;"	m	struct:cram_fd
blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *blk;$/;"	m	struct:cram_tag_map
blksize	src/utils/htslib/hfile.c	/^static size_t blksize(int fd)$/;"	f	file:
block	src/utils/htslib/bgzf.c	/^    uint8_t *block;$/;"	m	struct:__anon53	file:
block	src/utils/htslib/cram/cram_structs.h	/^    cram_block **block;$/;"	m	struct:cram_slice
block	src/utils/htslib/md5.c	/^	hts_md5_u32plus block[16];$/;"	m	struct:hts_md5_context	file:
block_address	src/utils/htslib/bgzf.c	/^    int64_t block_address;$/;"	m	struct:bgzf_job	file:
block_address	src/utils/htslib/bgzf.c	/^    uint64_t block_address;$/;"	m	struct:bgzf_mtaux_t	file:
block_address	src/utils/htslib/htslib/bgzf.h	/^    int64_t block_address, uncompressed_address;$/;"	m	struct:BGZF
block_by_id	src/utils/htslib/cram/cram_structs.h	/^    cram_block **block_by_id;$/;"	m	struct:cram_slice
block_clength	src/utils/htslib/htslib/bgzf.h	/^    int block_length, block_clength, block_offset;$/;"	m	struct:BGZF
block_content_ids	src/utils/htslib/cram/cram_structs.h	/^    int32_t *block_content_ids;$/;"	m	struct:cram_block_slice_hdr
block_ends	src/utils/FileRecordTools/Records/Record.h	/^	vector<int> block_ends;$/;"	m	class:Record
block_length	src/utils/htslib/htslib/bgzf.h	/^    int block_length, block_clength, block_offset;$/;"	m	struct:BGZF
block_offset	src/utils/htslib/htslib/bgzf.h	/^    int block_length, block_clength, block_offset;$/;"	m	struct:BGZF
block_size	src/utils/htslib/vcf_sweep.c	/^    int block_size;         \/\/ the size of uncompressed data to hold in memory$/;"	m	struct:_bcf_sweep_t	file:
block_starts	src/utils/FileRecordTools/Records/Record.h	/^	vector<int> block_starts;$/;"	m	class:Record
body	src/utils/htslib/md5.c	/^static const void *body(hts_md5_context *ctx, const void *data, unsigned long size)$/;"	f	file:
bsum	src/utils/htslib/errmod.c	/^    double fsum[16], bsum[16];$/;"	m	struct:__anon121	file:
bucket	src/utils/htslib/hfile_s3.c	/^    char *bucket;$/;"	m	struct:__anon55	file:
buf	src/utils/gzstream/gzstream.h	/^    gzstreambuf buf;$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambase
buf	src/utils/htslib/sam.c	/^    lbnode_t **buf;$/;"	m	struct:__anon7	file:
buf	src/utils/htslib/vcf.c	/^    uint8_t *buf;$/;"	m	struct:__anon52	file:
bufType	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	typedef unsigned char bufType;$/;"	t	class:BufferedStreamMgr
buffer	src/utils/BamTools/include/BamReader.hpp	/^			bam1_t buffer;$/;"	m	struct:BamTools::BamReader::_SamFile
buffer	src/utils/general/InflateStreamBuf.h	/^	char* buffer;$/;"	m	class:InflateStreamBuf
buffer	src/utils/gzstream/gzstream.h	/^    char             buffer[bufferSize]; \/\/ data buffer$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
buffer	src/utils/htslib/hfile_libcurl.c	/^    } buffer;$/;"	m	struct:__anon102	typeref:struct:__anon102::__anon103	file:
buffer	src/utils/htslib/htslib/hfile.h	/^    char *buffer, *begin, *end, *limit;$/;"	m	struct:hFILE
buffer	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf1_t **buffer;                \/\/ cached VCF records. First is the current record synced across the reader$/;"	m	struct:__anon31
buffer	src/utils/htslib/md5.c	/^	unsigned char buffer[64];$/;"	m	struct:hts_md5_context	file:
bufferSize	src/utils/gzstream/gzstream.h	/^    static const int bufferSize = 47+256;    \/\/ size of data buff$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
buffin	src/utils/general/InflateStreamBuf.h	/^	unsigned char buffin[GZBUFSIZ];$/;"	m	class:InflateStreamBuf
buffout	src/utils/general/InflateStreamBuf.h	/^	unsigned char buffout[GZBUFSIZ];$/;"	m	class:InflateStreamBuf
build	src/utils/general/QuickString.cpp	/^void string::build() {$/;"	f	class:string
buildCigarStr	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::buildCigarStr() {$/;"	f	class:BamRecord
bw	src/utils/htslib/htslib/hts.h	/^    int bw;$/;"	m	struct:probaln_par_t
byChromThenStart	src/utils/bedFile/bedFile.cpp	/^bool byChromThenStart(BED const &a, BED const &b) {$/;"	f
byte	src/utils/htslib/cram/cram_structs.h	/^    size_t byte;$/;"	m	struct:cram_block
byte_array_len	src/utils/htslib/cram/cram_codecs.h	/^	cram_byte_array_len_decoder  byte_array_len;$/;"	m	union:cram_codec::__anon80
byte_array_stop	src/utils/htslib/cram/cram_codecs.h	/^	cram_byte_array_stop_decoder byte_array_stop;$/;"	m	union:cram_codec::__anon80
bzip2_cnt	src/utils/htslib/cram/cram_structs.h	/^    int bzip2_cnt;$/;"	m	struct:__anon82
bzip2_extra	src/utils/htslib/cram/cram_structs.h	/^    double bzip2_extra;$/;"	m	struct:__anon82
c	src/utils/htslib/cram/cram_decode.c	/^    cram_container *c;$/;"	m	struct:__anon97	file:
c	src/utils/htslib/cram/cram_io.c	/^    cram_container *c;$/;"	m	struct:__anon69	file:
c	src/utils/htslib/errmod.c	/^    uint32_t c[16];$/;"	m	struct:__anon121	file:
c	src/utils/htslib/md5.c	/^	hts_md5_u32plus a, b, c, d;$/;"	m	struct:hts_md5_context	file:
c_str	src/utils/BamTools/include/BamAlignment.hpp	/^				const char* c_str() const { return begin; }$/;"	f	struct:BamTools::BamAlignment::_SupportData::__anon126
c_str	src/utils/general/QuickString.h	/^	const char *c_str() const { return _buffer; }$/;"	f	class:string
cache	src/utils/htslib/htslib/bgzf.h	/^    void *cache; \/\/ a pointer to a hash table$/;"	m	struct:BGZF
cache_block	src/utils/htslib/bgzf.c	/^static void cache_block(BGZF *fp, int size) {}$/;"	f	file:
cache_block	src/utils/htslib/bgzf.c	/^static void cache_block(BGZF *fp, int size)$/;"	f	file:
cache_size	src/utils/htslib/htslib/bgzf.h	/^    int cache_size;$/;"	m	struct:BGZF
cache_t	src/utils/htslib/bgzf.c	/^} cache_t;$/;"	t	typeref:struct:__anon53	file:
caddr	src/utils/htslib/bgzf.c	/^    uint64_t caddr;  \/\/ offset w.r.t. compressed data$/;"	m	struct:__anon54	file:
cal_coef	src/utils/htslib/errmod.c	/^static void cal_coef(errmod_t *em, double depcorr, double eta)$/;"	f	file:
calcMemoryStats	src/regressTest/RegressTest.cpp	/^bool RegressTest::calcMemoryStats()$/;"	f	class:RegressTest
call_aux_t	src/utils/htslib/errmod.c	/^} call_aux_t;$/;"	t	typeref:struct:__anon121	file:
callback	src/utils/htslib/hfile_libcurl.c	/^    hts_httphdr_callback callback;   \/\/ Callback to get more headers$/;"	m	struct:__anon101	file:
callback_data	src/utils/htslib/hfile_libcurl.c	/^    void *callback_data;             \/\/ Data to pass to callback$/;"	m	struct:__anon101	file:
canGroup	src/groupBy/groupBy.cpp	/^bool GroupBy::canGroup(Record *newRecord) $/;"	f	class:GroupBy
can_seek	src/utils/htslib/hfile_libcurl.c	/^    unsigned can_seek : 1;  \/\/ Can (attempt to) seek on this handle$/;"	m	struct:__anon102	file:
capacity	src/utils/general/FreeList.h	/^	int capacity() const { return _buffer.size(); }$/;"	f	class:FreeList
capacity	src/utils/general/QuickString.h	/^	size_t capacity() const { return _currCapacity; }$/;"	f	class:string
category	src/utils/htslib/htslib/hts.h	/^    enum htsFormatCategory category;$/;"	m	struct:htsFormat	typeref:enum:htsFormat::htsFormatCategory
category_maximum	src/utils/htslib/htslib/hts.h	/^    category_maximum = 32767$/;"	e	enum:htsFormatCategory
cb_backend	src/utils/htslib/hfile.c	/^static const struct hFILE_backend cb_backend =$/;"	v	typeref:struct:hFILE_backend	file:
cb_close	src/utils/htslib/hfile.c	/^static int cb_close(hFILE* fpv)$/;"	f	file:
cb_data	src/utils/htslib/htslib/hfile.h	/^	void* cb_data;$/;"	m	struct:hFILE_callback_ops
cb_flush	src/utils/htslib/hfile.c	/^static int cb_flush(hFILE* fpv)$/;"	f	file:
cb_read	src/utils/htslib/hfile.c	/^static ssize_t cb_read(hFILE *fpv, void *buffer, size_t nbytes)$/;"	f	file:
cb_seek	src/utils/htslib/hfile.c	/^static off_t cb_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
cb_write	src/utils/htslib/hfile.c	/^static ssize_t cb_write(hFILE* fpv, const void* buffer, size_t nbytes)$/;"	f	file:
cd	src/utils/htslib/htslib/sam.h	/^    bam_pileup_cd cd; \/\/ generic per-struct data, owned by caller.$/;"	m	struct:__anon42
cd	src/utils/htslib/sam.c	/^    bam_pileup_cd cd;$/;"	m	struct:__linkbuf_t	file:
charp	src/utils/htslib/bcf_sr_sort.h	/^    char **charp;$/;"	m	struct:__anon120
check	src/utils/htslib/hts.c	1659;"	d	file:
check	src/utils/htslib/hts.c	1695;"	d	file:
check	src/utils/htslib/hts.c	1723;"	d	file:
check	src/utils/htslib/hts.c	1745;"	d	file:
check	src/utils/htslib/test/fieldarith.c	/^void check(const bam1_t *aln, const char *testname, const char *tag, int value)$/;"	f
check	test/bamtobed/test-bamtobed.sh	/^check()$/;"	f
check	test/bamtofastq/test-bamtofastq.sh	/^check()$/;"	f
check	test/bed12tobed6/test-bed12tobed6.sh	/^check()$/;"	f
check	test/closest/kclosest/test-kclosest.sh	/^check()$/;"	f
check	test/closest/sortAndNaming/test-sort-and-naming.sh	/^check()$/;"	f
check	test/closest/test-closest.sh	/^check()$/;"	f
check	test/cluster/test-cluster.sh	/^check()$/;"	f
check	test/complement/test-complement.sh	/^check()$/;"	f
check	test/coverage/test-coverage.sh	/^check()$/;"	f
check	test/expand/test-expand.sh	/^check()$/;"	f
check	test/fisher/test-fisher.sh	/^check()$/;"	f
check	test/flank/test-flank.sh	/^check()$/;"	f
check	test/general/test-general.sh	/^check()$/;"	f
check	test/genomecov/test-genomecov.sh	/^check()$/;"	f
check	test/getfasta/test-getfasta.sh	/^check()$/;"	f
check	test/groupby/test-groupby.sh	/^check()$/;"	f
check	test/intersect/multi_intersect/test-multi_intersect.sh	/^check()$/;"	f
check	test/intersect/new_test-intersect.sh	/^check()$/;"	f
check	test/intersect/sortAndNaming/test-sort-and-naming.sh	/^check()$/;"	f
check	test/intersect/test-intersect.sh	/^check()$/;"	f
check	test/jaccard/test-jaccard.sh	/^check()$/;"	f
check	test/makewindows/test-makewindows.sh	/^check()$/;"	f
check	test/map/test-map.sh	/^check()$/;"	f
check	test/merge/test-merge.sh	/^check()$/;"	f
check	test/multicov/test-multicov.sh	/^check()$/;"	f
check	test/reldist/test-reldist.sh	/^check()$/;"	f
check	test/sample/test-sample.sh	/^check()$/;"	f
check	test/shift/test-shift.sh	/^check()$/;"	f
check	test/shuffle/test-shuffle.sh	/^check()$/;"	f
check	test/slop/test-slop.sh	/^check()$/;"	f
check	test/sort/test-sort.sh	/^check()$/;"	f
check	test/spacing/test-spacing.sh	/^check()$/;"	f
check	test/split/test-split.sh	/^check()$/;"	f
check	test/subtract/test-subtract.sh	/^check()$/;"	f
checkCoordinatesAgainstChromLength	src/complementFile/complementFile.cpp	/^void ComplementFile::checkCoordinatesAgainstChromLength(const Record *rec)$/;"	f	class:ComplementFile
checkForHeader	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::checkForHeader() {$/;"	f	class:RecordOutputMgr
checkMultiDbs	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::checkMultiDbs(RecordKeyVector &retList) {$/;"	f	class:CloseSweep
checkSplits	src/coverageFile/coverageFile.cpp	/^void CoverageFile::checkSplits(RecordKeyVector &hitSet)$/;"	f	class:CoverageFile
checkSplits	src/intersectFile/intersectFile.cpp	/^void IntersectFile::checkSplits(RecordKeyVector &hitSet)$/;"	f	class:IntersectFile
check_bam_aux_get	src/utils/htslib/test/sam.c	/^uint8_t *check_bam_aux_get(const bam1_t *aln, const char *tag, char type)$/;"	f
check_dir	src/utils/htslib/test/test-logging.pl	/^sub check_dir$/;"	s
check_enum1	src/utils/htslib/test/sam.c	/^static void check_enum1(void)$/;"	f	file:
check_file	src/utils/htslib/test/test-logging.pl	/^sub check_file$/;"	s
check_format_values	src/utils/htslib/test/test-vcf-api.c	/^void check_format_values(const char *fname)$/;"	f
check_header	src/utils/htslib/bgzf.c	/^static int check_header(const uint8_t *header)$/;"	f	file:
check_int_B_array	src/utils/htslib/test/sam.c	/^static void check_int_B_array(bam1_t *aln, char *tag,$/;"	f	file:
check_log_message	src/utils/htslib/test/test-logging.pl	/^sub check_log_message$/;"	s
check_offset	src/utils/htslib/test/hfile.c	/^void check_offset(hFILE *f, off_t off, const char *message)$/;"	f
check_outputs	src/utils/htslib/test/test-bcf-sr.pl	/^sub check_outputs$/;"	s
chr	src/utils/htslib/bcf_sr_sort.h	/^    const char *chr;$/;"	m	struct:__anon120
chrom	src/utils/bedFile/bedFile.h	/^    string chrom;$/;"	m	struct:BED
chrom	src/utils/bedFile/bedFile.h	/^    string chrom;$/;"	m	struct:BEDCOV
chrom	src/utils/bedFile/bedFile.h	/^    string chrom;$/;"	m	struct:BEDCOVLIST
chrom	src/utils/bedGraphFile/bedGraphFile.h	/^    std::string chrom;$/;"	m	class:BEDGRAPH
chrom1	src/utils/bedFilePE/bedFilePE.h	/^    string chrom1;$/;"	m	struct:BEDPE
chrom2	src/utils/bedFilePE/bedFilePE.h	/^    string chrom2;$/;"	m	struct:BEDPE
chromAfter	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::chromAfter(const Record *other) const$/;"	f	class:Record
chromBefore	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::chromBefore(const Record *other) const$/;"	f	class:Record
chromChange	src/utils/NewChromsweep/CloseSweep.cpp	/^bool CloseSweep::chromChange(int dbIdx, RecordKeyVector &retList, bool wantScan)$/;"	f	class:CloseSweep
chromChange	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::chromChange(int dbIdx, RecordKeyVector &retList, bool wantScan)$/;"	f	class:NewChromSweep
chromDepthMap	src/genomeCoverageBed/genomeCoverageBed.h	/^typedef map<string, depthMap, less<string> > chromDepthMap;$/;"	t
chromDirType	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	t	class:CloseSweep	typeref:enum:CloseSweep::__anon135
chromDirType	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { LEFT, OVERLAP, RIGHT } chromDirType;$/;"	t	class:RecDistList	typeref:enum:RecDistList::__anon133
chromFound	src/utils/Fasta/Fasta.cpp	/^bool FastaIndex::chromFound(string name) {$/;"	f	class:FastaIndex
chromHistMap	src/genomeCoverageBed/genomeCoverageBed.h	/^typedef map<string, histMap, less<string> > chromHistMap;$/;"	t
chromToSizes	src/utils/GenomeFile/GenomeFile.h	/^typedef map<string, int, std::less<string> > chromToSizes;$/;"	t
cigar	src/utils/htslib/cram/cram_structs.h	/^    int32_t cigar;        \/\/ idx to s->cigar$/;"	m	struct:cram_record
cigar	src/utils/htslib/cram/cram_structs.h	/^    uint32_t  *cigar;$/;"	m	struct:cram_slice
cigar_alloc	src/utils/htslib/cram/cram_structs.h	/^    uint32_t   cigar_alloc;$/;"	m	struct:cram_slice
cigar_iref2iseq_next	src/utils/htslib/sam.c	/^static inline int cigar_iref2iseq_next(uint32_t **cigar, uint32_t *cigar_max, int *icig, int *iseq, int *iref)$/;"	f	file:
cigar_iref2iseq_set	src/utils/htslib/sam.c	/^static inline int cigar_iref2iseq_set(uint32_t **cigar, uint32_t *cigar_max, int *icig, int *iseq, int *iref)$/;"	f	file:
cigar_op	src/utils/htslib/cram/cram_samtools.h	/^enum cigar_op {$/;"	g
cigar_ops_as_chars	src/utils/BamTools/include/BamAlignment.hpp	/^	const char cigar_ops_as_chars[] = { 'M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', 'B' };$/;"	m	namespace:BamTools
cigar_tab	src/utils/htslib/htslib/sam.h	/^    int8_t *cigar_tab;$/;"	m	struct:__anon38
class_def	src/utils/BamTools/mapping/BamAlignment.py	/^    def class_def(self):$/;"	m	class:ReadOnlyPropertyMapping
class_def	src/utils/BamTools/mapping/BamAlignment.py	/^    def class_def(self):$/;"	m	class:SimplePropertyMapping
cleanup	src/utils/htslib/test/test_bgzf.c	/^static void cleanup(Files *f, int retval) {$/;"	f	file:
cleanupHits	src/complementFile/complementFile.cpp	/^void ComplementFile::cleanupHits(RecordKeyVector &hits)$/;"	f	class:ComplementFile
cleanupHits	src/coverageFile/coverageFile.cpp	/^void CoverageFile::cleanupHits(RecordKeyVector &hits) {$/;"	f	class:CoverageFile
cleanupHits	src/groupBy/groupBy.cpp	/^void GroupBy::cleanupHits(RecordKeyVector &hits)$/;"	f	class:GroupBy
cleanupHits	src/intersectFile/intersectFile.cpp	/^void IntersectFile::cleanupHits(RecordKeyVector &hits)$/;"	f	class:IntersectFile
cleanupHits	src/jaccard/jaccard.cpp	/^void Jaccard::cleanupHits(RecordKeyVector &hits)$/;"	f	class:Jaccard
cleanupHits	src/mergeFile/mergeFile.cpp	/^void MergeFile::cleanupHits(RecordKeyVector &hits)$/;"	f	class:MergeFile
cleanupHits	src/sampleFile/sampleFile.h	/^	virtual void cleanupHits(RecordKeyVector &hits) {}$/;"	f	class:SampleFile
cleanupHits	src/spacingFile/spacingFile.cpp	/^void SpacingFile::cleanupHits(RecordKeyVector &hits)$/;"	f	class:SpacingFile
cleanupHits	src/subtractFile/subtractFile.cpp	/^void SubtractFile::cleanupHits(RecordKeyVector &hits)$/;"	f	class:SubtractFile
clear	src/utils/BamTools/include/BamAlignment.hpp	/^				void clear() { begin = NULL; size = 0; }$/;"	f	struct:BamTools::BamAlignment::_SupportData::__anon126
clear	src/utils/BamTools/include/api/BamAux.h	/^		void clear()$/;"	f	struct:BamTools::BamRegion
clear	src/utils/Fasta/Fasta.cpp	/^void FastaIndexEntry::clear(void)$/;"	f	class:FastaIndexEntry
clear	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.cpp	/^void SingleLineDelimTransferBuffer::clear(void)$/;"	f	class:SingleLineDelimTransferBuffer
clear	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::clear()$/;"	f	class:BamRecord
clear	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^void Bed12Interval::clear() {$/;"	f	class:Bed12Interval
clear	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::clear() {$/;"	f	class:BedPlusInterval
clear	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^void GffPlusRecord::clear() {$/;"	f	class:GffPlusRecord
clear	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::clear()$/;"	f	class:GffRecord
clear	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^void NoPosPlusRecord::clear() {$/;"	f	class:NoPosPlusRecord
clear	src/utils/FileRecordTools/Records/PlusFields.cpp	/^void PlusFields::clear() {$/;"	f	class:PlusFields
clear	src/utils/FileRecordTools/Records/Record.cpp	/^void Record::clear() {$/;"	f	class:Record
clear	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::clear() {$/;"	f	class:RecordList
clear	src/utils/FileRecordTools/Records/RecordList.h	/^	void clear() {$/;"	f	class:RecordListNode
clear	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::clear()$/;"	f	class:VcfRecord
clear	src/utils/NewChromsweep/CloseSweep.cpp	/^void RecDistList::clear() {$/;"	f	class:RecDistList
clear	src/utils/general/BTlist.h	/^	void clear() {$/;"	f	class:BTlist
clear	src/utils/general/BTlist.h	/^	void clear() {$/;"	f	class:BTlistNode
clear	src/utils/general/FreeList.h	/^	void clear() {$/;"	f	class:FreeList
clear	src/utils/general/PushBackStreamBuf.h	/^	void clear() { _buffer.clear(); }$/;"	f	class:PushBackStreamBuf
clear	src/utils/general/QuickString.cpp	/^void string::clear() {$/;"	f	class:string
clearAll	src/utils/FileRecordTools/Records/RecordKeyList.h	/^    void clearAll() {$/;"	f	class:RecordKeyList
clearAll	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^    void clearAll() {$/;"	f	class:RecordKeyVector
clearCache	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::clearCache(int dbIdx)$/;"	f	class:NewChromSweep
clearClosestEndPos	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::clearClosestEndPos(int dbIdx)$/;"	f	class:CloseSweep
clearList	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^void RecordKeyList::clearList() {$/;"	f	class:RecordKeyList
clearVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::clearVector() {$/;"	f	class:RecordKeyVector
close	src/utils/BamTools/include/BamReader.hpp	/^		static int close(void* data)$/;"	f	struct:BamTools::stream_data_t
close	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^void BamFileReader::close()$/;"	f	class:BamFileReader
close	src/utils/FileRecordTools/FileReaders/FileReader.cpp	/^void FileReader::close() {$/;"	f	class:FileReader
close	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::close(){$/;"	f	class:FileRecordMgr
close	src/utils/general/InflateStreamBuf.h	/^	virtual void close() {$/;"	f	class:InflateStreamBuf
close	src/utils/gzstream/gzstream.C	/^gzstreambuf * gzstreambuf::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
close	src/utils/gzstream/gzstream.C	/^void gzstreambase::close() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
close	src/utils/htslib/htslib/hfile.h	/^	int (*close)(void* cb_data);$/;"	m	struct:hFILE_callback_ops
closeOut	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::closeOut(bool testChromOrderVal) {$/;"	f	class:NewChromSweep
close_plugin	src/utils/htslib/plugin.c	/^void close_plugin(void *plugin)$/;"	f
closest_help	src/closestFile/closestHelp.cpp	/^void closest_help(void) {$/;"	f
closing	src/utils/htslib/hfile_libcurl.c	/^    unsigned closing : 1;   \/\/ informs callback that hclose() has been invoked$/;"	m	struct:__anon102	file:
cluster_help	src/clusterBed/clusterMain.cpp	/^void cluster_help(void) {$/;"	f
cluster_main	src/clusterBed/clusterMain.cpp	/^int cluster_main(int argc, char* argv[]) {$/;"	f
cmd	src/utils/htslib/test/test-bcf-sr.pl	/^sub cmd$/;"	s
cmd	src/utils/htslib/test/test.pl	/^sub cmd$/;"	s
cmdArgsValid	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::cmdArgsValid()$/;"	f	class:ContextBase
cmp_nonblank	src/utils/htslib/hts.c	/^cmp_nonblank(const char *key, const unsigned char *u, const unsigned char *ulim)$/;"	f	file:
cmp_prefix	src/utils/htslib/hfile.c	/^static int cmp_prefix(const char *key, const char *s)$/;"	f	file:
cmpl_freq	src/utils/htslib/cram/rANS_byte.h	/^    uint16_t cmpl_freq; \/\/ Complement of frequency: (1 << scale_bits) - freq$/;"	m	struct:__anon58
cmpstringp	src/utils/htslib/bcf_sr_sort.c	/^static int cmpstringp(const void *p1, const void *p2)$/;"	f	file:
cnt	src/utils/htslib/bcf_sr_sort.h	/^    int cnt;                \/\/ number of readers in this group$/;"	m	struct:__anon119
cnt	src/utils/htslib/bcf_sr_sort.h	/^    int mcnt, *cnt;         \/\/ number of VCF covered by a varset$/;"	m	struct:__anon120
cnt	src/utils/htslib/sam.c	/^    int cnt, n, max;$/;"	m	struct:__anon7	file:
code	src/utils/htslib/cram/cram_codecs.h	/^    int32_t code;$/;"	m	struct:__anon70
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon84
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon85
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon86
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon87
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon88
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon89
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon90
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon91
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon92
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon93
code	src/utils/htslib/cram/cram_structs.h	/^	    int code;$/;"	m	struct:cram_feature::__anon83::__anon94
code_sort	src/utils/htslib/cram/cram_codecs.c	/^static int code_sort(const void *vp1, const void *vp2) {$/;"	f	file:
codec	src/utils/htslib/cram/cram_codecs.h	/^    enum cram_encoding codec;$/;"	m	struct:cram_codec	typeref:enum:cram_codec::cram_encoding
codec	src/utils/htslib/cram/cram_structs.h	/^    struct cram_codec *codec;$/;"	m	struct:cram_map	typeref:struct:cram_map::cram_codec
codec	src/utils/htslib/cram/cram_structs.h	/^    struct cram_codec *codec;$/;"	m	struct:cram_tag_map	typeref:struct:cram_tag_map::cram_codec
codecs	src/utils/htslib/cram/cram_structs.h	/^    struct cram_codec *codecs[DS_END];$/;"	m	struct:cram_block_compression_hdr	typeref:struct:cram_block_compression_hdr::cram_codec
codes	src/utils/htslib/cram/cram_codecs.h	/^    cram_huffman_code *codes;$/;"	m	struct:__anon71
codes	src/utils/htslib/cram/cram_codecs.h	/^    cram_huffman_code *codes;$/;"	m	struct:__anon72
colOpsType	src/utils/KeyListOps/KeyListOps.h	/^    typedef vector<pair<int, OP_TYPES> > colOpsType;$/;"	t	class:KeyListOps
collapse	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int collapse;           \/\/ Do not access directly, use bcf_sr_set_pairing_logic() instead$/;"	m	struct:__anon33
command	src/utils/htslib/bgzf.c	/^    enum mtaux_cmd command;$/;"	m	struct:bgzf_mtaux_t	typeref:enum:bgzf_mtaux_t::mtaux_cmd	file:
command_c	src/utils/htslib/bgzf.c	/^    pthread_cond_t command_c;$/;"	m	struct:bgzf_mtaux_t	file:
command_m	src/utils/htslib/bgzf.c	/^    pthread_mutex_t command_m; \/\/ Set whenever fp is being updated$/;"	m	struct:bgzf_mtaux_t	file:
comp_data	src/utils/htslib/bgzf.c	/^    unsigned char comp_data[BGZF_MAX_BLOCK_SIZE];$/;"	m	struct:bgzf_job	file:
comp_hdr	src/utils/htslib/cram/cram_structs.h	/^    cram_block_compression_hdr *comp_hdr;$/;"	m	struct:cram_container
comp_hdr_block	src/utils/htslib/cram/cram_structs.h	/^    cram_block *comp_hdr_block;$/;"	m	struct:cram_container
comp_len	src/utils/htslib/bgzf.c	/^    size_t comp_len;$/;"	m	struct:bgzf_job	file:
comp_size	src/utils/htslib/cram/cram_structs.h	/^    int32_t  comp_size;$/;"	m	struct:cram_block
compare_buffers	src/utils/htslib/test/test_bgzf.c	/^static int compare_buffers(const unsigned char *b1, const unsigned char *b2,$/;"	f	file:
compare_sam	src/utils/htslib/test/cross_validate.sh	/^compare_sam() {$/;"	f
complement_help	src/complementFile/complementHelp.cpp	/^void complement_help(void) {$/;"	f
compress_binning	src/utils/htslib/hts.c	/^static void compress_binning(hts_idx_t *idx, int i)$/;"	f	file:
compress_level	src/utils/htslib/htslib/bgzf.h	/^    signed compress_level:9;$/;"	m	struct:BGZF
compressed_block	src/utils/htslib/htslib/bgzf.h	/^    void *uncompressed_block, *compressed_block;$/;"	m	struct:BGZF
compression	src/utils/htslib/htslib/hts.h	/^    enum htsCompression compression;$/;"	m	struct:htsFormat	typeref:enum:htsFormat::htsCompression
compression_level	src/utils/htslib/htslib/hts.h	/^    short compression_level;  \/\/ currently unused$/;"	m	struct:htsFormat
compression_maximum	src/utils/htslib/htslib/hts.h	/^    compression_maximum = 32767$/;"	e	enum:htsCompression
conf	src/utils/htslib/htslib/tbx.h	/^    tbx_conf_t conf;$/;"	m	struct:__anon37
config	src/regressTest/RegressTest.cpp	/^bool RegressTest::config() {$/;"	f	class:RegressTest
confirm_overwrite	src/utils/htslib/bgzip.c	/^static int confirm_overwrite(const char *fn)$/;"	f	file:
considerRecord	src/utils/NewChromsweep/CloseSweep.cpp	/^CloseSweep::rateOvlpType CloseSweep::considerRecord(Record *cacheRec, int dbIdx, bool &stopScanning) {$/;"	f	class:CloseSweep
constIterType	src/utils/NewChromsweep/CloseSweep.h	/^	typedef int constIterType; \/\/used to be a map iter, trying not to change interface too much.$/;"	t	class:RecDistList
const_iterator_type	src/utils/FileRecordTools/Records/RecordKeyList.h	/^	typedef const RecordListNode *const_iterator_type;$/;"	t	class:RecordKeyList
const_iterator_type	src/utils/FileRecordTools/Records/RecordList.h	/^	typedef const RecordListNode * const_iterator_type;$/;"	t	class:RecordList
const_iterator_type	src/utils/general/BTlist.h	/^	typedef const BTlistNode<T> * const_iterator_type;$/;"	t	class:BTlist
content_id	src/utils/htslib/cram/cram_codecs.h	/^    int32_t content_id;$/;"	m	struct:__anon76
content_id	src/utils/htslib/cram/cram_codecs.h	/^    int32_t content_id;$/;"	m	struct:__anon78
content_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t  content_id;$/;"	m	struct:cram_block
content_type	src/utils/htslib/cram/cram_structs.h	/^    enum cram_content_type  content_type;$/;"	m	struct:cram_block	typeref:enum:cram_block::cram_content_type
content_type	src/utils/htslib/cram/cram_structs.h	/^    enum cram_content_type content_type;$/;"	m	struct:cram_block_slice_hdr	typeref:enum:cram_block_slice_hdr::cram_content_type
conventionType	src/utils/Contexts/ContextBase.h	/^	typedef map<int, testType> conventionType;$/;"	t	class:ContextBase
coord	src/utils/Point/Point.h	/^      CHRPOS coord;$/;"	m	class:PointWithDepth
coord	src/utils/Point/Point.h	/^    CHRPOS coord;$/;"	m	class:Point
coord_type	src/utils/Point/Point.h	/^      COORDINATE_TYPE coord_type; \/\/ is this the start or the end position?$/;"	m	class:PointWithDepth
coord_type	src/utils/Point/Point.h	/^    COORDINATE_TYPE coord_type; \/\/ is this the start or the end position?$/;"	m	class:Point
coordsValid	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::coordsValid() {$/;"	f	class:Record
copy_auth_headers	src/utils/htslib/hfile_s3.c	/^static int copy_auth_headers(s3_auth_data *ad, char ***hdrs) {$/;"	f	file:
copy_check_alignment	src/utils/htslib/test/sam.c	/^static void copy_check_alignment(const char *infname, const char *informat,$/;"	f	file:
copyright	docs/conf.py	/^copyright = u'2009 - 2017, Aaron R. Quinlan and Neil Kindlon'$/;"	v
core	src/utils/htslib/htslib/sam.h	/^    bam1_core_t core;$/;"	m	struct:__anon40
count	src/split/splitBed.cpp	/^        size_t count;$/;"	m	class:SimpleSplitInfo	file:
count	src/utils/bedFile/bedFile.h	/^    unsigned int count;$/;"	m	struct:BEDCOV
count	src/utils/htslib/cram/cram_structs.h	/^    int count;             \/\/ how many cram_fd sharing this refs struct$/;"	m	struct:__anon95
count	src/utils/htslib/cram/cram_structs.h	/^    int64_t count;	   \/\/ for shared references so we know to dealloc seq$/;"	m	struct:ref_entry
countBasesAtDepth	src/coverageFile/coverageFile.cpp	/^size_t CoverageFile::countBasesAtDepth(size_t depth) {$/;"	f	class:CoverageFile
countHits	src/utils/bedFile/bedFile.cpp	/^void BedFile::countHits(const BED &a, bool sameStrand, bool diffStrand, bool countsOnly) {$/;"	f	class:BedFile
countListHits	src/utils/bedFile/bedFile.cpp	/^void BedFile::countListHits(const BED &a, int index, bool sameStrand, bool diffStrand) {$/;"	f	class:BedFile
countPattern	src/utils/sequenceUtilities/sequenceUtils.cpp	/^int countPattern(const string &seq, const string &pattern, bool ignoreCase)$/;"	f
countSplitHits	src/utils/bedFile/bedFile.cpp	/^void BedFile::countSplitHits(const vector<BED> &bedBlocks, bool sameStrand, bool diffStrand, bool countsOnly) {$/;"	f	class:BedFile
counts	src/utils/bedFile/bedFile.h	/^    vector<unsigned int> counts;$/;"	m	struct:BEDCOVLIST
coverageType	src/utils/Contexts/ContextCoverage.h	/^    typedef enum { DEFAULT, COUNT, PER_BASE, HIST, MEAN } coverageType;$/;"	t	class:ContextCoverage	typeref:enum:ContextCoverage::__anon132
coverage_help	src/coverageFile/coverageHelp.cpp	/^void coverage_help(void) {$/;"	f
crai	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
cram	src/utils/htslib/hts_internal.h	/^    struct cram_fd *cram;$/;"	m	struct:hts_cram_idx_t	typeref:struct:hts_cram_idx_t::cram_fd
cram	src/utils/htslib/htslib/hts.h	/^        struct cram_fd *cram;$/;"	m	union:__anon11::__anon12	typeref:struct:__anon11::__anon12::cram_fd
cram	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
cram_DS_ID	src/utils/htslib/cram/cram_structs.h	/^enum cram_DS_ID {$/;"	g
cram_add_base	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_base(cram_fd *fd, cram_container *c,$/;"	f	file:
cram_add_bases	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_bases(cram_fd *fd, cram_container *c,$/;"	f	file:
cram_add_deletion	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_deletion(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_feature	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_feature(cram_container *c, cram_slice *s,$/;"	f	file:
cram_add_hardclip	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_hardclip(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_insertion	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_insertion(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_pad	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_pad(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_quality	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_quality(cram_fd *fd, cram_container *c,$/;"	f	file:
cram_add_skip	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_skip(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_softclip	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_softclip(cram_container *c, cram_slice *s, cram_record *r,$/;"	f	file:
cram_add_substitution	src/utils/htslib/cram/cram_encode.c	/^static int cram_add_substitution(cram_fd *fd, cram_container *c,$/;"	f	file:
cram_aux	src/utils/htslib/cram/cram_structs.h	461;"	d
cram_beta_decode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_beta_decode_char(cram_slice *slice, cram_codec *c, cram_block *in, char *out, int *out_size) {$/;"	f
cram_beta_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_beta_decode_free(cram_codec *c) {$/;"	f
cram_beta_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_beta_decode_init(char *data, int size,$/;"	f
cram_beta_decode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_beta_decode_int(cram_slice *slice, cram_codec *c, cram_block *in, char *out, int *out_size) {$/;"	f
cram_beta_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_beta_decoder;$/;"	t	typeref:struct:__anon73
cram_beta_encode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_beta_encode_char(cram_slice *slice, cram_codec *c,$/;"	f
cram_beta_encode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_beta_encode_free(cram_codec *c) {$/;"	f
cram_beta_encode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_beta_encode_init(cram_stats *st,$/;"	f
cram_beta_encode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_beta_encode_int(cram_slice *slice, cram_codec *c,$/;"	f
cram_beta_encode_store	src/utils/htslib/cram/cram_codecs.c	/^int cram_beta_encode_store(cram_codec *c, cram_block *b,$/;"	f
cram_block	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_block {$/;"	s
cram_block	src/utils/htslib/cram/cram_structs.h	/^} cram_block;$/;"	t	typeref:struct:cram_block
cram_block	src/utils/htslib/htslib/cram.h	/^typedef struct cram_block cram_block;$/;"	t	typeref:struct:cram_block
cram_block_append	src/utils/htslib/cram/cram_external.c	/^int cram_block_append(cram_block *b, void *data, int size) {$/;"	f
cram_block_compression_hdr	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_block_compression_hdr {$/;"	s
cram_block_compression_hdr	src/utils/htslib/cram/cram_structs.h	/^} cram_block_compression_hdr;$/;"	t	typeref:struct:cram_block_compression_hdr
cram_block_compression_hdr	src/utils/htslib/htslib/cram.h	/^typedef struct cram_block_compression_hdr cram_block_compression_hdr;$/;"	t	typeref:struct:cram_block_compression_hdr
cram_block_compression_hdr_decoder2encoder	src/utils/htslib/cram/cram_external.c	/^int cram_block_compression_hdr_decoder2encoder(cram_fd *fd,$/;"	f
cram_block_compression_hdr_set_DS	src/utils/htslib/cram/cram_external.c	/^static int cram_block_compression_hdr_set_DS(cram_block_compression_hdr *ch,$/;"	f	file:
cram_block_compression_hdr_set_rg	src/utils/htslib/cram/cram_external.c	/^int cram_block_compression_hdr_set_rg(cram_block_compression_hdr *ch, int new_rg) {$/;"	f
cram_block_get_comp_size	src/utils/htslib/cram/cram_external.c	/^int32_t cram_block_get_comp_size(cram_block *b)   { return b->comp_size; }$/;"	f
cram_block_get_content_id	src/utils/htslib/cram/cram_external.c	/^int32_t cram_block_get_content_id(cram_block *b)  { return b->content_id; }$/;"	f
cram_block_get_content_type	src/utils/htslib/cram/cram_external.c	/^enum cram_content_type cram_block_get_content_type(cram_block *b) {$/;"	f
cram_block_get_crc32	src/utils/htslib/cram/cram_external.c	/^int32_t cram_block_get_crc32(cram_block *b)       { return b->crc32; }$/;"	f
cram_block_get_data	src/utils/htslib/cram/cram_external.c	/^void *  cram_block_get_data(cram_block *b)        { return BLOCK_DATA(b); }$/;"	f
cram_block_get_offset	src/utils/htslib/cram/cram_external.c	/^size_t cram_block_get_offset(cram_block *b) { return BLOCK_SIZE(b); }$/;"	f
cram_block_get_size	src/utils/htslib/cram/cram_external.c	/^int32_t cram_block_get_size(cram_block *b)        { return BLOCK_SIZE(b); }$/;"	f
cram_block_get_uncomp_size	src/utils/htslib/cram/cram_external.c	/^int32_t cram_block_get_uncomp_size(cram_block *b) { return b->uncomp_size; }$/;"	f
cram_block_method	src/utils/htslib/cram/cram_structs.h	/^enum cram_block_method {$/;"	g
cram_block_method	src/utils/htslib/htslib/cram.h	/^enum cram_block_method {$/;"	g
cram_block_method2str	src/utils/htslib/cram/cram_io.c	/^char *cram_block_method2str(enum cram_block_method m) {$/;"	f
cram_block_set_comp_size	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_comp_size(cram_block *b, int32_t size) { b->comp_size = size; }$/;"	f
cram_block_set_content_id	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_content_id(cram_block *b, int32_t id) { b->content_id = id; }$/;"	f
cram_block_set_crc32	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_crc32(cram_block *b, int32_t crc) { b->crc32 = crc; }$/;"	f
cram_block_set_data	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_data(cram_block *b, void *data) { BLOCK_DATA(b) = data; }$/;"	f
cram_block_set_offset	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_offset(cram_block *b, size_t offset) { BLOCK_SIZE(b) = offset; }$/;"	f
cram_block_set_size	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_size(cram_block *b, int32_t size) { BLOCK_SIZE(b) = size; }$/;"	f
cram_block_set_uncomp_size	src/utils/htslib/cram/cram_external.c	/^void cram_block_set_uncomp_size(cram_block *b, int32_t size) { b->uncomp_size = size; }$/;"	f
cram_block_size	src/utils/htslib/cram/cram_io.c	/^uint32_t cram_block_size(cram_block *b) {$/;"	f
cram_block_slice_hdr	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_block_slice_hdr {$/;"	s
cram_block_slice_hdr	src/utils/htslib/cram/cram_structs.h	/^} cram_block_slice_hdr;$/;"	t	typeref:struct:cram_block_slice_hdr
cram_block_slice_hdr	src/utils/htslib/htslib/cram.h	/^typedef struct cram_block_slice_hdr cram_block_slice_hdr;$/;"	t	typeref:struct:cram_block_slice_hdr
cram_block_update_size	src/utils/htslib/cram/cram_external.c	/^void cram_block_update_size(cram_block *b) { BLOCK_UPLEN(b); }$/;"	f
cram_byte_array_len_decode	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_len_decode(cram_slice *slice, cram_codec *c,$/;"	f
cram_byte_array_len_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_byte_array_len_decode_free(cram_codec *c) {$/;"	f
cram_byte_array_len_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_byte_array_len_decode_init(char *data, int size,$/;"	f
cram_byte_array_len_decode_reset	src/utils/htslib/cram/cram_codecs.c	/^static void cram_byte_array_len_decode_reset(cram_codec *c) {$/;"	f	file:
cram_byte_array_len_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_byte_array_len_decoder;$/;"	t	typeref:struct:__anon77
cram_byte_array_len_encode	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_len_encode(cram_slice *slice, cram_codec *c,$/;"	f
cram_byte_array_len_encode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_byte_array_len_encode_free(cram_codec *c) {$/;"	f
cram_byte_array_len_encode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_byte_array_len_encode_init(cram_stats *st,$/;"	f
cram_byte_array_len_encode_store	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_len_encode_store(cram_codec *c, cram_block *b,$/;"	f
cram_byte_array_len_encoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_byte_array_len_encoder;$/;"	t	typeref:struct:__anon79
cram_byte_array_stop_decode_block	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_stop_decode_block(cram_slice *slice, cram_codec *c,$/;"	f
cram_byte_array_stop_decode_char	src/utils/htslib/cram/cram_codecs.c	/^static int cram_byte_array_stop_decode_char(cram_slice *slice, cram_codec *c,$/;"	f	file:
cram_byte_array_stop_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_byte_array_stop_decode_free(cram_codec *c) {$/;"	f
cram_byte_array_stop_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_byte_array_stop_decode_init(char *data, int size,$/;"	f
cram_byte_array_stop_decode_reset	src/utils/htslib/cram/cram_codecs.c	/^static void cram_byte_array_stop_decode_reset(cram_codec *c) {$/;"	f	file:
cram_byte_array_stop_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_byte_array_stop_decoder;$/;"	t	typeref:struct:__anon78
cram_byte_array_stop_encode	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_stop_encode(cram_slice *slice, cram_codec *c,$/;"	f
cram_byte_array_stop_encode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_byte_array_stop_encode_free(cram_codec *c) {$/;"	f
cram_byte_array_stop_encode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_byte_array_stop_encode_init(cram_stats *st,$/;"	f
cram_byte_array_stop_encode_store	src/utils/htslib/cram/cram_codecs.c	/^int cram_byte_array_stop_encode_store(cram_codec *c, cram_block *b,$/;"	f
cram_check_EOF	src/utils/htslib/cram/cram_io.c	/^int cram_check_EOF(cram_fd *fd)$/;"	f
cram_cigar	src/utils/htslib/cram/cram_structs.h	466;"	d
cram_close	src/utils/htslib/cram/cram_io.c	/^int cram_close(cram_fd *fd) {$/;"	f
cram_codec	src/utils/htslib/cram/cram_codecs.h	/^typedef struct cram_codec {$/;"	s
cram_codec	src/utils/htslib/cram/cram_codecs.h	/^} cram_codec;$/;"	t	typeref:struct:cram_codec
cram_codec_decoder2encoder	src/utils/htslib/cram/cram_codecs.c	/^int cram_codec_decoder2encoder(cram_fd *fd, cram_codec *c) {$/;"	f
cram_codec_to_id	src/utils/htslib/cram/cram_codecs.c	/^int cram_codec_to_id(cram_codec *c, int *id2) {$/;"	f
cram_compress_block	src/utils/htslib/cram/cram_io.c	/^int cram_compress_block(cram_fd *fd, cram_block *b, cram_metrics *metrics,$/;"	f
cram_compress_by_method	src/utils/htslib/cram/cram_io.c	/^static char *cram_compress_by_method(char *in, size_t in_size,$/;"	f	file:
cram_compress_slice	src/utils/htslib/cram/cram_encode.c	/^static int cram_compress_slice(cram_fd *fd, cram_container *c, cram_slice *s) {$/;"	f	file:
cram_container	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_container {$/;"	s
cram_container	src/utils/htslib/cram/cram_structs.h	/^} cram_container;$/;"	t	typeref:struct:cram_container
cram_container	src/utils/htslib/htslib/cram.h	/^typedef struct cram_container cram_container;$/;"	t	typeref:struct:cram_container
cram_container_get_landmarks	src/utils/htslib/cram/cram_external.c	/^int32_t *cram_container_get_landmarks(cram_container *c, int32_t *num_landmarks) {$/;"	f
cram_container_get_length	src/utils/htslib/cram/cram_external.c	/^int32_t cram_container_get_length(cram_container *c) {$/;"	f
cram_container_get_num_blocks	src/utils/htslib/cram/cram_external.c	/^int32_t cram_container_get_num_blocks(cram_container *c) {$/;"	f
cram_container_is_empty	src/utils/htslib/cram/cram_external.c	/^int cram_container_is_empty(cram_fd *fd) {$/;"	f
cram_container_set_landmarks	src/utils/htslib/cram/cram_external.c	/^void cram_container_set_landmarks(cram_container *c, int32_t num_landmarks,$/;"	f
cram_container_set_length	src/utils/htslib/cram/cram_external.c	/^void cram_container_set_length(cram_container *c, int32_t length) {$/;"	f
cram_container_set_num_blocks	src/utils/htslib/cram/cram_external.c	/^void cram_container_set_num_blocks(cram_container *c, int32_t num_blocks) {$/;"	f
cram_container_size	src/utils/htslib/cram/cram_io.c	/^int cram_container_size(cram_container *c) {$/;"	f
cram_content_type	src/utils/htslib/cram/cram_structs.h	/^enum cram_content_type {$/;"	g
cram_content_type	src/utils/htslib/htslib/cram.h	/^enum cram_content_type {$/;"	g
cram_content_type2str	src/utils/htslib/cram/cram_io.c	/^char *cram_content_type2str(enum cram_content_type t) {$/;"	f
cram_copy_slice	src/utils/htslib/cram/cram_external.c	/^int cram_copy_slice(cram_fd *in, cram_fd *out, int32_t num_slice) {$/;"	f
cram_decode_TD	src/utils/htslib/cram/cram_decode.c	/^int cram_decode_TD(char *cp, const char *endp, cram_block_compression_hdr *h) {$/;"	f
cram_decode_aux	src/utils/htslib/cram/cram_decode.c	/^static int cram_decode_aux(cram_container *c, cram_slice *s,$/;"	f	file:
cram_decode_aux_1_0	src/utils/htslib/cram/cram_decode.c	/^static int cram_decode_aux_1_0(cram_container *c, cram_slice *s,$/;"	f	file:
cram_decode_compression_header	src/utils/htslib/cram/cram_decode.c	/^cram_block_compression_hdr *cram_decode_compression_header(cram_fd *fd,$/;"	f
cram_decode_estimate_sizes	src/utils/htslib/cram/cram_decode.c	/^void cram_decode_estimate_sizes(cram_block_compression_hdr *hdr, cram_slice *s,$/;"	f
cram_decode_job	src/utils/htslib/cram/cram_decode.c	/^} cram_decode_job;$/;"	t	typeref:struct:__anon97	file:
cram_decode_seq	src/utils/htslib/cram/cram_decode.c	/^static int cram_decode_seq(cram_fd *fd, cram_container *c, cram_slice *s,$/;"	f	file:
cram_decode_slice	src/utils/htslib/cram/cram_decode.c	/^int cram_decode_slice(cram_fd *fd, cram_container *c, cram_slice *s,$/;"	f
cram_decode_slice_header	src/utils/htslib/cram/cram_decode.c	/^cram_block_slice_hdr *cram_decode_slice_header(cram_fd *fd, cram_block *b) {$/;"	f
cram_decode_slice_mt	src/utils/htslib/cram/cram_decode.c	/^int cram_decode_slice_mt(cram_fd *fd, cram_container *c, cram_slice *s,$/;"	f
cram_decode_slice_thread	src/utils/htslib/cram/cram_decode.c	/^void *cram_decode_slice_thread(void *arg) {$/;"	f
cram_decode_slice_xref	src/utils/htslib/cram/cram_decode.c	/^static int cram_decode_slice_xref(cram_slice *s, int required_fields) {$/;"	f	file:
cram_decoder_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_decoder_init(enum cram_encoding codec,$/;"	f
cram_dependent_data_series	src/utils/htslib/cram/cram_decode.c	/^int cram_dependent_data_series(cram_fd *fd,$/;"	f
cram_dopen	src/utils/htslib/cram/cram_io.c	/^cram_fd *cram_dopen(hFILE *fp, const char *filename, const char *mode) {$/;"	f
cram_ds_unique	src/utils/htslib/cram/cram_decode.c	/^static int cram_ds_unique(cram_block_compression_hdr *hdr, cram_codec *c,$/;"	f	file:
cram_encode_aux	src/utils/htslib/cram/cram_encode.c	/^static char *cram_encode_aux(cram_fd *fd, bam_seq_t *b, cram_container *c,$/;"	f	file:
cram_encode_aux_1_0	src/utils/htslib/cram/cram_encode.c	/^static char *cram_encode_aux_1_0(cram_fd *fd, bam_seq_t *b, cram_container *c,$/;"	f	file:
cram_encode_compression_header	src/utils/htslib/cram/cram_encode.c	/^cram_block *cram_encode_compression_header(cram_fd *fd, cram_container *c,$/;"	f
cram_encode_container	src/utils/htslib/cram/cram_encode.c	/^int cram_encode_container(cram_fd *fd, cram_container *c) {$/;"	f
cram_encode_slice	src/utils/htslib/cram/cram_encode.c	/^static int cram_encode_slice(cram_fd *fd, cram_container *c,$/;"	f	file:
cram_encode_slice_header	src/utils/htslib/cram/cram_encode.c	/^cram_block *cram_encode_slice_header(cram_fd *fd, cram_slice *s) {$/;"	f
cram_encode_slice_read	src/utils/htslib/cram/cram_encode.c	/^static int cram_encode_slice_read(cram_fd *fd,$/;"	f	file:
cram_encoder_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_encoder_init(enum cram_encoding codec,$/;"	f
cram_encoding	src/utils/htslib/cram/cram_structs.h	/^enum cram_encoding {$/;"	g
cram_encoding2str	src/utils/htslib/cram/cram_codecs.c	/^const char *cram_encoding2str(enum cram_encoding t) {$/;"	f
cram_eof	src/utils/htslib/cram/cram_io.c	/^int cram_eof(cram_fd *fd) {$/;"	f
cram_external_decode_block	src/utils/htslib/cram/cram_codecs.c	/^static int cram_external_decode_block(cram_slice *slice, cram_codec *c,$/;"	f	file:
cram_external_decode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_external_decode_char(cram_slice *slice, cram_codec *c,$/;"	f
cram_external_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_external_decode_free(cram_codec *c) {$/;"	f
cram_external_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_external_decode_init(char *data, int size,$/;"	f
cram_external_decode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_external_decode_int(cram_slice *slice, cram_codec *c,$/;"	f
cram_external_decode_reset	src/utils/htslib/cram/cram_codecs.c	/^static void cram_external_decode_reset(cram_codec *c) {$/;"	f	file:
cram_external_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_external_decoder;$/;"	t	typeref:struct:__anon76
cram_external_encode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_external_encode_char(cram_slice *slice, cram_codec *c,$/;"	f
cram_external_encode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_external_encode_free(cram_codec *c) {$/;"	f
cram_external_encode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_external_encode_init(cram_stats *st,$/;"	f
cram_external_encode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_external_encode_int(cram_slice *slice, cram_codec *c,$/;"	f
cram_external_encode_store	src/utils/htslib/cram/cram_codecs.c	/^int cram_external_encode_store(cram_codec *c, cram_block *b, char *prefix,$/;"	f
cram_external_type	src/utils/htslib/cram/cram_structs.h	/^enum cram_external_type {$/;"	g
cram_extract_block	src/utils/htslib/cram/cram_codecs.c	/^static char *cram_extract_block(cram_block *b, int size) {$/;"	f	file:
cram_fd	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_fd {$/;"	s
cram_fd	src/utils/htslib/cram/cram_structs.h	/^} cram_fd;$/;"	t	typeref:struct:cram_fd
cram_fd	src/utils/htslib/htslib/cram.h	/^typedef struct cram_fd cram_fd;$/;"	t	typeref:struct:cram_fd
cram_fd_get_fp	src/utils/htslib/cram/cram_external.c	/^hFILE *cram_fd_get_fp(cram_fd *fd) { return fd->fp; }$/;"	f
cram_fd_get_header	src/utils/htslib/cram/cram_external.c	/^SAM_hdr *cram_fd_get_header(cram_fd *fd) { return fd->header; }$/;"	f
cram_fd_get_version	src/utils/htslib/cram/cram_external.c	/^int cram_fd_get_version(cram_fd *fd) { return fd->version; }$/;"	f
cram_fd_set_fp	src/utils/htslib/cram/cram_external.c	/^void cram_fd_set_fp(cram_fd *fd, hFILE *fp) { fd->fp = fp; }$/;"	f
cram_fd_set_header	src/utils/htslib/cram/cram_external.c	/^void cram_fd_set_header(cram_fd *fd, SAM_hdr *hdr) { fd->header = hdr; }$/;"	f
cram_fd_set_version	src/utils/htslib/cram/cram_external.c	/^void cram_fd_set_version(cram_fd *fd, int vers) { fd->version = vers; }$/;"	f
cram_feature	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_feature {$/;"	s
cram_feature	src/utils/htslib/cram/cram_structs.h	/^} cram_feature;$/;"	t	typeref:struct:cram_feature
cram_fields	src/utils/htslib/cram/cram_structs.h	/^enum cram_fields {$/;"	g
cram_file_def	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_file_def {$/;"	s
cram_file_def	src/utils/htslib/cram/cram_structs.h	/^} cram_file_def;$/;"	t	typeref:struct:cram_file_def
cram_file_def	src/utils/htslib/htslib/cram.h	/^typedef struct cram_file_def cram_file_def;$/;"	t	typeref:struct:cram_file_def
cram_flag_swap	src/utils/htslib/cram/cram_structs.h	/^    unsigned int cram_flag_swap[0x1000];\/\/ bam -> cram flags$/;"	m	struct:cram_fd
cram_flags	src/utils/htslib/cram/cram_structs.h	/^    int32_t cram_flags;   \/\/ CF$/;"	m	struct:cram_record
cram_flush	src/utils/htslib/cram/cram_io.c	/^int cram_flush(cram_fd *fd) {$/;"	f
cram_flush_container	src/utils/htslib/cram/cram_io.c	/^int cram_flush_container(cram_fd *fd, cram_container *c) {$/;"	f
cram_flush_container2	src/utils/htslib/cram/cram_io.c	/^static int cram_flush_container2(cram_fd *fd, cram_container *c) {$/;"	f	file:
cram_flush_container_mt	src/utils/htslib/cram/cram_io.c	/^int cram_flush_container_mt(cram_fd *fd, cram_container *c) {$/;"	f
cram_flush_result	src/utils/htslib/cram/cram_io.c	/^static int cram_flush_result(cram_fd *fd) {$/;"	f	file:
cram_flush_thread	src/utils/htslib/cram/cram_io.c	/^void *cram_flush_thread(void *arg) {$/;"	f
cram_free_block	src/utils/htslib/cram/cram_io.c	/^void cram_free_block(cram_block *b) {$/;"	f
cram_free_compression_header	src/utils/htslib/cram/cram_io.c	/^void cram_free_compression_header(cram_block_compression_hdr *hdr) {$/;"	f
cram_free_container	src/utils/htslib/cram/cram_io.c	/^void cram_free_container(cram_container *c) {$/;"	f
cram_free_file_def	src/utils/htslib/cram/cram_io.c	/^void cram_free_file_def(cram_file_def *def) {$/;"	f
cram_free_slice	src/utils/htslib/cram/cram_io.c	/^void cram_free_slice(cram_slice *s) {$/;"	f
cram_free_slice_header	src/utils/htslib/cram/cram_io.c	/^void cram_free_slice_header(cram_block_slice_hdr *hdr) {$/;"	f
cram_gamma_decode	src/utils/htslib/cram/cram_codecs.c	/^int cram_gamma_decode(cram_slice *slice, cram_codec *c, cram_block *in, char *out, int *out_size) {$/;"	f
cram_gamma_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_gamma_decode_free(cram_codec *c) {$/;"	f
cram_gamma_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_gamma_decode_init(char *data, int size,$/;"	f
cram_gamma_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_gamma_decoder;$/;"	t	typeref:struct:__anon74
cram_get_bam_seq	src/utils/htslib/cram/cram_decode.c	/^int cram_get_bam_seq(cram_fd *fd, bam_seq_t **bam) {$/;"	f
cram_get_block_by_id	src/utils/htslib/cram/cram_io.h	/^static inline cram_block *cram_get_block_by_id(cram_slice *slice, int id) {$/;"	f
cram_get_ref	src/utils/htslib/cram/cram_io.c	/^char *cram_get_ref(cram_fd *fd, int id, int start, int end) {$/;"	f
cram_get_refs	src/utils/htslib/cram/cram_external.c	/^refs_t *cram_get_refs(htsFile *fd) {$/;"	f
cram_get_seq	src/utils/htslib/cram/cram_decode.c	/^cram_record *cram_get_seq(cram_fd *fd) {$/;"	f
cram_h	src/utils/htslib/Makefile	/^cram_h = cram\/cram.h $(cram_samtools_h) $(cram_sam_header_h) $(cram_structs_h) $(cram_io_h) cram\/cram_encode.h cram\/cram_decode.h cram\/cram_stats.h cram\/cram_codecs.h cram\/cram_index.h $(htslib_cram_h)$/;"	m
cram_header_to_bam	src/utils/htslib/cram/cram_samtools.c	/^bam_hdr_t *cram_header_to_bam(SAM_hdr *h) {$/;"	f
cram_hfile	src/utils/htslib/cram/cram_io.h	/^static inline struct hFILE *cram_hfile(cram_fd *fd) {$/;"	f
cram_huffman_code	src/utils/htslib/cram/cram_codecs.h	/^} cram_huffman_code;$/;"	t	typeref:struct:__anon70
cram_huffman_decode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_decode_char(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_decode_char0	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_decode_char0(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_huffman_decode_free(cram_codec *c) {$/;"	f
cram_huffman_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_huffman_decode_init(char *data, int size,$/;"	f
cram_huffman_decode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_decode_int(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_decode_int0	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_decode_int0(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_decode_null	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_decode_null(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_huffman_decoder;$/;"	t	typeref:struct:__anon71
cram_huffman_encode_char	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_encode_char(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_encode_char0	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_encode_char0(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_encode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_huffman_encode_free(cram_codec *c) {$/;"	f
cram_huffman_encode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_huffman_encode_init(cram_stats *st,$/;"	f
cram_huffman_encode_int	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_encode_int(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_encode_int0	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_encode_int0(cram_slice *slice, cram_codec *c,$/;"	f
cram_huffman_encode_store	src/utils/htslib/cram/cram_codecs.c	/^int cram_huffman_encode_store(cram_codec *c, cram_block *b, char *prefix,$/;"	f
cram_huffman_encoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_huffman_encoder;$/;"	t	typeref:struct:__anon72
cram_index	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_index {$/;"	s
cram_index	src/utils/htslib/cram/cram_structs.h	/^} cram_index;$/;"	t	typeref:struct:cram_index
cram_index_build	src/utils/htslib/cram/cram_index.c	/^int cram_index_build(cram_fd *fd, const char *fn_base, const char *fn_idx) {$/;"	f
cram_index_build_multiref	src/utils/htslib/cram/cram_index.c	/^static int cram_index_build_multiref(cram_fd *fd,$/;"	f	file:
cram_index_free	src/utils/htslib/cram/cram_index.c	/^void cram_index_free(cram_fd *fd) {$/;"	f
cram_index_free_recurse	src/utils/htslib/cram/cram_index.c	/^static void cram_index_free_recurse(cram_index *e) {$/;"	f	file:
cram_index_load	src/utils/htslib/cram/cram_index.c	/^int cram_index_load(cram_fd *fd, const char *fn, const char *fn_idx) {$/;"	f
cram_index_query	src/utils/htslib/cram/cram_index.c	/^cram_index *cram_index_query(cram_fd *fd, int refid, int pos, $/;"	f
cram_init_tables	src/utils/htslib/cram/cram_io.c	/^static void cram_init_tables(cram_fd *fd) {$/;"	f	file:
cram_io_h	src/utils/htslib/Makefile	/^cram_io_h = cram\/cram_io.h $(cram_misc_h)$/;"	m
cram_itr_query	src/utils/htslib/sam.c	/^static hts_itr_t *cram_itr_query(const hts_idx_t *idx, int tid, int beg, int end, hts_readrec_func *readrec)$/;"	f	file:
cram_job	src/utils/htslib/cram/cram_io.c	/^} cram_job;$/;"	t	typeref:struct:__anon69	file:
cram_load_reference	src/utils/htslib/cram/cram_io.c	/^int cram_load_reference(cram_fd *fd, char *fn) {$/;"	f
cram_major_vers	src/utils/htslib/cram/cram_external.c	/^int cram_major_vers(cram_fd *fd) { return CRAM_MAJOR_VERS(fd->version); }$/;"	f
cram_map	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_map {$/;"	s
cram_map	src/utils/htslib/cram/cram_structs.h	/^} cram_map;$/;"	t	typeref:struct:cram_map
cram_metrics	src/utils/htslib/cram/cram_structs.h	/^} cram_metrics;$/;"	t	typeref:struct:__anon82
cram_metrics	src/utils/htslib/htslib/cram.h	/^typedef struct cram_metrics cram_metrics;$/;"	t	typeref:struct:cram_metrics
cram_minor_vers	src/utils/htslib/cram/cram_external.c	/^int cram_minor_vers(cram_fd *fd) { return CRAM_MINOR_VERS(fd->version); }$/;"	f
cram_misc_h	src/utils/htslib/Makefile	/^cram_misc_h = cram\/misc.h $(cram_os_h)$/;"	m
cram_mstrand	src/utils/htslib/cram/cram_structs.h	465;"	d
cram_name2id	src/utils/htslib/sam.c	/^static int cram_name2id(void *fdv, const char *ref)$/;"	f	file:
cram_name_len	src/utils/htslib/cram/cram_structs.h	463;"	d
cram_new_block	src/utils/htslib/cram/cram_io.c	/^cram_block *cram_new_block(enum cram_content_type content_type,$/;"	f
cram_new_compression_header	src/utils/htslib/cram/cram_io.c	/^cram_block_compression_hdr *cram_new_compression_header(void) {$/;"	f
cram_new_container	src/utils/htslib/cram/cram_io.c	/^cram_container *cram_new_container(int nrec, int nslice) {$/;"	f
cram_new_metrics	src/utils/htslib/cram/cram_io.c	/^cram_metrics *cram_new_metrics(void) {$/;"	f
cram_new_slice	src/utils/htslib/cram/cram_io.c	/^cram_slice *cram_new_slice(enum cram_content_type type, int nrecs) {$/;"	f
cram_next_container	src/utils/htslib/cram/cram_encode.c	/^static cram_container *cram_next_container(cram_fd *fd, bam_seq_t *b) {$/;"	f	file:
cram_next_slice	src/utils/htslib/cram/cram_decode.c	/^static cram_slice *cram_next_slice(cram_fd *fd, cram_container **cp) {$/;"	f	file:
cram_nop_decode_reset	src/utils/htslib/cram/cram_codecs.c	/^void cram_nop_decode_reset(cram_codec *c) {}$/;"	f
cram_not_enough_bits	src/utils/htslib/cram/cram_codecs.h	/^static inline int cram_not_enough_bits(cram_block *blk, int nbits) {$/;"	f
cram_open	src/utils/htslib/cram/cram_io.c	/^cram_fd *cram_open(const char *filename, const char *mode) {$/;"	f
cram_open_trace_file_h	src/utils/htslib/Makefile	/^cram_open_trace_file_h = cram\/open_trace_file.h cram\/mFILE.h$/;"	m
cram_option	src/utils/htslib/htslib/hts.h	244;"	d
cram_os_h	src/utils/htslib/Makefile	/^cram_os_h = cram\/os.h $(htslib_hts_endian_h)$/;"	m
cram_populate_ref	src/utils/htslib/cram/cram_io.c	/^static int cram_populate_ref(cram_fd *fd, int id, ref_entry *r) {$/;"	f	file:
cram_put_bam_seq	src/utils/htslib/cram/cram_encode.c	/^int cram_put_bam_seq(cram_fd *fd, bam_seq_t *b) {$/;"	f
cram_qname	src/utils/htslib/cram/cram_structs.h	458;"	d
cram_qual	src/utils/htslib/cram/cram_structs.h	460;"	d
cram_range	src/utils/htslib/cram/cram_structs.h	/^} cram_range;$/;"	t	typeref:struct:__anon96
cram_read_SAM_hdr	src/utils/htslib/cram/cram_io.c	/^SAM_hdr *cram_read_SAM_hdr(cram_fd *fd) {$/;"	f
cram_read_block	src/utils/htslib/cram/cram_io.c	/^cram_block *cram_read_block(cram_fd *fd) {$/;"	f
cram_read_container	src/utils/htslib/cram/cram_io.c	/^cram_container *cram_read_container(cram_fd *fd) {$/;"	f
cram_read_file_def	src/utils/htslib/cram/cram_io.c	/^cram_file_def *cram_read_file_def(cram_fd *fd) {$/;"	f
cram_read_slice	src/utils/htslib/cram/cram_io.c	/^cram_slice *cram_read_slice(cram_fd *fd) {$/;"	f
cram_readrec	src/utils/htslib/sam.c	/^static int cram_readrec(BGZF *ignored, void *fpv, void *bv, int *tid, int *beg, int *end)$/;"	f	file:
cram_record	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_record {$/;"	s
cram_record	src/utils/htslib/cram/cram_structs.h	/^} cram_record;$/;"	t	typeref:struct:cram_record
cram_ref_decr	src/utils/htslib/cram/cram_io.c	/^void cram_ref_decr(refs_t *r, int id) {$/;"	f
cram_ref_decr_locked	src/utils/htslib/cram/cram_io.c	/^static void cram_ref_decr_locked(refs_t *r, int id) {$/;"	f	file:
cram_ref_incr	src/utils/htslib/cram/cram_io.c	/^void cram_ref_incr(refs_t *r, int id) {$/;"	f
cram_ref_incr_locked	src/utils/htslib/cram/cram_io.c	/^static void cram_ref_incr_locked(refs_t *r, int id) {$/;"	f	file:
cram_ref_load	src/utils/htslib/cram/cram_io.c	/^ref_entry *cram_ref_load(refs_t *r, int id, int is_md5) {$/;"	f
cram_sam_header_h	src/utils/htslib/Makefile	/^cram_sam_header_h = cram\/sam_header.h cram\/string_alloc.h cram\/pooled_alloc.h $(htslib_khash_h) $(htslib_kstring_h)$/;"	m
cram_samtools_h	src/utils/htslib/Makefile	/^cram_samtools_h = cram\/cram_samtools.h $(htslib_sam_h) $(cram_sam_header_h)$/;"	m
cram_seek	src/utils/htslib/cram/cram_io.c	/^int cram_seek(cram_fd *fd, off_t offset, int whence) {$/;"	f
cram_seek_to_refpos	src/utils/htslib/cram/cram_index.c	/^int cram_seek_to_refpos(cram_fd *fd, cram_range *r) {$/;"	f
cram_seq	src/utils/htslib/cram/cram_structs.h	459;"	d
cram_seqi	src/utils/htslib/cram/cram_structs.h	462;"	d
cram_set_header	src/utils/htslib/cram/cram_io.c	/^int cram_set_header(cram_fd *fd, SAM_hdr *hdr) {$/;"	f
cram_set_option	src/utils/htslib/cram/cram_io.c	/^int cram_set_option(cram_fd *fd, enum hts_fmt_option opt, ...) {$/;"	f
cram_set_voption	src/utils/htslib/cram/cram_io.c	/^int cram_set_voption(cram_fd *fd, enum hts_fmt_option opt, va_list args) {$/;"	f
cram_slice	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_slice {$/;"	s
cram_slice	src/utils/htslib/cram/cram_structs.h	/^} cram_slice;$/;"	t	typeref:struct:cram_slice
cram_slice	src/utils/htslib/htslib/cram.h	/^typedef struct cram_slice cram_slice;$/;"	t	typeref:struct:cram_slice
cram_slice_hdr_get_num_blocks	src/utils/htslib/cram/cram_external.c	/^int32_t cram_slice_hdr_get_num_blocks(cram_block_slice_hdr *hdr) {$/;"	f
cram_stats	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_stats {$/;"	s
cram_stats	src/utils/htslib/cram/cram_structs.h	/^} cram_stats;$/;"	t	typeref:struct:cram_stats
cram_stats_add	src/utils/htslib/cram/cram_stats.c	/^void cram_stats_add(cram_stats *st, int32_t val) {$/;"	f
cram_stats_create	src/utils/htslib/cram/cram_stats.c	/^cram_stats *cram_stats_create(void) {$/;"	f
cram_stats_del	src/utils/htslib/cram/cram_stats.c	/^void cram_stats_del(cram_stats *st, int32_t val) {$/;"	f
cram_stats_dump	src/utils/htslib/cram/cram_stats.c	/^void cram_stats_dump(cram_stats *st) {$/;"	f
cram_stats_encoding	src/utils/htslib/cram/cram_stats.c	/^enum cram_encoding cram_stats_encoding(cram_fd *fd, cram_stats *st) {$/;"	f
cram_stats_free	src/utils/htslib/cram/cram_stats.c	/^void cram_stats_free(cram_stats *st) {$/;"	f
cram_store_container	src/utils/htslib/cram/cram_io.c	/^int cram_store_container(cram_fd *fd, cram_container *c, char *dat, int *size)$/;"	f
cram_strand	src/utils/htslib/cram/cram_structs.h	464;"	d
cram_structs_h	src/utils/htslib/Makefile	/^cram_structs_h = cram\/cram_structs.h $(htslib_thread_pool_h) cram\/string_alloc.h $(htslib_khash_h)$/;"	m
cram_sub_matrix	src/utils/htslib/cram/cram_structs.h	/^    char cram_sub_matrix[32][32];	\/\/ base substituion codes$/;"	m	struct:cram_fd
cram_subexp_decode	src/utils/htslib/cram/cram_codecs.c	/^int cram_subexp_decode(cram_slice *slice, cram_codec *c, cram_block *in, char *out, int *out_size) {$/;"	f
cram_subexp_decode_free	src/utils/htslib/cram/cram_codecs.c	/^void cram_subexp_decode_free(cram_codec *c) {$/;"	f
cram_subexp_decode_init	src/utils/htslib/cram/cram_codecs.c	/^cram_codec *cram_subexp_decode_init(char *data, int size,$/;"	f
cram_subexp_decoder	src/utils/htslib/cram/cram_codecs.h	/^} cram_subexp_decoder;$/;"	t	typeref:struct:__anon75
cram_tag_map	src/utils/htslib/cram/cram_structs.h	/^typedef struct cram_tag_map {$/;"	s
cram_tag_map	src/utils/htslib/cram/cram_structs.h	/^} cram_tag_map;$/;"	t	typeref:struct:cram_tag_map
cram_to_bam	src/utils/htslib/cram/cram_decode.c	/^static int cram_to_bam(SAM_hdr *bfd, cram_fd *fd, cram_slice *s,$/;"	f	file:
cram_transcode_rg	src/utils/htslib/cram/cram_external.c	/^int cram_transcode_rg(cram_fd *in, cram_fd *out,$/;"	f
cram_uncompress_block	src/utils/htslib/cram/cram_io.c	/^int cram_uncompress_block(cram_block *b) {$/;"	f
cram_update_curr_slice	src/utils/htslib/cram/cram_encode.c	/^void cram_update_curr_slice(cram_container *c) {$/;"	f
cram_write_SAM_hdr	src/utils/htslib/cram/cram_io.c	/^int cram_write_SAM_hdr(cram_fd *fd, SAM_hdr *hdr) {$/;"	f
cram_write_block	src/utils/htslib/cram/cram_io.c	/^int cram_write_block(cram_fd *fd, cram_block *b) {$/;"	f
cram_write_container	src/utils/htslib/cram/cram_io.c	/^int cram_write_container(cram_fd *fd, cram_container *c) {$/;"	f
cram_write_file_def	src/utils/htslib/cram/cram_io.c	/^int cram_write_file_def(cram_fd *fd, cram_file_def *def) {$/;"	f
crc32	src/utils/htslib/cram/cram_structs.h	/^    uint32_t crc32;       \/\/ CRC32$/;"	m	struct:cram_container
crc32	src/utils/htslib/cram/cram_structs.h	/^    uint32_t crc32;$/;"	m	struct:cram_block
crecs	src/utils/htslib/cram/cram_structs.h	/^    cram_record *crecs;$/;"	m	struct:cram_slice
creg	src/utils/htslib/synced_bcf_reader.c	/^    int nregs, mregs, creg;$/;"	m	struct:_region_t	file:
csi	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
cstate_t	src/utils/htslib/sam.c	/^} cstate_t;$/;"	t	typeref:struct:__anon6	file:
ctr	src/utils/htslib/cram/cram_structs.h	/^    cram_container *ctr;$/;"	m	struct:cram_fd
ctrl_fd	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
curl	src/utils/htslib/hfile_libcurl.c	/^} curl = { { 0, 0, NULL }, NULL, PTHREAD_MUTEX_INITIALIZER };$/;"	v	typeref:struct:__anon105	file:
currDist	src/utils/NewChromsweep/CloseSweep.h	/^	int currDist(constIterType iter) const { return _distIndex[iter].first; }$/;"	f	class:RecDistList
currNumElems	src/utils/NewChromsweep/CloseSweep.h	/^	size_t currNumElems(constIterType iter) const { return allElems(iter)->size(); }$/;"	f	class:RecDistList
curr_beg	src/utils/htslib/htslib/hts.h	/^    int curr_tid, curr_beg, curr_end;$/;"	m	struct:__anon16
curr_c_rec	src/utils/htslib/cram/cram_structs.h	/^    int max_c_rec, curr_c_rec;   \/\/ current and max recs per container$/;"	m	struct:cram_container
curr_end	src/utils/htslib/htslib/hts.h	/^    int curr_tid, curr_beg, curr_end;$/;"	m	struct:__anon16
curr_job	src/utils/htslib/bgzf.c	/^    bgzf_job *curr_job;$/;"	m	struct:bgzf_mtaux_t	file:
curr_off	src/utils/htslib/htslib/hts.h	/^    uint64_t curr_off;$/;"	m	struct:__anon16
curr_rec	src/utils/htslib/cram/cram_structs.h	/^    int max_rec, curr_rec;       \/\/ current and max recs per slice$/;"	m	struct:cram_container
curr_ref	src/utils/htslib/cram/cram_structs.h	/^    int curr_ref;                \/\/ current ref ID. -2 for no previous$/;"	m	struct:cram_container
curr_serial	src/utils/htslib/thread_pool_internal.h	/^    uint64_t curr_serial;            \/\/ current serial (next input)$/;"	m	struct:hts_tpool_process
curr_slice	src/utils/htslib/cram/cram_structs.h	/^    int max_slice, curr_slice;   \/\/ maximum number of slices$/;"	m	struct:cram_container
curr_tid	src/utils/htslib/htslib/hts.h	/^    int curr_tid, curr_beg, curr_end;$/;"	m	struct:__anon16
current	src/utils/htslib/multipart.c	/^    size_t nparts, maxparts, current;$/;"	m	struct:__anon106	file:
current_bedgraph_item	src/unionBedGraphs/unionBedGraphs.h	/^    vector<BEDGRAPH_TYPE>               current_bedgraph_item;$/;"	m	class:UnionBedGraphs
current_chrom	src/multiIntersectBed/multiIntersectBed.h	/^    std::string              current_chrom;$/;"	m	class:MultiIntersectBed
current_chrom	src/unionBedGraphs/unionBedGraphs.h	/^    std::string              current_chrom;$/;"	m	class:UnionBedGraphs
current_depth	src/multiIntersectBed/multiIntersectBed.h	/^    vector<int>        current_depth;$/;"	m	class:MultiIntersectBed
current_depth	src/unionBedGraphs/unionBedGraphs.h	/^    vector<BEDGRAPH_TYPE::DEPTH_TYPE>   current_depth;$/;"	m	class:UnionBedGraphs
current_item	src/multiIntersectBed/multiIntersectBed.h	/^    vector<BED>        current_item;$/;"	m	class:MultiIntersectBed
current_non_zero_inputs	src/multiIntersectBed/multiIntersectBed.h	/^    int                      current_non_zero_inputs;$/;"	m	class:MultiIntersectBed
current_non_zero_inputs	src/unionBedGraphs/unionBedGraphs.h	/^    int                      current_non_zero_inputs;$/;"	m	class:UnionBedGraphs
currentfp	src/utils/htslib/multipart.c	/^    hFILE *currentfp;$/;"	m	struct:__anon106	file:
custom	src/utils/htslib/htslib/hts.h	/^    no_compression, gzip, bgzf, custom,$/;"	e	enum:htsCompression
custom_free	src/utils/htslib/test/test-regidx.c	/^void custom_free(void *payload)$/;"	f
custom_parse	src/utils/htslib/test/test-regidx.c	/^int custom_parse(const char *line, char **chr_beg, char **chr_end, reg_t *reg, void *payload, void *usr)$/;"	f
cygpath	src/utils/htslib/test/test.pl	/^sub cygpath {$/;"	s
d	src/utils/htslib/htslib/hts.h	/^    float d, e;$/;"	m	struct:probaln_par_t
d	src/utils/htslib/htslib/vcf.h	/^    bcf_dec_t d; \/\/ lazy evaluation: $d is not generated by bcf_read(), but by explicitly calling bcf_unpack()$/;"	m	struct:__anon27
d	src/utils/htslib/md5.c	/^	hts_md5_u32plus a, b, c, d;$/;"	m	struct:hts_md5_context	file:
d	src/utils/htslib/test/hts_endian.c	/^    double d;$/;"	m	struct:__anon49	file:
data	src/utils/htslib/cram/cram_structs.h	/^    unsigned char    *data;$/;"	m	struct:cram_block
data	src/utils/htslib/cram/mFILE.h	/^    char *data;$/;"	m	struct:__anon60
data	src/utils/htslib/htslib/sam.h	/^    uint8_t *data;$/;"	m	struct:__anon40
data	src/utils/htslib/sam.c	/^    void *data;$/;"	m	struct:__bam_plp_t	file:
data	src/utils/htslib/thread_pool_internal.h	/^    void *data;      \/\/ result itself$/;"	m	struct:hts_tpool_result
data_series	src/utils/htslib/cram/cram_structs.h	/^    unsigned int data_series; \/\/ See cram_fields enum below$/;"	m	struct:cram_block_compression_hdr
datarootdir	src/utils/htslib/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
date	src/utils/htslib/hfile_s3.c	/^    char date[40];$/;"	m	struct:__anon55	file:
dbFinished	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::dbFinished(int dbIdx) {$/;"	f	class:NewChromSweep
debase64	src/utils/htslib/textutils.c	/^static int debase64(char c)$/;"	f	file:
debug_buffer	src/utils/htslib/synced_bcf_reader.c	/^void debug_buffer(FILE *fp, bcf_sr_t *reader)$/;"	f
debug_buffers	src/utils/htslib/synced_bcf_reader.c	/^void debug_buffers(FILE *fp, bcf_srs_t *files)$/;"	f
debug_vbuf	src/utils/htslib/bcf_sr_sort.c	/^void debug_vbuf(sr_sort_t *srt)$/;"	f
debug_vsets	src/utils/htslib/bcf_sr_sort.c	/^void debug_vsets(sr_sort_t *srt)$/;"	f
decode	src/utils/htslib/cram/cram_codecs.h	/^    int (*decode)(cram_slice *slice, struct cram_codec *codec,$/;"	m	struct:cram_codec
decode_init	src/utils/htslib/cram/cram_codecs.c	/^static cram_codec *(*decode_init[])(char *data,$/;"	v	file:
decode_md	src/utils/htslib/cram/cram_structs.h	/^    int decode_md; \/\/ Whether to export MD and NM tags$/;"	m	struct:cram_fd
decompress_peek	src/utils/htslib/hts.c	/^static size_t decompress_peek(hFILE *fp, unsigned char *dest, size_t destsize)$/;"	f	file:
defaultNumFixedFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	static const int defaultNumFixedFields = 3;$/;"	m	class:BedPlusInterval
defaultNumFixedFields	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	/^	static const int defaultNumFixedFields = 0;$/;"	m	class:NoPosPlusRecord
deflate_block	src/utils/htslib/bgzf.c	/^static int deflate_block(BGZF *fp, int block_length)$/;"	f	file:
dehex	src/utils/htslib/textutils.c	/^static int dehex(char c)$/;"	f	file:
deleteAllMergedItemsButKey	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^void FileRecordMergeMgr::deleteAllMergedItemsButKey(RecordKeyVector &recList) {$/;"	f	class:FileRecordMergeMgr
deleteBlocks	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^void BlockMgr::deleteBlocks(RecordKeyVector &keyList)$/;"	f	class:BlockMgr
deleteCurrent	src/utils/FileRecordTools/Records/RecordList.cpp	/^RecordListNode *RecordList::deleteCurrent() {$/;"	f	class:RecordList
deleteCurrent	src/utils/general/BTlist.h	/^	BTlistNode<T> * deleteCurrent() {$/;"	f	class:BTlist
deleteMergedRecord	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^void FileRecordMergeMgr::deleteMergedRecord(RecordKeyVector &recList)$/;"	f	class:FileRecordMergeMgr
deleteObj	src/utils/general/FreeList.h	/^	void deleteObj(const T *ptr) {$/;"	f	class:FreeList
deleteRecord	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::deleteRecord(RecordKeyVector *keyList) {$/;"	f	class:FileRecordMgr
deleteRecord	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::deleteRecord(const Record *record) {$/;"	f	class:FileRecordMgr
deleteRecord	src/utils/FileRecordTools/Records/RecordMgr.cpp	/^void RecordMgr::deleteRecord(const Record *record)$/;"	f	class:RecordMgr
delimiterTesting	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::delimiterTesting(vector<int> &counts, char suspectChar)$/;"	f	class:FileRecordTypeChecker
depth	src/utils/Point/Point.h	/^      std::string depth;$/;"	m	class:PointWithDepth
depth	src/utils/bedGraphFile/bedGraphFile.h	/^    T depth;$/;"	m	class:BEDGRAPH
depth	src/utils/htslib/htslib/ksort.h	/^	int depth;$/;"	m	struct:__anon35
depthMap	src/genomeCoverageBed/genomeCoverageBed.h	/^typedef map<int, DEPTH, less<int> > depthMap;$/;"	t
depthMap	src/utils/bedFile/bedFile.h	/^    map<unsigned int, DEPTH> depthMap;$/;"	m	struct:BEDCOV
depthMapList	src/utils/bedFile/bedFile.h	/^    vector< map<unsigned int, DEPTH> > depthMapList;$/;"	m	struct:BEDCOVLIST
depthMapType	src/coverageFile/coverageFile.h	/^	typedef map<size_t, size_t> depthMapType;$/;"	t	class:CoverageFile
destory	src/utils/BamTools/include/SamHeader.hpp	/^		void destory() $/;"	f	class:BamTools::SamHeader
destroy	src/utils/htslib/hfile_internal.h	/^    void (*destroy)(void);$/;"	m	struct:hFILE_plugin
detectAndHandleHeader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^bool SingleLineDelimTextFileReader::detectAndHandleHeader()$/;"	f	class:SingleLineDelimTextFileReader
detectBamOrBgzip	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^bool InputStreamMgr::detectBamOrBgzip(int &numChars, int currChar)$/;"	f	class:InputStreamMgr
determineOutputType	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::determineOutputType() {$/;"	f	class:ContextBase
determineOutputType	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::determineOutputType() {$/;"	f	class:ContextIntersect
df	test/fisher/plot.py	/^df = pd.read_csv(sys.argv[1])$/;"	v
dict	src/utils/htslib/htslib/tbx.h	/^    void *dict;$/;"	m	struct:__anon37
dict	src/utils/htslib/htslib/vcf.h	/^    void *dict[3];          \/\/ ID dictionary, contig dict and sample dict$/;"	m	struct:__anon21
die	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::die(const Record *record, const string str1, const string str2, const string str3) {$/;"	f	class:ContextBase
diffNames	src/utils/Contexts/ContextClosest.h	/^    bool diffNames() const { return _diffNames; }$/;"	f	class:ContextClosest
direction	src/utils/htslib/vcf_sweep.c	/^    int direction;          \/\/ to tell if the direction has changed$/;"	m	struct:_bcf_sweep_t	file:
dirty	src/utils/htslib/htslib/vcf.h	/^    int nhrec, dirty;$/;"	m	struct:__anon21
dirv	src/utils/htslib/hts_internal.h	/^    void *dirv;  \/\/ DIR * privately$/;"	m	struct:hts_path_itr
distanceTuple	src/utils/NewChromsweep/CloseSweep.h	/^	distanceTuple() : _dist(0), _rec(NULL), _isNeg(false) {}$/;"	f	class:distanceTuple
distanceTuple	src/utils/NewChromsweep/CloseSweep.h	/^	distanceTuple(int dist, Record *rec, bool isNeg = false) : _dist(dist), _rec(rec), _isNeg(isNeg) {}$/;"	f	class:distanceTuple
distanceTuple	src/utils/NewChromsweep/CloseSweep.h	/^class distanceTuple {$/;"	c
doCounts	src/coverageFile/coverageFile.cpp	/^void CoverageFile::doCounts(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:CoverageFile
doDefault	src/coverageFile/coverageFile.cpp	/^void CoverageFile::doDefault(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:CoverageFile
doEuristicSplitOnTotalSize	src/split/splitBed.cpp	/^int BedSplit::doEuristicSplitOnTotalSize()$/;"	f	class:BedSplit
doHist	src/coverageFile/coverageFile.cpp	/^void CoverageFile::doHist(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:CoverageFile
doMean	src/coverageFile/coverageFile.cpp	/^void CoverageFile::doMean(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:CoverageFile
doPerBase	src/coverageFile/coverageFile.cpp	/^void CoverageFile::doPerBase(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:CoverageFile
doSimpleSplit	src/split/splitBed.cpp	/^int BedSplit::doSimpleSplit()$/;"	f	class:BedSplit
doSweep	src/nekSandbox1/nekSandboxMain.cpp	/^void doSweep(const char *file1, const char *file2, const string &genomeFile)$/;"	f
doit_square	src/utils/htslib/thread_pool.c	/^void *doit_square(void *arg) {$/;"	f
doit_square_u	src/utils/htslib/thread_pool.c	/^void *doit_square_u(void *arg) {$/;"	f
double_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void double_to_le(double val, uint8_t *buf) {$/;"	f
drand48	src/utils/htslib/htslib/hts_os.h	38;"	d
dsize	src/utils/htslib/cram/pooled_alloc.h	/^    size_t dsize;$/;"	m	struct:__anon57
dummy	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
dummy	src/utils/htslib/htslib/hts.h	/^    uint32_t read_rest:1, finished:1, is_cram:1, dummy:29;$/;"	m	struct:__anon16
dump_char	src/utils/htslib/vcf.c	/^static const char *dump_char(char *buffer, char c)$/;"	f	file:
dump_pmatrix	src/utils/htslib/test/test-bcf-sr.pl	/^sub dump_pmatrix$/;"	s
dup_stdout	src/utils/htslib/htsfile.c	/^static htsFile *dup_stdout(const char *mode)$/;"	f	file:
e	src/utils/htslib/cram/cram_structs.h	/^    struct cram_index *e; \/\/ array of size nslice$/;"	m	struct:cram_index	typeref:struct:cram_index::cram_index
e	src/utils/htslib/htslib/hts.h	/^    float d, e;$/;"	m	struct:probaln_par_t
e	test/fisher/sim.py	/^        e = randint(s + minA, min(genome_size, s + maxA))$/;"	v
e_beta	src/utils/htslib/cram/cram_codecs.h	/^	cram_beta_decoder            e_beta;$/;"	m	union:cram_codec::__anon80
e_byte_array_len	src/utils/htslib/cram/cram_codecs.h	/^	cram_byte_array_len_encoder  e_byte_array_len;$/;"	m	union:cram_codec::__anon80
e_byte_array_stop	src/utils/htslib/cram/cram_codecs.h	/^	cram_byte_array_stop_decoder e_byte_array_stop;$/;"	m	union:cram_codec::__anon80
e_external	src/utils/htslib/cram/cram_codecs.h	/^	cram_external_decoder        e_external;$/;"	m	union:cram_codec::__anon80
e_huffman	src/utils/htslib/cram/cram_codecs.h	/^	cram_huffman_encoder         e_huffman;$/;"	m	union:cram_codec::__anon80
easy	src/utils/htslib/hfile_libcurl.c	/^    CURL *easy;$/;"	m	struct:__anon102	file:
easy_errno	src/utils/htslib/hfile_libcurl.c	/^static int easy_errno(CURL *easy, CURLcode err)$/;"	f	file:
ec	src/utils/htslib/htslib/tbx.h	/^    int32_t sc, bc, ec; \/\/ seq col., beg col. and end col.$/;"	m	struct:__anon36
echoOptions	src/regressTest/RegressTest.cpp	/^void RegressTest::echoOptions() const$/;"	f	class:RegressTest
ed_is_big	src/utils/htslib/htslib/hts.h	/^static inline int ed_is_big(void)$/;"	f
ed_swap_2	src/utils/htslib/htslib/hts.h	/^static inline uint16_t ed_swap_2(uint16_t v)$/;"	f
ed_swap_2p	src/utils/htslib/htslib/hts.h	/^static inline void *ed_swap_2p(void *x)$/;"	f
ed_swap_4	src/utils/htslib/htslib/hts.h	/^static inline uint32_t ed_swap_4(uint32_t v)$/;"	f
ed_swap_4p	src/utils/htslib/htslib/hts.h	/^static inline void *ed_swap_4p(void *x)$/;"	f
ed_swap_8	src/utils/htslib/htslib/hts.h	/^static inline uint64_t ed_swap_8(uint64_t v)$/;"	f
ed_swap_8p	src/utils/htslib/htslib/hts.h	/^static inline void *ed_swap_8p(void *x)$/;"	f
elemPairType	src/utils/NewChromsweep/CloseSweep.h	/^	typedef pair<chromDirType, Record *> elemPairType;$/;"	t	class:RecDistList
elemType	src/utils/FileRecordTools/Records/RecordKeyList.h	/^	typedef Record * elemType;$/;"	t	class:RecordKeyList
elemType	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^	typedef Record * elemType;$/;"	t	class:RecordKeyVector
elemsType	src/utils/NewChromsweep/CloseSweep.h	/^	typedef vector<elemPairType> elemsType;$/;"	t	class:RecDistList
elt	src/utils/htslib/htslib/kbitset.h	/^	size_t elt;$/;"	m	struct:kbitset_iter_t
embed_ref	src/utils/htslib/cram/cram_structs.h	/^    int embed_ref;$/;"	m	struct:cram_fd
empty	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^bool RecordKeyList::empty() const {$/;"	f	class:RecordKeyList
empty	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^bool RecordKeyVector::empty() const {$/;"	f	class:RecordKeyVector
empty	src/utils/FileRecordTools/Records/RecordList.h	/^	bool empty() const { return _begin == NULL; }$/;"	f	class:RecordList
empty	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^bool StrandQueue::empty() {$/;"	f	class:StrandQueue
empty	src/utils/KeyListOps/KeyListOpsMethods.h	/^	bool empty() { return _keyList->empty(); }$/;"	f	class:KeyListOpsMethods
empty	src/utils/NewChromsweep/CloseSweep.h	/^	bool empty() const { return _empty; }$/;"	f	class:RecDistList
empty	src/utils/general/BTlist.h	/^	bool empty() const { return _begin == NULL; }$/;"	f	class:BTlist
empty	src/utils/general/QuickString.h	/^	bool empty() const { return _currSize == 0; }$/;"	f	class:string
empty_container	src/utils/htslib/cram/cram_structs.h	/^    int empty_container; 		\/\/ Marker for EOF block$/;"	m	struct:cram_fd
encode	src/utils/htslib/cram/cram_codecs.h	/^    int (*encode)(cram_slice *slice, struct cram_codec *codec,$/;"	m	struct:cram_codec
encode_init	src/utils/htslib/cram/cram_codecs.c	/^static cram_codec *(*encode_init[])(cram_stats *stx,$/;"	v	file:
encode_utf8	src/utils/htslib/textutils.c	/^static char *encode_utf8(char *s, unsigned x)$/;"	f	file:
encoding	src/utils/htslib/cram/cram_structs.h	/^    enum cram_encoding encoding;$/;"	m	struct:cram_map	typeref:enum:cram_map::cram_encoding
end	docs/make.bat	/^:end$/;"	l
end	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::const_iterator_type RecordKeyList::end() {$/;"	f	class:RecordKeyList
end	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::iterator_type RecordKeyVector::end() {$/;"	f	class:RecordKeyVector
end	src/utils/FileRecordTools/Records/RecordList.h	/^	const RecordListNode *end() const { return NULL; }$/;"	f	class:RecordList
end	src/utils/KeyListOps/KeyListOpsMethods.h	/^	bool end() { return _iter == _keyList->end(); }$/;"	f	class:KeyListOpsMethods
end	src/utils/NewChromsweep/CloseSweep.h	/^	constIterType end() const { return _currNumIdxs; }$/;"	f	class:RecDistList
end	src/utils/bedFile/bedFile.h	/^    CHRPOS end;$/;"	m	struct:BED
end	src/utils/bedFile/bedFile.h	/^    CHRPOS end;$/;"	m	struct:BEDCOV
end	src/utils/bedFile/bedFile.h	/^    CHRPOS end;$/;"	m	struct:BEDCOVLIST
end	src/utils/bedGraphFile/bedGraphFile.h	/^    CHRPOS end;$/;"	m	class:BEDGRAPH
end	src/utils/general/BTlist.h	/^	const BTlistNode<T> *end() const { return NULL; }$/;"	f	class:BTlist
end	src/utils/htslib/cram/cram_structs.h	/^    int     end;    \/\/                     1.1$/;"	m	struct:cram_index
end	src/utils/htslib/cram/cram_structs.h	/^    int end;$/;"	m	struct:__anon96
end	src/utils/htslib/htslib/hfile.h	/^    char *buffer, *begin, *end, *limit;$/;"	m	struct:hFILE
end	src/utils/htslib/htslib/hts.h	/^    int tid, beg, end, n_off, i;$/;"	m	struct:__anon16
end	src/utils/htslib/htslib/regidx.h	/^    uint32_t start, end;$/;"	m	struct:__anon28
end	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int start, end;         \/\/ current position: start, end of the region (0-based)$/;"	m	struct:_bcf_sr_regions_t
end	src/utils/htslib/sam.c	/^    int k, x, y, end;$/;"	m	struct:__anon6	file:
end	src/utils/htslib/sam.c	/^    int32_t beg, end;$/;"	m	struct:__linkbuf_t	file:
end	src/utils/htslib/synced_bcf_reader.c	/^    uint32_t start, end;$/;"	m	struct:__anon107	file:
end	src/utils/htslib/tbx.c	/^    int64_t beg, end;$/;"	m	struct:__anon115	file:
end1	src/utils/bedFilePE/bedFilePE.h	/^    CHRPOS end1;$/;"	m	struct:BEDPE
end2	src/utils/bedFilePE/bedFilePE.h	/^    CHRPOS end2;$/;"	m	struct:BEDPE
endMemoryProfile	src/regressTest/RegressTest.cpp	/^bool RegressTest::endMemoryProfile()$/;"	f	class:RegressTest
end_offset	src/utils/htslib/bgzf.c	/^    int64_t end_offset;$/;"	m	struct:__anon53	file:
end_prev	src/utils/htslib/regidx.c	/^    int rid_prev, start_prev, end_prev;$/;"	m	struct:_regidx_t	file:
ends	src/utils/bedFile/bedFile.h	/^    UINT ends;$/;"	m	struct:DEPTH
entry	src/utils/Fasta/Fasta.cpp	/^FastaIndexEntry FastaIndex::entry(string name) {$/;"	f	class:FastaIndex
entry	src/utils/htslib/hts_internal.h	/^    kstring_t path, entry;$/;"	m	struct:hts_path_itr
entry_dir_l	src/utils/htslib/hts_internal.h	/^    size_t prefix_len, suffix_len, entry_dir_l;$/;"	m	struct:hts_path_itr
eof	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	virtual bool eof() const {$/;"	f	class:BamFileReader
eof	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	bool eof() const { return _eof; }$/;"	f	class:BufferedStreamMgr
eof	src/utils/FileRecordTools/FileReaders/FileReader.cpp	/^bool FileReader::eof() const {$/;"	f	class:FileReader
eof	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^bool FileRecordMergeMgr::eof(){$/;"	f	class:FileRecordMergeMgr
eof	src/utils/FileRecordTools/FileRecordMgr.cpp	/^bool FileRecordMgr::eof(){$/;"	f	class:FileRecordMgr
eof	src/utils/htslib/bgzf.c	/^    int eof;$/;"	m	struct:bgzf_mtaux_t	file:
eof	src/utils/htslib/cram/cram_structs.h	/^    int eof;$/;"	m	struct:cram_fd
eof	src/utils/htslib/cram/mFILE.h	/^    int eof;$/;"	m	struct:__anon60
eof	src/utils/htslib/thread_pool.c	/^    int eof; \/\/ set with last job.$/;"	m	struct:__anon113	file:
erand48	src/utils/htslib/htslib/hts_os.h	37;"	d
erase	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::erase()  $/;"	f	class:RecordKeyVector
err	src/utils/htslib/cram/cram_structs.h	/^    int            err;$/;"	m	struct:cram_fd
errcode	src/utils/htslib/bgzf.c	/^    int errcode;$/;"	m	struct:bgzf_job	file:
errcode	src/utils/htslib/bgzf.c	/^    int errcode;$/;"	m	struct:bgzf_mtaux_t	file:
errcode	src/utils/htslib/htslib/bgzf.h	/^    unsigned errcode:16, reserved:1, is_write:1, no_eof_block:1, is_be:1;$/;"	m	struct:BGZF
errcode	src/utils/htslib/htslib/vcf.h	/^    int errcode;    \/\/ one of BCF_ERR_* codes$/;"	m	struct:__anon27
errmod_cal	src/utils/htslib/errmod.c	/^int errmod_cal(const errmod_t *em, int n, int m, uint16_t *bases, float *q)$/;"	f
errmod_destroy	src/utils/htslib/errmod.c	/^void errmod_destroy(errmod_t *em)$/;"	f
errmod_init	src/utils/htslib/errmod.c	/^errmod_t *errmod_init(double depcorr)$/;"	f
errmod_t	src/utils/htslib/htslib/hts.h	/^typedef struct errmod_t errmod_t;$/;"	t	typeref:struct:errmod_t
errnum	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf_sr_error errnum;$/;"	m	struct:__anon33
error	src/utils/htslib/bgzip.c	/^static void error(const char *format, ...)$/;"	f	file:
error	src/utils/htslib/htsfile.c	/^void error(const char *format, ...)$/;"	f
error	src/utils/htslib/sam.c	/^    int is_eof, max_plp, error, maxcnt;$/;"	m	struct:__bam_plp_t	file:
error	src/utils/htslib/tabix.c	/^static void error(const char *format, ...)$/;"	f	file:
error	src/utils/htslib/test/test-bcf-sr.c	/^void error(const char *format, ...)$/;"	f
error	src/utils/htslib/test/test-bcf-sr.pl	/^sub error$/;"	s
error	src/utils/htslib/test/test-regidx.c	/^void error(const char *format, ...)$/;"	f
error	src/utils/htslib/test/test.pl	/^sub error$/;"	s
errorEncountered	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::errorEncountered() {$/;"	f	class:ContextBase
exclude_patterns	docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
exec_prefix	src/utils/htslib/Makefile	/^exec_prefix = $(prefix)$/;"	m
executeAndCompareCorrectness	src/regressTest/RegressTest.cpp	/^bool RegressTest::executeAndCompareCorrectness(const fileListType &fileList) {$/;"	f	class:RegressTest
executeAndComparePerformance	src/regressTest/RegressTest.cpp	/^bool RegressTest::executeAndComparePerformance(const fileListType &fileList) {$/;"	f	class:RegressTest
exists	src/utils/NewChromsweep/CloseSweep.h	/^	bool exists(int dist) const {$/;"	f	class:RecDistList
exit_code	src/utils/htslib/cram/cram_decode.c	/^    int exit_code;$/;"	m	struct:__anon97	file:
expand_cache_path	src/utils/htslib/cram/cram_io.c	/^void expand_cache_path(char *path, char *dir, char *fn) {$/;"	f
expand_help	src/expand/expand.cpp	/^void expand_help(void) {$/;"	f
expand_main	src/expand/expand.cpp	/^int expand_main(int argc, char* argv[]) {$/;"	f
expand_path	src/utils/htslib/cram/open_trace_file.c	/^static char *expand_path(char *file, char *dirname) {$/;"	f	file:
expand_tilde_open	src/utils/htslib/hfile_s3.c	/^static FILE *expand_tilde_open(const char *fname, const char *mode)$/;"	f	file:
expected_template_count	src/utils/htslib/cram/cram_encode.c	/^static int expected_template_count(bam_seq_t *b) {$/;"	f	file:
explicit_regs	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int explicit_regs;  \/\/ was the list of regions se by bcf_sr_set_regions or guessed from tabix index?$/;"	m	struct:__anon33
extensions	docs/conf.py	/^extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', $/;"	v
external	src/utils/htslib/cram/cram_codecs.h	/^	cram_external_decoder        external;$/;"	m	union:cram_codec::__anon80
extra	src/utils/htslib/hfile_libcurl.c	/^    hdrlist extra;                   \/\/ List of headers from callback$/;"	m	struct:__anon101	file:
f	src/utils/htslib/htslib/sam.h	/^    double f;$/;"	m	union:__anon41
f	src/utils/htslib/htslib/vcf.h	/^        float f;   \/\/ float value$/;"	m	union:__anon24::__anon25
f	src/utils/htslib/test/hts_endian.c	/^    float f;$/;"	m	struct:__anon48	file:
f_bgzf	src/utils/htslib/test/test_bgzf.c	/^    FILE *f_bgzf;$/;"	m	struct:__anon50	file:
f_idx	src/utils/htslib/test/test_bgzf.c	/^    FILE *f_idx;$/;"	m	struct:__anon50	file:
f_plain	src/utils/htslib/test/test_bgzf.c	/^    FILE *f_plain;$/;"	m	struct:__anon50	file:
fai_build	src/utils/htslib/faidx.c	/^int fai_build(const char *fn) {$/;"	f
fai_build3	src/utils/htslib/faidx.c	/^int fai_build3(const char *fn, const char *fnfai, const char *fngzi)$/;"	f
fai_build_core	src/utils/htslib/faidx.c	/^faidx_t *fai_build_core(BGZF *bgzf)$/;"	f
fai_destroy	src/utils/htslib/faidx.c	/^void fai_destroy(faidx_t *fai)$/;"	f
fai_fetch	src/utils/htslib/faidx.c	/^char *fai_fetch(const faidx_t *fai, const char *str, int *len)$/;"	f
fai_insert_index	src/utils/htslib/faidx.c	/^static inline int fai_insert_index(faidx_t *idx, const char *name, int64_t len, int line_len, int line_blen, uint64_t offset)$/;"	f	file:
fai_load	src/utils/htslib/faidx.c	/^faidx_t *fai_load(const char *fn)$/;"	f
fai_load3	src/utils/htslib/faidx.c	/^faidx_t *fai_load3(const char *fn, const char *fnfai, const char *fngzi,$/;"	f
fai_load_options	src/utils/htslib/htslib/faidx.h	/^enum fai_load_options {$/;"	g
fai_read	src/utils/htslib/faidx.c	/^static faidx_t *fai_read(hFILE *fp, const char *fname)$/;"	f	file:
fai_retrieve	src/utils/htslib/faidx.c	/^static char *fai_retrieve(const faidx_t *fai, const faidx1_t *val,$/;"	f	file:
fai_save	src/utils/htslib/faidx.c	/^static int fai_save(const faidx_t *fai, hFILE *fp) {$/;"	f	file:
faidx1	src/utils/htslib/test/sam.c	/^static void faidx1(const char *filename)$/;"	f	file:
faidx1_t	src/utils/htslib/faidx.c	/^} faidx1_t;$/;"	t	typeref:struct:__anon114	file:
faidx_fetch_nseq	src/utils/htslib/faidx.c	/^int faidx_fetch_nseq(const faidx_t *fai)$/;"	f
faidx_fetch_seq	src/utils/htslib/faidx.c	/^char *faidx_fetch_seq(const faidx_t *fai, const char *c_name, int p_beg_i, int p_end_i, int *len)$/;"	f
faidx_has_seq	src/utils/htslib/faidx.c	/^int faidx_has_seq(const faidx_t *fai, const char *seq)$/;"	f
faidx_iseq	src/utils/htslib/faidx.c	/^const char *faidx_iseq(const faidx_t *fai, int i)$/;"	f
faidx_nseq	src/utils/htslib/faidx.c	/^int faidx_nseq(const faidx_t *fai)$/;"	f
faidx_seq_len	src/utils/htslib/faidx.c	/^int faidx_seq_len(const faidx_t *fai, const char *seq)$/;"	f
faidx_t	src/utils/htslib/htslib/faidx.h	/^typedef struct __faidx_t faidx_t;$/;"	t	typeref:struct:__faidx_t
fail	src/utils/htslib/test/hfile.c	/^void HTS_NORETURN fail(const char *format, ...)$/;"	f
fail	src/utils/htslib/test/sam.c	/^static void HTS_FORMAT(HTS_PRINTF_FMT, 1, 2) fail(const char *fmt, ...)$/;"	f
failed	src/utils/htslib/test/test.pl	/^sub failed$/;"	s
failedtofail	test/general/test-general.sh	/^failedtofail()$/;"	f
fastForward	src/complementFile/complementFile.cpp	/^bool ComplementFile::fastForward(const string &newChrom) {$/;"	f	class:ComplementFile
fastaIndexEntryCompare	src/utils/Fasta/Fasta.cpp	/^bool fastaIndexEntryCompare ( FastaIndexEntry a, FastaIndexEntry b) { return (a.offset<b.offset); }$/;"	f
fastafrombed_help	src/fastaFromBed/fastaFromBedMain.cpp	/^void fastafrombed_help(void) {$/;"	f
fastafrombed_main	src/fastaFromBed/fastaFromBedMain.cpp	/^int fastafrombed_main(int argc, char* argv[]) {$/;"	f
fd	src/utils/htslib/cram/cram_decode.c	/^    cram_fd *fd;$/;"	m	struct:__anon97	file:
fd	src/utils/htslib/cram/cram_io.c	/^    cram_fd *fd;$/;"	m	struct:__anon69	file:
fd	src/utils/htslib/hfile.c	/^    int fd;$/;"	m	struct:__anon109	file:
fd	src/utils/htslib/htslib/knetfile.h	/^	int type, fd;$/;"	m	struct:knetFile_s
fd_backend	src/utils/htslib/hfile.c	/^static const struct hFILE_backend fd_backend =$/;"	v	typeref:struct:hFILE_backend	file:
fd_close	src/utils/htslib/hfile.c	/^static int fd_close(hFILE *fpv)$/;"	f	file:
fd_flush	src/utils/htslib/hfile.c	/^static int fd_flush(hFILE *fpv)$/;"	f	file:
fd_read	src/utils/htslib/hfile.c	/^static ssize_t fd_read(hFILE *fpv, void *buffer, size_t nbytes)$/;"	f	file:
fd_seek	src/utils/htslib/hfile.c	/^static off_t fd_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
fd_write	src/utils/htslib/hfile.c	/^static ssize_t fd_write(hFILE *fpv, const void *buffer, size_t nbytes)$/;"	f	file:
feature	src/utils/htslib/cram/cram_structs.h	/^    int32_t feature;      \/\/ idx to s->feature$/;"	m	struct:cram_record
features	src/utils/htslib/cram/cram_structs.h	/^    cram_feature *features;$/;"	m	struct:cram_slice
fetchElem	src/utils/general/Tokenizer.cpp	/^string Tokenizer::fetchElem(int idx)$/;"	f	class:Tokenizer
fields	src/utils/bedFile/bedFile.h	/^    vector<string> fields;$/;"	m	struct:BED
fields	src/utils/bedFile/bedFile.h	/^    vector<string> fields;$/;"	m	struct:BEDCOV
fields	src/utils/bedFile/bedFile.h	/^    vector<string> fields;$/;"	m	struct:BEDCOVLIST
fields	src/utils/bedFilePE/bedFilePE.h	/^    vector<string> fields;$/;"	m	struct:BEDPE
file	src/utils/BamTools/include/BamReader.hpp	/^			_SamFile* file;$/;"	m	struct:BamTools::BamReader::_MetaData
file	src/utils/Fasta/Fasta.h	/^        FILE* file;$/;"	m	class:FastaReference
file	src/utils/gzstream/gzstream.h	/^    gzFile           file;               \/\/ file handle for compressed file$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
file	src/utils/htslib/htslib/synced_bcf_reader.h	/^    htsFile *file;$/;"	m	struct:__anon31
file	src/utils/htslib/htslib/synced_bcf_reader.h	/^    htsFile *file;$/;"	m	struct:_bcf_sr_regions_t
file	src/utils/htslib/vcf_sweep.c	/^    htsFile *file;$/;"	m	struct:_bcf_sweep_t	file:
fileHasChrInChromNames	src/utils/Contexts/ContextBase.cpp	/^ContextBase::testType ContextBase::fileHasChrInChromNames(int fileIdx) {$/;"	f	class:ContextBase
fileHasLeadingZeroInChromNames	src/utils/Contexts/ContextBase.cpp	/^ContextBase::testType ContextBase::fileHasLeadingZeroInChromNames(int fileIdx) {$/;"	f	class:ContextBase
fileListType	src/regressTest/RegressTest.h	/^	typedef vector<pair<string, string> > fileListType;$/;"	t	class:RegressTest
file_def	src/utils/htslib/cram/cram_structs.h	/^    cram_file_def *file_def;$/;"	m	struct:cram_fd
file_exists	src/utils/htslib/cram/files.c	/^int file_exists(char * fn)$/;"	f
file_id	src/utils/htslib/cram/cram_structs.h	/^    char    file_id[20];      \/\/ Filename or SHA1 checksum$/;"	m	struct:cram_file_def
file_size	src/utils/htslib/cram/files.c	/^int file_size(char * fn)$/;"	f
file_size	src/utils/htslib/hfile_libcurl.c	/^    off_t file_size;$/;"	m	struct:__anon102	file:
file_size	src/utils/htslib/htslib/knetfile.h	/^    int64_t file_size;$/;"	m	struct:knetFile_s
file_type	src/utils/htslib/tabix.c	/^int file_type(const char *fname)$/;"	f
file_type_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,$/;"	e	enum:__anon32
filemm	src/utils/Fasta/Fasta.h	/^        void* filemm;$/;"	m	class:FastaReference
filename	src/split/splitBed.cpp	/^        std::string filename;$/;"	m	class:SimpleSplitInfo	file:
filename	src/utils/Fasta/Fasta.h	/^        string filename;$/;"	m	class:FastaReference
filenames	src/multiIntersectBed/multiIntersectBed.h	/^    vector<string>  filenames;$/;"	m	class:MultiIntersectBed
filenames	src/unionBedGraphs/unionBedGraphs.h	/^    vector<string>  filenames;$/;"	m	class:UnionBedGraphs
files_with_coverage	src/multiIntersectBed/multiIntersectBed.h	/^    map<int, bool>           files_with_coverage;$/;"	m	class:MultiIntersectBed
filesize	src/utils/Fasta/Fasta.h	/^        size_t filesize;$/;"	m	class:FastaReference
filter_ids	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nfilter_ids, *filter_ids;   \/\/ -1 for ".", otherwise filter id as returned by bcf_hdr_id2int$/;"	m	struct:__anon31
fin	src/utils/htslib/test/hfile.c	/^hFILE *fin = NULL;$/;"	v
final_result	src/utils/htslib/hfile_libcurl.c	/^    CURLcode final_result;  \/\/ easy result code for finished transfers$/;"	m	struct:__anon102	file:
finalizeCalculations	src/complementFile/complementFile.h	/^	virtual bool finalizeCalculations() {return true;}$/;"	f	class:ComplementFile
finalizeCalculations	src/fisher/fisher.cpp	/^bool Fisher::finalizeCalculations()$/;"	f	class:Fisher
finalizeCalculations	src/groupBy/groupBy.h	/^	virtual bool finalizeCalculations() { return true;}$/;"	f	class:GroupBy
finalizeCalculations	src/intersectFile/intersectFile.cpp	/^bool IntersectFile::finalizeCalculations()$/;"	f	class:IntersectFile
finalizeCalculations	src/jaccard/jaccard.cpp	/^bool Jaccard::finalizeCalculations() {$/;"	f	class:Jaccard
finalizeCalculations	src/mergeFile/mergeFile.h	/^	virtual bool finalizeCalculations() { return true; }$/;"	f	class:MergeFile
finalizeCalculations	src/sampleFile/sampleFile.h	/^	virtual bool finalizeCalculations() { return true; }$/;"	f	class:SampleFile
finalizeCalculations	src/spacingFile/spacingFile.h	/^    virtual bool finalizeCalculations() { return true; }$/;"	f	class:SpacingFile
finalizeSelections	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::finalizeSelections(int dbIdx, RecordKeyVector &retList) {$/;"	f	class:CloseSweep
find	src/utils/NewChromsweep/CloseSweep.cpp	/^bool RecDistList::find(int dist, int &pos) const {$/;"	f	class:RecDistList
findBlockedOverlaps	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^int BlockMgr::findBlockedOverlaps(RecordKeyVector &keyList, RecordKeyVector &hitList,$/;"	f	class:BlockMgr
findChromOrder	src/utils/NewChromsweep/NewChromsweep.cpp	/^int NewChromSweep::findChromOrder(const Record *rec) {$/;"	f	class:NewChromSweep
findDelimiters	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^bool SingleLineDelimTextFileReader::findDelimiters() {$/;"	f	class:SingleLineDelimTextFileReader
findNext	src/closestFile/closestFile.cpp	/^bool ClosestFile::findNext(RecordKeyVector &hits)$/;"	f	class:ClosestFile
findNext	src/complementFile/complementFile.cpp	/^bool ComplementFile::findNext(RecordKeyVector &hits)$/;"	f	class:ComplementFile
findNext	src/groupBy/groupBy.cpp	/^bool GroupBy::findNext(RecordKeyVector &hits)$/;"	f	class:GroupBy
findNext	src/intersectFile/intersectFile.cpp	/^bool IntersectFile::findNext(RecordKeyVector &hits)$/;"	f	class:IntersectFile
findNext	src/jaccard/jaccard.cpp	/^bool Jaccard::findNext(RecordKeyVector &hits) {$/;"	f	class:Jaccard
findNext	src/mapFile/mapFile.cpp	/^bool MapFile::findNext(RecordKeyVector &hits)$/;"	f	class:MapFile
findNext	src/mergeFile/mergeFile.cpp	/^bool MergeFile::findNext(RecordKeyVector &hits)$/;"	f	class:MergeFile
findNext	src/sampleFile/sampleFile.cpp	/^ bool SampleFile::findNext(RecordKeyVector &hits) {$/;"	f	class:SampleFile
findNext	src/spacingFile/spacingFile.cpp	/^bool SpacingFile::findNext(RecordKeyVector &hits)$/;"	f	class:SpacingFile
findNext	src/subtractFile/subtractFile.cpp	/^bool SubtractFile::findNext(RecordKeyVector &hits)$/;"	f	class:SubtractFile
find_chrom_header_line	src/utils/htslib/vcf.c	/^static char *find_chrom_header_line(char *s)$/;"	f	file:
find_file_dir	src/utils/htslib/cram/open_trace_file.c	/^static mFILE *find_file_dir(char *file, char *dirname) {$/;"	f	file:
find_file_url	src/utils/htslib/cram/open_trace_file.c	/^mFILE *find_file_url(char *file, char *url) {$/;"	f
find_path	src/utils/htslib/cram/open_trace_file.c	/^char *find_path(char *file, char *path) {$/;"	f
find_scheme_handler	src/utils/htslib/hfile.c	/^static const struct hFILE_scheme_handler *find_scheme_handler(const char *s)$/;"	f	file:
finished	src/utils/htslib/hfile_libcurl.c	/^    unsigned finished : 1;  \/\/ wait_perform() tells us transfer is complete$/;"	m	struct:__anon102	file:
finished	src/utils/htslib/hts.c	/^        int last_coor, last_tid, save_tid, finished;$/;"	m	struct:__hts_idx_t::__anon5	file:
finished	src/utils/htslib/htslib/hts.h	/^    uint32_t read_rest:1, finished:1, is_cram:1, dummy:29;$/;"	m	struct:__anon16
finished	src/utils/htslib/htslib/kstring.h	/^	int sep, finished;$/;"	m	struct:__anon34
first_base	src/utils/htslib/cram/cram_structs.h	/^    int first_base, last_base;$/;"	m	struct:cram_fd
first_base	src/utils/htslib/cram/cram_structs.h	/^    int ref_start, first_base, last_base, ref_id, ref_end;$/;"	m	struct:cram_container
first_container	src/utils/htslib/cram/cram_structs.h	/^    off_t first_container;$/;"	m	struct:cram_fd
fisher_help	src/fisher/fisherHelp.cpp	/^void fisher_help(void) {$/;"	f
fixed	src/utils/htslib/hfile_libcurl.c	/^    hdrlist fixed;                   \/\/ List of headers supplied at hopen()$/;"	m	struct:__anon101	file:
flag	src/utils/htslib/htslib/sam.h	/^    uint16_t flag;$/;"	m	struct:__anon39
flags	src/utils/htslib/cram/cram_structs.h	/^    int32_t flags;        \/\/ BF$/;"	m	struct:cram_record
flank_help	src/flankBed/flankBedMain.cpp	/^void flank_help(void) {$/;"	f
flank_main	src/flankBed/flankBedMain.cpp	/^int flank_main(int argc, char* argv[]) {$/;"	f
floatValBufLen	src/coverageFile/coverageFile.h	/^	static const int floatValBufLen = 16;$/;"	m	class:CoverageFile
float_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void float_to_le(float val, uint8_t *buf) {$/;"	f
flt	src/utils/htslib/htslib/vcf.h	/^    int *flt;   \/\/ FILTER keys in the dictionary$/;"	m	struct:__anon26
flush	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::flush() {$/;"	f	class:RecordOutputMgr
flush	src/utils/htslib/htslib/hfile.h	/^	int (*flush)(void* cb_data);$/;"	m	struct:hFILE_callback_ops
flushEntryToIndex	src/utils/Fasta/Fasta.cpp	/^void FastaIndex::flushEntryToIndex(FastaIndexEntry& entry) {$/;"	f	class:FastaIndex
flush_buffer	src/utils/gzstream/gzstream.C	/^int gzstreambuf::flush_buffer() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
flush_buffer	src/utils/htslib/hfile.c	/^static ssize_t flush_buffer(hFILE *fp)$/;"	f	file:
flush_pending	src/utils/htslib/bgzf.c	/^    int flush_pending;$/;"	m	struct:bgzf_mtaux_t	file:
flush_pos	src/utils/htslib/cram/mFILE.h	/^    size_t flush_pos;$/;"	m	struct:__anon60
fmt	src/utils/htslib/hts.c	/^    int fmt, min_shift, n_lvls, n_bins;$/;"	m	struct:__hts_idx_t	file:
fmt	src/utils/htslib/hts_internal.h	/^    int fmt;$/;"	m	struct:hts_cram_idx_t
fmt	src/utils/htslib/htslib/vcf.h	/^    bcf_fmt_t *fmt;     \/\/ FORMAT and individual sample$/;"	m	struct:__anon26
fmt_aux_t	src/utils/htslib/vcf.c	/^} fmt_aux_t;$/;"	t	typeref:struct:__anon52	file:
fn	src/utils/htslib/cram/cram_structs.h	/^    char *fn;              \/\/ current file opened$/;"	m	struct:__anon95
fn	src/utils/htslib/cram/cram_structs.h	/^    char *fn;$/;"	m	struct:ref_entry
fn	src/utils/htslib/htslib/hts.h	/^    char *fn, *fn_aux;$/;"	m	struct:__anon11
fn_aux	src/utils/htslib/htslib/hts.h	/^    char *fn, *fn_aux;$/;"	m	struct:__anon11
fname	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char *fname;$/;"	m	struct:__anon31
fname	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char *fname;$/;"	m	struct:_bcf_sr_regions_t
fnext	src/utils/htslib/textutils.c	/^static char fnext(void *arg1, void *arg2, hts_json_token *token)$/;"	f	file:
forceDownstream	src/utils/Contexts/ContextClosest.h	/^    bool forceDownstream() const { return _forceDownstream; }$/;"	f	class:ContextClosest
forceUpstream	src/utils/Contexts/ContextClosest.h	/^    bool forceUpstream() const { return _forceUpstream; }$/;"	f	class:ContextClosest
format	src/utils/KeyListOps/KeyListOps.cpp	/^const string &KeyListOps::format(double val)$/;"	f	class:KeyListOps
format	src/utils/htslib/htslib/hts.h	/^    enum htsExactFormat format;$/;"	m	struct:htsFormat	typeref:enum:htsFormat::htsExactFormat
format	src/utils/htslib/htslib/hts.h	/^    htsFormat format;$/;"	m	struct:__anon11
format_category	src/utils/htslib/hts.c	/^static enum htsFormatCategory format_category(enum htsExactFormat fmt)$/;"	f	file:
format_maximum	src/utils/htslib/htslib/hts.h	/^    format_maximum = 32767$/;"	e	enum:htsExactFormat
fout	src/utils/htslib/test/hfile.c	/^hFILE *fout = NULL;$/;"	v
fp	src/utils/BamTools/include/BamReader.hpp	/^			samFile* fp;$/;"	m	struct:BamTools::BamReader::_SamFile
fp	src/utils/htslib/bgzf.c	/^    BGZF *fp;$/;"	m	struct:bgzf_job	file:
fp	src/utils/htslib/cram/cram_structs.h	/^    BGZF *fp;              \/\/ and the hFILE* to go with it.$/;"	m	struct:__anon95
fp	src/utils/htslib/cram/cram_structs.h	/^    struct hFILE  *fp;$/;"	m	struct:cram_fd	typeref:struct:cram_fd::hFILE
fp	src/utils/htslib/cram/mFILE.h	/^    FILE *fp;$/;"	m	struct:__anon60
fp	src/utils/htslib/htslib/bgzf.h	/^    struct hFILE *fp; \/\/ actual file handle$/;"	m	struct:BGZF	typeref:struct:BGZF::hFILE
fp	src/utils/htslib/htslib/hts.h	/^    } fp;$/;"	m	struct:__anon11	typeref:union:__anon11::__anon12
fp	src/utils/htslib/vcf_sweep.c	/^    BGZF *fp;$/;"	m	struct:_bcf_sweep_t	file:
free	src/utils/htslib/cram/cram_codecs.h	/^    void (*free)(struct cram_codec *codec);$/;"	m	struct:cram_codec
free	src/utils/htslib/cram/pooled_alloc.h	/^    void *free;$/;"	m	struct:__anon57
free	src/utils/htslib/regidx.c	/^    regidx_free_f free;     \/\/ function to free any data allocated by regidx_parse_f$/;"	m	struct:_regidx_t	file:
free_all_parts	src/utils/htslib/multipart.c	/^static void free_all_parts(hFILE_multipart *fp)$/;"	f	file:
free_auth_data	src/utils/htslib/hfile_s3.c	/^static void free_auth_data(s3_auth_data *ad) {$/;"	f	file:
free_block	src/utils/htslib/bgzf.c	/^    void *free_block;$/;"	m	struct:bgzf_mtaux_t	file:
free_cache	src/utils/htslib/bgzf.c	/^static void free_cache(BGZF *fp) {}$/;"	f	file:
free_cache	src/utils/htslib/bgzf.c	/^static void free_cache(BGZF *fp)$/;"	f	file:
free_headers	src/utils/htslib/hfile_libcurl.c	/^static void free_headers(hdrlist *hdrs, int completely) {$/;"	f	file:
free_part	src/utils/htslib/multipart.c	/^static void free_part(hfile_part *p)$/;"	f	file:
freq	src/utils/htslib/cram/rANS_byte.h	/^    uint16_t freq;      \/\/ Symbol frequency.$/;"	m	struct:__anon59
freqMapType	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef map<string, int> freqMapType;$/;"	t	class:KeyListOpsMethods
freqs	src/utils/htslib/cram/cram_structs.h	/^    int freqs[MAX_STAT_VAL];$/;"	m	struct:cram_stats
front	src/utils/FileRecordTools/Records/RecordList.h	/^	const RecordListNode *front() const { return _begin;}$/;"	f	class:RecordList
front	src/utils/general/BTlist.h	/^	const BTlistNode<T> *front() const { return _begin;}$/;"	f	class:BTlist
frontBackSplit	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::frontBackSplit(RecordListNode* source,$/;"	f	class:RecordList
fscan_string	src/utils/htslib/textutils.c	/^static void fscan_string(hFILE *fp, kstring_t *d)$/;"	f	file:
fseek64	src/nucBed/LargeFileSupport.h	11;"	d
fseek64	src/nucBed/LargeFileSupport.h	7;"	d
fseek64	src/utils/Fasta/LargeFileSupport.h	11;"	d
fseek64	src/utils/Fasta/LargeFileSupport.h	7;"	d
fsum	src/utils/htslib/errmod.c	/^    double fsum[16], bsum[16];$/;"	m	struct:__anon121	file:
ftell64	src/nucBed/LargeFileSupport.h	10;"	d
ftell64	src/nucBed/LargeFileSupport.h	6;"	d
ftell64	src/utils/Fasta/LargeFileSupport.h	10;"	d
ftell64	src/utils/Fasta/LargeFileSupport.h	6;"	d
ftruncate	src/utils/htslib/cram/os.h	200;"	d
ftruncate	src/utils/htslib/cram/os.h	212;"	d
full_path	src/utils/htslib/cram/cram_io.c	/^static void full_path(char *out, char *in) {$/;"	f	file:
func	src/utils/htslib/sam.c	/^    bam_plp_auto_f func;$/;"	m	struct:__bam_plp_t	file:
func	src/utils/htslib/thread_pool_internal.h	/^    void *(*func)(void *arg);$/;"	m	struct:hts_tpool_job
g_cstate_null	src/utils/htslib/sam.c	/^static cstate_t g_cstate_null = { -1, 0, 0, 0 };$/;"	v	file:
g_magic	src/utils/htslib/bgzf.c	/^static const uint8_t g_magic[19] = "\\037\\213\\010\\4\\0\\0\\0\\0\\0\\377\\6\\0\\102\\103\\2\\0\\0\\0";$/;"	v	file:
g_qual2prob	src/utils/htslib/probaln.c	/^static float g_qual2prob[256];$/;"	v	file:
gamma	src/utils/htslib/cram/cram_codecs.h	/^	cram_gamma_decoder           gamma;$/;"	m	union:cram_codec::__anon80
gcs_open	src/utils/htslib/hfile_gcs.c	/^static hFILE *gcs_open(const char *url, const char *mode)$/;"	f	file:
gcs_rewrite	src/utils/htslib/hfile_gcs.c	/^gcs_rewrite(const char *gsurl, const char *mode, int mode_has_colon,$/;"	f	file:
gcs_vopen	src/utils/htslib/hfile_gcs.c	/^static hFILE *gcs_vopen(const char *url, const char *mode_colon, va_list args0)$/;"	f	file:
generateRandomFile	src/regressTest/RegressTest.cpp	/^bool RegressTest::generateRandomFile(const string & randomArgs, string &filename)$/;"	f	class:RegressTest
genome_size	test/fisher/sim.py	/^genome_size = max(b[2] for b in bIntervals) + 50000$/;"	v
genome_sizes	src/multiIntersectBed/multiIntersectBed.h	/^    GenomeFile* genome_sizes;$/;"	m	class:MultiIntersectBed
genome_sizes	src/unionBedGraphs/unionBedGraphs.h	/^    GenomeFile* genome_sizes;$/;"	m	class:UnionBedGraphs
genomecoverage_help	src/genomeCoverageBed/genomeCoverageMain.cpp	/^void genomecoverage_help(void) {$/;"	f
genomecoverage_main	src/genomeCoverageBed/genomeCoverageMain.cpp	/^int genomecoverage_main(int argc, char* argv[]) {$/;"	f
getAbsMax	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getAbsMax() {$/;"	f	class:KeyListOpsMethods
getAbsMin	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getAbsMin() {$/;"	f	class:KeyListOpsMethods
getAlignment	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	const BamTools::BamAlignment &getAlignment() const { return _bamAlignment; }$/;"	f	class:BamFileReader
getAlignment	src/utils/FileRecordTools/Records/BamRecord.h	/^	const BamTools::BamAlignment &getAlignment() const { return _bamAlignment; }$/;"	f	class:BamRecord
getAntiMode	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getAntiMode() {$/;"	f	class:KeyListOpsMethods
getAnyHit	src/utils/Contexts/ContextIntersect.h	/^	bool getAnyHit() const {return _anyHit; }$/;"	f	class:ContextIntersect
getBamBlocks	src/utils/BamTools-Ancillary/BamAncillary.cpp	/^    void getBamBlocks(const BamAlignment &bam, const RefVector &refs,$/;"	f	namespace:BamTools
getBamChrId	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^int BamFileReader::getBamChrId() const$/;"	f	class:BamFileReader
getBamChromId	src/utils/FileRecordTools/Records/BamRecord.h	/^	int getBamChromId() const { return _bamChromId; }$/;"	f	class:BamRecord
getBamHeaderAndRefIdx	src/utils/Contexts/ContextBase.cpp	/^int ContextBase::getBamHeaderAndRefIdx() {$/;"	f	class:ContextBase
getBamReader	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	BamTools::BamReader *getBamReader() { return _inputStreamMgr->getBamReader(); }$/;"	f	class:BufferedStreamMgr
getBamReader	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	BamTools::BamReader *getBamReader() { return _bamReader; }$/;"	f	class:InputStreamMgr
getBamReferences	src/utils/Contexts/ContextBase.h	/^	const BamTools::RefVector &getBamReferences(int fileIdx)  { return _files[fileIdx]->getBamReferences(); }$/;"	f	class:ContextBase
getBamReferences	src/utils/FileRecordTools/FileRecordMgr.cpp	/^const BamTools::RefVector & FileRecordMgr::getBamReferences() {$/;"	f	class:FileRecordMgr
getBin	src/utils/BinTree/BinTree.cpp	/^BinTree::binNumType BinTree::getBin(binNumType start, binNumType end) const {$/;"	f	class:BinTree
getBin	src/utils/BinTree/BinTree.cpp	/^BinTree::binNumType BinTree::getBin(const Record *record) const {$/;"	f	class:BinTree
getBin	src/utils/bedFile/bedFile.h	/^BIN getBin(CHRPOS start, CHRPOS end) {$/;"	f
getBlockCount	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual int getBlockCount() const { return _blockCount; }$/;"	f	class:Bed12Interval
getBlockSizes	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual const string & getBlockSizes() const { return _blockSizes; }$/;"	f	class:Bed12Interval
getBlockStarts	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual const string & getBlockStarts() const { return _blockStarts; }$/;"	f	class:Bed12Interval
getBlocks	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^void BlockMgr::getBlocks(RecordKeyVector &keyList, bool &mustDelete)$/;"	f	class:BlockMgr
getBlocksFromBam	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^void BlockMgr::getBlocksFromBam(RecordKeyVector &keyList, bool &mustDelete)$/;"	f	class:BlockMgr
getBlocksFromBed12	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^void BlockMgr::getBlocksFromBed12(RecordKeyVector &keyList, bool &mustDelete)$/;"	f	class:BlockMgr
getBufferLength	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	int getBufferLength() const { return _numBytesInBuffer; }$/;"	f	class:InputStreamMgr
getChrName	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^void BamFileReader::getChrName(string &str) const$/;"	f	class:BamFileReader
getChrName	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getChrName() const { return _chrName; }$/;"	f	class:Record
getChromId	src/utils/FileRecordTools/Records/Record.h	/^	virtual int getChromId() const { return _chrId; }$/;"	f	class:Record
getChromId	src/utils/GenomeFile/NewGenomeFile.cpp	/^CHRPOS NewGenomeFile::getChromId(const string &chrom) {$/;"	f	class:NewGenomeFile
getChromList	src/utils/GenomeFile/GenomeFile.cpp	/^vector<string> GenomeFile::getChromList() {$/;"	f	class:GenomeFile
getChromList	src/utils/GenomeFile/NewGenomeFile.h	/^    const vector<string> &getChromList() const { return _chromList; }  \/\/ return a list of chrom names$/;"	f	class:NewGenomeFile
getChromSize	src/utils/GenomeFile/GenomeFile.cpp	/^uint32_t GenomeFile::getChromSize(const string &chrom) {$/;"	f	class:GenomeFile
getChromSize	src/utils/GenomeFile/NewGenomeFile.cpp	/^CHRPOS NewGenomeFile::getChromSize(const string &chrom) const {$/;"	f	class:NewGenomeFile
getChromSize	src/utils/GenomeFile/NewGenomeFile.cpp	/^CHRPOS NewGenomeFile::getChromSize(const string &chrom) {$/;"	f	class:NewGenomeFile
getCigarData	src/utils/FileRecordTools/Records/BamRecord.h	/^	const vector<BamTools::CigarOp> &getCigarData() const { return _bamAlignment.CigarData; }$/;"	f	class:BamRecord
getCigarStr	src/utils/FileRecordTools/Records/BamRecord.h	/^	const string &getCigarStr() const { return _cigarStr; }$/;"	f	class:BamRecord
getColVal	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getColVal() {$/;"	f	class:KeyListOpsMethods
getColValNum	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getColValNum() {$/;"	f	class:KeyListOpsMethods
getCollapse	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getCollapse(const string &delimiter) {$/;"	f	class:KeyListOpsMethods
getColumnOpsVal	src/utils/Contexts/ContextBase.cpp	/^const string &ContextBase::getColumnOpsVal(RecordKeyVector &keyList) const {$/;"	f	class:ContextBase
getColumns	src/utils/KeyListOps/KeyListOps.h	/^	const string &getColumns() { return _columns; }$/;"	f	class:KeyListOps
getConcat	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getConcat() {$/;"	f	class:KeyListOpsMethods
getConstantSeed	src/utils/Contexts/ContextBase.h	/^    virtual int getConstantSeed() const { return _seed; }$/;"	f	class:ContextBase
getContext	src/utils/driver/BedtoolsDriver.cpp	/^ContextBase *BedtoolsDriver::getContext()$/;"	f	class:BedtoolsDriver
getCount	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^uint32_t KeyListOpsMethods::getCount() {$/;"	f	class:KeyListOpsMethods
getCountDistinct	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^uint32_t KeyListOpsMethods::getCountDistinct() {$/;"	f	class:KeyListOpsMethods
getCoverageType	src/utils/Contexts/ContextCoverage.h	/^    coverageType getCoverageType() const { return _coverageType; }$/;"	f	class:ContextCoverage
getCurrChromdId	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	virtual int getCurrChromdId() const { return _currChromId; }$/;"	f	class:FileReader
getDatabaseFile	src/utils/Contexts/ContextIntersect.h	/^	FileRecordMgr *getDatabaseFile(int idx) { return getFile(_dbFileIdxs[idx]); }$/;"	f	class:ContextIntersect
getDatabaseFileName	src/utils/Contexts/ContextIntersect.h	/^	const string &getDatabaseFileName(int idx) const { return _files[_dbFileIdxs[idx]]->getFileName(); }$/;"	f	class:ContextIntersect
getDatabaseFileType	src/utils/Contexts/ContextIntersect.h	/^	ContextFileType getDatabaseFileType(int idx) const { return _files[_dbFileIdxs[idx]]->getFileType(); }$/;"	f	class:ContextIntersect
getDatabaseNameTag	src/utils/Contexts/ContextIntersect.h	/^	const string &getDatabaseNameTag(int dbIdx) const { return _dbNameTags[dbIdx]; }$/;"	f	class:ContextIntersect
getDatabaseRecordType	src/utils/Contexts/ContextIntersect.h	/^	ContextRecordType getDatabaseRecordType(int idx) const { return _files[_dbFileIdxs[idx]]->getRecordType(); }$/;"	f	class:ContextIntersect
getDatabaseTotalRecordLength	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long getDatabaseTotalRecordLength() { return _databaseRecordsTotalLength; }$/;"	f	class:NewChromSweep
getDatabaseTotalRecords	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long getDatabaseTotalRecords() { return _databaseTotalRecords; }$/;"	f	class:NewChromSweep
getDbFileIdxs	src/utils/Contexts/ContextIntersect.h	/^	const vector<int> &getDbFileIdxs() const { return _dbFileIdxs; }$/;"	f	class:ContextIntersect
getDbIdx	src/utils/Contexts/ContextIntersect.h	/^	int getDbIdx(int fileId) { return _fileIdsToDbIdxs.find(fileId)->second; }$/;"	f	class:ContextIntersect
getDefaultHeader	src/utils/Contexts/ContextGroupBy.cpp	/^const string &ContextGroupBy::getDefaultHeader() {$/;"	f	class:ContextGroupBy
getDelimChar	src/utils/fileType/FileRecordTypeChecker.h	/^	char getDelimChar() const { return _delimChar; }$/;"	f	class:FileRecordTypeChecker
getDelimStr	src/utils/KeyListOps/KeyListOps.h	/^	const string &getDelimStr() { return _methods.getDelimStr(); }$/;"	f	class:KeyListOps
getDelimStr	src/utils/KeyListOps/KeyListOpsMethods.h	/^	const string &getDelimStr() const { return _delimStr; }$/;"	f	class:KeyListOpsMethods
getDesiredStrand	src/utils/Contexts/ContextBase.h	/^	FileRecordMergeMgr::WANTED_STRAND_TYPE getDesiredStrand() const { return _desiredStrand; }$/;"	f	class:ContextBase
getDiffStrand	src/utils/Contexts/ContextIntersect.h	/^	bool getDiffStrand() const {return _diffStrand; }$/;"	f	class:ContextIntersect
getDistances	src/utils/NewChromsweep/CloseSweep.h	/^	const vector<int> &getDistances() { return _finalDistances; }$/;"	f	class:CloseSweep
getDistinct	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getDistinct() {$/;"	f	class:KeyListOpsMethods
getDistinctOnly	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getDistinctOnly() {$/;"	f	class:KeyListOpsMethods
getDistinctSortNum	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getDistinctSortNum(bool asc) {$/;"	f	class:KeyListOpsMethods
getDnaContent	src/utils/sequenceUtilities/sequenceUtils.cpp	/^void getDnaContent(const string &seq, int &a, int &c, int &g, int &t, int &n, int &other)$/;"	f
getEitherFraction	src/utils/Contexts/ContextIntersect.h	/^	bool getEitherFraction() const {return _eitherFraction; }$/;"	f	class:ContextIntersect
getElem	src/utils/general/Tokenizer.h	/^	const string getElem(int i) const { return (_elems[i]); }$/;"	f	class:Tokenizer
getEndPos	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^int BamFileReader::getEndPos() const$/;"	f	class:BamFileReader
getEndPos	src/utils/FileRecordTools/Records/Record.h	/^	virtual int getEndPos() const { return _endPos; }$/;"	f	class:Record
getEndPosStr	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getEndPosStr() const { return _endPosStr; }$/;"	f	class:Record
getEofHit	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool getEofHit() { return _eofHit; }$/;"	f	class:InputStreamMgr
getErrMsg	src/utils/KeyListOps/KeyListOpsMethods.h	/^    const string &getErrMsg() const { return _errMsg; }$/;"	f	class:KeyListOpsMethods
getErrorMessages	src/utils/Contexts/ContextBase.h	/^    string getErrorMessages() const { return _errorMsg; }$/;"	f	class:ContextBase
getErrorMsg	src/utils/Contexts/ContextBase.h	/^	const string &getErrorMsg() const { return _errorMsg; }$/;"	f	class:ContextBase
getErrors	src/utils/driver/BedtoolsDriver.h	/^	string getErrors() const { return _errors; }$/;"	f	class:BedtoolsDriver
getExcludeFile	src/utils/Contexts/ContextFisher.h	/^	string getExcludeFile() { return _excludeFile; }$/;"	f	class:ContextFisher
getExplicitBedOutput	src/utils/Contexts/ContextBase.h	/^    bool getExplicitBedOutput() const { return _explicitBedOutput; }$/;"	f	class:ContextBase
getField	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^void SingleLineDelimTextFileReader::getField(int fieldNum, char &val) const {$/;"	f	class:SingleLineDelimTextFileReader
getField	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^void SingleLineDelimTextFileReader::getField(int fieldNum, int &val) const {$/;"	f	class:SingleLineDelimTextFileReader
getField	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^void SingleLineDelimTextFileReader::getField(int fieldNum, string &str) const {$/;"	f	class:SingleLineDelimTextFileReader
getField	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.cpp	/^const char *SingleLineDelimTransferBuffer::getField(int fieldNum) const$/;"	f	class:SingleLineDelimTransferBuffer
getField	src/utils/FileRecordTools/Records/BamRecord.cpp	/^const string &BamRecord::getField(int fieldNum) const$/;"	f	class:BamRecord
getField	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^const string &Bed12Interval::getField(int fieldNum) const$/;"	f	class:Bed12Interval
getField	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^const string &Bed3Interval::getField(int fieldNum) const$/;"	f	class:Bed3Interval
getField	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^const string &Bed4Interval::getField(int fieldNum) const$/;"	f	class:Bed4Interval
getField	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^const string &Bed5Interval::getField(int fieldNum) const$/;"	f	class:Bed5Interval
getField	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^const string &Bed6Interval::getField(int fieldNum) const$/;"	f	class:Bed6Interval
getField	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^const string &BedGraphInterval::getField(int fieldNum) const$/;"	f	class:BedGraphInterval
getField	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^const string &BedPlusInterval::getField(int fieldNum) const$/;"	f	class:BedPlusInterval
getField	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^const string &GffPlusRecord::getField(int fieldNum) const$/;"	f	class:GffPlusRecord
getField	src/utils/FileRecordTools/Records/GffRecord.cpp	/^const string &GffRecord::getField(int fieldNum) const$/;"	f	class:GffRecord
getField	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^const string &NoPosPlusRecord::getField(int fieldNum) const$/;"	f	class:NoPosPlusRecord
getField	src/utils/FileRecordTools/Records/PlusFields.cpp	/^const string &PlusFields::getField(int fieldNum) const$/;"	f	class:PlusFields
getField	src/utils/FileRecordTools/Records/Record.cpp	/^const string &Record::getField(int fieldNum) const$/;"	f	class:Record
getField	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^const string &VcfRecord::getField(int fieldNum) const$/;"	f	class:VcfRecord
getFile	src/utils/Contexts/ContextBase.h	/^	FileRecordMgr *getFile(int fileIdx) { return _files[fileIdx]; }$/;"	f	class:ContextBase
getFileIdx	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	virtual int getFileIdx() const { return _fileIdx; }$/;"	f	class:FileReader
getFileIdx	src/utils/FileRecordTools/FileRecordMgr.h	/^	int getFileIdx() const { return _fileIdx; }$/;"	f	class:FileRecordMgr
getFileIdx	src/utils/FileRecordTools/Records/Record.h	/^	virtual int getFileIdx() const { return _fileIdx; }$/;"	f	class:Record
getFileName	src/utils/FileRecordTools/FileRecordMgr.h	/^	const string &getFileName() const { return _filename;}$/;"	f	class:FileRecordMgr
getFileRecordManager	src/utils/FileRecordTools/Records/Record.cpp	/^FileRecordMgr * Record::getFileRecordManager()$/;"	f	class:Record
getFileType	src/utils/FileRecordTools/FileRecordMgr.h	/^	FileRecordTypeChecker::FILE_TYPE getFileType() const {$/;"	f	class:FileRecordMgr
getFileType	src/utils/fileType/FileRecordTypeChecker.h	/^	FILE_TYPE getFileType() const { return _fileType; }$/;"	f	class:FileRecordTypeChecker
getFileTypeName	src/utils/FileRecordTools/FileRecordMgr.h	/^	const string &getFileTypeName() const {$/;"	f	class:FileRecordMgr
getFileTypeName	src/utils/fileType/FileRecordTypeChecker.h	/^	const string &getFileTypeName() const {$/;"	f	class:FileRecordTypeChecker
getFirst	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getFirst() {$/;"	f	class:KeyListOpsMethods
getForwardOnly	src/utils/Contexts/ContextIntersect.h	/^	bool getForwardOnly() const { return _forwardOnly; }$/;"	f	class:ContextIntersect
getForwardOnly	src/utils/Contexts/ContextSample.h	/^	bool getForwardOnly() const { return _forwardOnly; }$/;"	f	class:ContextSample
getFrame	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual const string &getFrame() const { return _frame; }$/;"	f	class:GffRecord
getFreqAsc	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getFreqAsc() {$/;"	f	class:KeyListOpsMethods
getFreqDesc	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getFreqDesc() {$/;"	f	class:KeyListOpsMethods
getGenomeFile	src/utils/Contexts/ContextBase.h	/^	NewGenomeFile *getGenomeFile() const { return _genomeFile; }$/;"	f	class:ContextBase
getGenomeFileName	src/utils/GenomeFile/GenomeFile.cpp	/^string GenomeFile::getGenomeFileName() {$/;"	f	class:GenomeFile
getGenomeFileName	src/utils/GenomeFile/NewGenomeFile.h	/^    const string &getGenomeFileName() const { return _genomeFileName; }$/;"	f	class:NewGenomeFile
getGenomeSize	src/utils/GenomeFile/GenomeFile.cpp	/^uint32_t GenomeFile::getGenomeSize(void) {$/;"	f	class:GenomeFile
getGenomeSize	src/utils/GenomeFile/NewGenomeFile.h	/^    CHRPOS getGenomeSize(void) const { return _genomeLength; }                \/\/ return the total size of the genome$/;"	f	class:NewGenomeFile
getGroup	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual const string &getGroup() const { return _group; }$/;"	f	class:GffRecord
getGroupCols	src/utils/Contexts/ContextGroupBy.h	/^	const string &getGroupCols() const { return _groupStr; }$/;"	f	class:ContextGroupBy
getHaveFractionA	src/utils/Contexts/ContextIntersect.h	/^	bool getHaveFractionA() const {return _haveFractionA; }$/;"	f	class:ContextIntersect
getHaveFractionB	src/utils/Contexts/ContextIntersect.h	/^	bool getHaveFractionB() const {return _haveFractionB; }$/;"	f	class:ContextIntersect
getHeader	src/utils/Contexts/ContextBase.h	/^	const string &getHeader(int fileIdx) { return _files[fileIdx]->getHeader(); }$/;"	f	class:ContextBase
getHeader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	virtual const string &getHeader() const { return _bamHeader; }$/;"	f	class:BamFileReader
getHeader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	virtual const string &getHeader() const { return _header; }$/;"	f	class:SingleLineDelimTextFileReader
getHeader	src/utils/FileRecordTools/FileRecordMgr.h	/^	const string &getHeader() const { return _fileReader->getHeader(); }$/;"	f	class:FileRecordMgr
getHits	src/utils/BinTree/BinTree.cpp	/^void BinTree::getHits(Record *record, RecordKeyVector &hitSet)$/;"	f	class:BinTree
getInputFileName	src/utils/Contexts/ContextBase.h	/^	const string &getInputFileName(int fileNum) const { return _fileNames[fileNum]; }$/;"	f	class:ContextBase
getInputFileType	src/utils/Contexts/ContextBase.h	/^	ContextFileType getInputFileType(int fileNum) const { return _files[fileNum]->getFileType(); }$/;"	f	class:ContextBase
getInputRecordType	src/utils/Contexts/ContextBase.h	/^	ContextRecordType getInputRecordType(int fileNum) const { return _files[fileNum]->getRecordType(); }$/;"	f	class:ContextBase
getItemRGB	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual const string & getItemRGB() const { return _itemRGB; }$/;"	f	class:Bed12Interval
getKey	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^Record *RecordKeyList::getKey() const {$/;"	f	class:RecordKeyList
getKey	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^Record * RecordKeyVector::getKey() const {$/;"	f	class:RecordKeyVector
getLast	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getLast() {$/;"	f	class:KeyListOpsMethods
getLeftJoin	src/utils/Contexts/ContextIntersect.h	/^	bool getLeftJoin() const {return _leftJoin; }$/;"	f	class:ContextIntersect
getLength	src/utils/FileRecordTools/Records/BamRecord.cpp	/^int BamRecord::getLength(bool obeySplits) const {$/;"	f	class:BamRecord
getLength	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^int Bed12Interval::getLength(bool obeySplits) const {$/;"	f	class:Bed12Interval
getLength	src/utils/FileRecordTools/Records/Record.cpp	/^int Record::getLength(bool obeySplits) const {$/;"	f	class:Record
getLine	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^bool BufferedStreamMgr::getLine(string &line)$/;"	f	class:BufferedStreamMgr
getMateChrName	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^void BamFileReader::getMateChrName(string &str) const$/;"	f	class:BamFileReader
getMax	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getMax() {$/;"	f	class:KeyListOpsMethods
getMaxDist	src/utils/NewChromsweep/CloseSweep.h	/^	int getMaxDist() const { return _empty ? 0 : _distIndex[_currNumIdxs-1].first; }$/;"	f	class:RecDistList
getMaxLeftEndPos	src/utils/NewChromsweep/CloseSweep.cpp	/^int RecDistList::getMaxLeftEndPos() const {$/;"	f	class:RecDistList
getMaxNumDatabaseFields	src/utils/Contexts/ContextIntersect.h	/^	int getMaxNumDatabaseFields() const { return _maxNumDatabaseFields; }$/;"	f	class:ContextIntersect
getMean	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getMean() {$/;"	f	class:KeyListOpsMethods
getMedian	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getMedian() {$/;"	f	class:KeyListOpsMethods
getMin	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getMin() {$/;"	f	class:KeyListOpsMethods
getMinIdx	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^int StrandQueue::getMinIdx() {$/;"	f	class:StrandQueue
getMode	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^const string &KeyListOpsMethods::getMode() {$/;"	f	class:KeyListOpsMethods
getMultiDbMode	src/utils/Contexts/ContextClosest.h	/^    multiDbModeType getMultiDbMode() const { return _multiDbMode; }$/;"	f	class:ContextClosest
getName	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^void BamFileReader::getName(string &str) const$/;"	f	class:BamFileReader
getName	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getName() const { return _name; }$/;"	f	class:Record
getNameCheckDisabled	src/utils/Contexts/ContextBase.h	/^    virtual bool getNameCheckDisabled() const { return _nameCheckDisabled; }$/;"	f	class:ContextBase
getNewFRM	src/utils/Contexts/ContextBase.cpp	/^FileRecordMgr *ContextBase::getNewFRM(const string &filename, int fileIdx) {$/;"	f	class:ContextBase
getNextRecord	src/groupBy/groupBy.cpp	/^Record *GroupBy::getNextRecord() {$/;"	f	class:GroupBy
getNextRecord	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^Record *FileRecordMergeMgr::getNextRecord(RecordKeyVector *recList)$/;"	f	class:FileRecordMergeMgr
getNextRecord	src/utils/FileRecordTools/FileRecordMgr.cpp	/^Record *FileRecordMgr::getNextRecord(RecordKeyVector *keyList)$/;"	f	class:FileRecordMgr
getNoHit	src/utils/Contexts/ContextIntersect.h	/^	bool getNoHit() const {return _noHit; }$/;"	f	class:ContextIntersect
getNullValue	src/utils/KeyListOps/KeyListOps.h	/^	const string &getNullValue() { return _methods.getNullValue(); }$/;"	f	class:KeyListOps
getNullValue	src/utils/KeyListOps/KeyListOpsMethods.h	/^	const string &getNullValue() const { return _nullVal; }$/;"	f	class:KeyListOpsMethods
getNumClosestHitsWanted	src/utils/Contexts/ContextClosest.h	/^    int getNumClosestHitsWanted() const { return _numClosestHitsWanted; }$/;"	f	class:ContextClosest
getNumDatabaseFiles	src/utils/Contexts/ContextIntersect.h	/^	int getNumDatabaseFiles() { return (int)_dbFileIdxs.size(); }$/;"	f	class:ContextIntersect
getNumFields	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	virtual int getNumFields() const { return MINIMUM_VALID_BAM_FIELDS; }$/;"	f	class:BamFileReader
getNumFields	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	virtual int getNumFields() const { return _numFields; }$/;"	f	class:SingleLineDelimTextFileReader
getNumFields	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.h	/^	int getNumFields() const { return _numFields; }$/;"	f	class:SingleLineDelimTransferBuffer
getNumFields	src/utils/FileRecordTools/FileRecordMgr.h	/^	int getNumFields() const { return _fileReader->getNumFields(); }$/;"	f	class:FileRecordMgr
getNumFields	src/utils/FileRecordTools/Records/BamRecord.h	/^	virtual int getNumFields() const  { return 12; }$/;"	f	class:BamRecord
getNumFields	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual int getNumFields() const  { return 12; }$/;"	f	class:Bed12Interval
getNumFields	src/utils/FileRecordTools/Records/Bed3Interval.h	/^	virtual int getNumFields() const  { return 3; }$/;"	f	class:Bed3Interval
getNumFields	src/utils/FileRecordTools/Records/Bed4Interval.h	/^	virtual int getNumFields() const  { return 4; }$/;"	f	class:Bed4Interval
getNumFields	src/utils/FileRecordTools/Records/Bed5Interval.h	/^	virtual int getNumFields() const  { return 5; }$/;"	f	class:Bed5Interval
getNumFields	src/utils/FileRecordTools/Records/Bed6Interval.h	/^	virtual int getNumFields() const  { return 6; }$/;"	f	class:Bed6Interval
getNumFields	src/utils/FileRecordTools/Records/BedGraphInterval.h	/^	virtual int getNumFields() const  { return 4; }$/;"	f	class:BedGraphInterval
getNumFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	virtual int getNumFields() const  { return _numFixedFields + _plusFields.size(); }$/;"	f	class:BedPlusInterval
getNumFields	src/utils/FileRecordTools/Records/EmptyRecord.h	/^	int getNumFields() const { return 0; }$/;"	f	class:EmptyRecord
getNumFields	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	virtual int getNumFields() const  { return GffRecord::getNumFields() + _plusFields.size(); }$/;"	f	class:GffPlusRecord
getNumFields	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual int getNumFields() const { return _numFields; }$/;"	f	class:GffRecord
getNumFields	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	/^	virtual int getNumFields() const  { return defaultNumFixedFields + (int)_plusFields.size(); }$/;"	f	class:NoPosPlusRecord
getNumFields	src/utils/fileType/FileRecordTypeChecker.h	/^	int getNumFields() const { return _numFields; }$/;"	f	class:FileRecordTypeChecker
getNumFields	src/utils/general/Tokenizer.cpp	/^int Tokenizer::getNumFields(const string &str, char delimiter) $/;"	f	class:Tokenizer
getNumInputFiles	src/utils/Contexts/ContextBase.h	/^	int getNumInputFiles() const { return _fileNames.size(); }$/;"	f	class:ContextBase
getNumOutputRecords	src/utils/Contexts/ContextBase.h	/^    virtual int getNumOutputRecords() const { return _numOutputRecords; }$/;"	f	class:ContextBase
getNumPrintFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	virtual int getNumPrintFields() const { return _numPrintFields; }$/;"	f	class:BedPlusInterval
getNumPrintFields	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	virtual int getNumPrintFields() const { return _numPrintFields; }$/;"	f	class:GffPlusRecord
getNumTotalElems	src/utils/general/Tokenizer.h	/^	int getNumTotalElems() const { return (int)_elems.size(); }$/;"	f	class:Tokenizer
getNumberOfChroms	src/utils/GenomeFile/GenomeFile.cpp	/^int GenomeFile::getNumberOfChroms() {$/;"	f	class:GenomeFile
getNumberOfChroms	src/utils/GenomeFile/NewGenomeFile.h	/^    CHRPOS getNumberOfChroms() const { return _chromList.size() -1; }\/\/the -1 excludes the blank chrom added for unmapped reads$/;"	f	class:NewGenomeFile
getObeySplits	src/utils/Contexts/ContextBase.h	/^	bool getObeySplits() const {return _obeySplits; }$/;"	f	class:ContextBase
getOpCode	src/utils/KeyListOps/KeyListOps.cpp	/^KeyListOps::OP_TYPES KeyListOps::getOpCode(const string &operation) const {$/;"	f	class:KeyListOps
getOpVals	src/utils/KeyListOps/KeyListOps.cpp	/^const string & KeyListOps::getOpVals(RecordKeyVector &hits)$/;"	f	class:KeyListOps
getOperations	src/utils/KeyListOps/KeyListOps.h	/^	const string &getOperations() { return _operations; }$/;"	f	class:KeyListOps
getOutputFileType	src/utils/Contexts/ContextBase.h	/^	ContextFileType getOutputFileType() const { return _outputFileType; }$/;"	f	class:ContextBase
getOverlapBases	src/utils/FileRecordTools/Records/BlockMgr.h	/^	int getOverlapBases(int hitIdx) const { return _overlapBases[hitIdx]; }$/;"	f	class:BlockMgr
getOverlapFractionA	src/utils/Contexts/ContextIntersect.h	/^	float getOverlapFractionA() const { return _overlapFractionA; }$/;"	f	class:ContextIntersect
getOverlapFractionB	src/utils/Contexts/ContextIntersect.h	/^	float getOverlapFractionB() const { return _overlapFractionB; }$/;"	f	class:ContextIntersect
getPrintHeader	src/utils/Contexts/ContextBase.h	/^    virtual bool getPrintHeader() const {return _printHeader; }$/;"	f	class:ContextBase
getPrintable	src/utils/Contexts/ContextBase.h	/^    virtual bool getPrintable() const { return _printable; }$/;"	f	class:ContextBase
getProgram	src/utils/Contexts/ContextBase.h	/^	PROGRAM_TYPE getProgram() const { return _program; }$/;"	f	class:ContextBase
getPushBackStreamBuf	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	PushBackStreamBuf *getPushBackStreamBuf() const {return _pushBackStreamBuf; }$/;"	f	class:InputStreamMgr
getQueryFile	src/utils/Contexts/ContextIntersect.h	/^	FileRecordMgr *getQueryFile() { return getFile(_queryFileIdx); }$/;"	f	class:ContextIntersect
getQueryFileIdx	src/utils/Contexts/ContextIntersect.h	/^    int getQueryFileIdx() const { return _queryFileIdx; }$/;"	f	class:ContextIntersect
getQueryFileName	src/utils/Contexts/ContextIntersect.h	/^	const string &getQueryFileName() const { return _files[_queryFileIdx]->getFileName(); }$/;"	f	class:ContextIntersect
getQueryFileType	src/utils/Contexts/ContextIntersect.h	/^	ContextFileType getQueryFileType() const { return _files[_queryFileIdx]->getFileType(); }$/;"	f	class:ContextIntersect
getQueryRecordType	src/utils/Contexts/ContextIntersect.h	/^	ContextRecordType getQueryRecordType() const { return _files[_queryFileIdx]->getRecordType(); }$/;"	f	class:ContextIntersect
getQueryTotalRecordLength	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long getQueryTotalRecordLength() { return _queryRecordsTotalLength; }$/;"	f	class:NewChromSweep
getQueryTotalRecords	src/utils/NewChromsweep/NewChromsweep.h	/^    unsigned long getQueryTotalRecords() { return _queryTotalRecords; }$/;"	f	class:NewChromSweep
getReciprocalFraction	src/utils/Contexts/ContextIntersect.h	/^	bool getReciprocalFraction() const {return _reciprocalFraction; }$/;"	f	class:ContextIntersect
getRecordType	src/utils/FileRecordTools/FileRecordMgr.h	/^	FileRecordTypeChecker::RECORD_TYPE getRecordType() const {$/;"	f	class:FileRecordMgr
getRecordType	src/utils/fileType/FileRecordTypeChecker.h	/^	RECORD_TYPE getRecordType() const { return _recordType; }$/;"	f	class:FileRecordTypeChecker
getRecordTypeName	src/utils/FileRecordTools/FileRecordMgr.h	/^	const string &getRecordTypeName() const {$/;"	f	class:FileRecordMgr
getRecordTypeName	src/utils/fileType/FileRecordTypeChecker.h	/^	const string &getRecordTypeName() const {$/;"	f	class:FileRecordTypeChecker
getReferences	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	const BamTools::RefVector &getReferences() const { return _references; }$/;"	f	class:BamFileReader
getRemoveAll	src/utils/Contexts/ContextSubtract.h	/^    bool getRemoveAll() const { return _removeAll; }$/;"	f	class:ContextSubtract
getRemoveSum	src/utils/Contexts/ContextSubtract.h	/^    bool getRemoveSum() const { return _removeSum; }$/;"	f	class:ContextSubtract
getReportPrecision	src/utils/Contexts/ContextBase.h	/^    int getReportPrecision() const { return _reportPrecision; }$/;"	f	class:ContextBase
getReverseOnly	src/utils/Contexts/ContextIntersect.h	/^	bool getReverseOnly() const { return _reverseOnly; }$/;"	f	class:ContextIntersect
getReverseOnly	src/utils/Contexts/ContextSample.h	/^	bool getReverseOnly() const { return _reverseOnly; }$/;"	f	class:ContextSample
getRunToQueryEnd	src/utils/Contexts/ContextIntersect.h	/^	bool getRunToQueryEnd() const {return _runToQueryEnd; }$/;"	f	class:ContextIntersect
getSameStrand	src/utils/Contexts/ContextIntersect.h	/^	bool getSameStrand() const {return _sameStrand; }$/;"	f	class:ContextIntersect
getSameStrand	src/utils/Contexts/ContextSample.h	/^	bool getSameStrand() const {return _sameStrand; }$/;"	f	class:ContextSample
getSampleStddev	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getSampleStddev() {$/;"	f	class:KeyListOpsMethods
getSavedData	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	const string &getSavedData() const { return _saveDataStr; }$/;"	f	class:InputStreamMgr
getScanBuffer	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	const BTlist<int> &getScanBuffer() const { return _scanBuffer; }$/;"	f	class:InputStreamMgr
getScore	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^void BamFileReader::getScore(string &str) const$/;"	f	class:BamFileReader
getScore	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getScore() const { return _score; }$/;"	f	class:Record
getSequence	src/utils/Fasta/Fasta.cpp	/^string FastaReference::getSequence(string seqname) {$/;"	f	class:FastaReference
getShowHelp	src/utils/Contexts/ContextBase.h	/^	bool getShowHelp() const { return _showHelp; }$/;"	f	class:ContextBase
getSortOutput	src/utils/Contexts/ContextBase.h	/^    virtual bool getSortOutput() const {return _sortOutput; }$/;"	f	class:ContextBase
getSortedInput	src/utils/Contexts/ContextBase.h	/^    virtual bool getSortedInput() const {return _sortedInput; }$/;"	f	class:ContextBase
getSource	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual const string &getSource() const { return _source; }$/;"	f	class:GffRecord
getSplitBlockInfo	src/utils/Contexts/ContextBase.h	/^    BlockMgr *getSplitBlockInfo() { return _splitBlockInfo; }$/;"	f	class:ContextBase
getStartPos	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^int BamFileReader::getStartPos() const$/;"	f	class:BamFileReader
getStartPos	src/utils/FileRecordTools/Records/Record.h	/^	virtual int getStartPos() const { return _startPos; }$/;"	f	class:Record
getStartPosStr	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getStartPosStr() const { return _startPosStr; }$/;"	f	class:Record
getStddev	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getStddev() {$/;"	f	class:KeyListOpsMethods
getStrand	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^char BamFileReader::getStrand() const$/;"	f	class:BamFileReader
getStrand	src/utils/FileRecordTools/Records/Record.h	/^	virtual const string &getStrand() const { return _strand; }$/;"	f	class:Record
getStrandVal	src/utils/FileRecordTools/Records/Record.h	/^	virtual strandType getStrandVal() const {return _strandVal; }$/;"	f	class:Record
getStrandedDistMode	src/utils/Contexts/ContextClosest.h	/^    strandedDistanceModeType getStrandedDistMode() const { return _strandedDistMode; }$/;"	f	class:ContextClosest
getSubSequence	src/utils/Fasta/Fasta.cpp	/^string FastaReference::getSubSequence(string seqname, int start, int length) {$/;"	f	class:FastaReference
getSubtractFraction	src/utils/Contexts/ContextSubtract.h	/^    float getSubtractFraction() const { return _fractionalSubtract; }$/;"	f	class:ContextSubtract
getSum	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^double KeyListOpsMethods::getSum() {$/;"	f	class:KeyListOpsMethods
getThickEnd	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual int getThickEnd() const { return _thickEnd; }$/;"	f	class:Bed12Interval
getThickStart	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual int getThickStart() const { return _thickStart; }$/;"	f	class:Bed12Interval
getTieMode	src/utils/Contexts/ContextClosest.h	/^    tieModeType getTieMode() const { return _tieMode; }$/;"	f	class:ContextClosest
getTool	src/utils/driver/BedtoolsDriver.cpp	/^ToolBase *BedtoolsDriver::getTool(ContextBase *context)$/;"	f	class:BedtoolsDriver
getTotalBlockLength	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^int BlockMgr::getTotalBlockLength(RecordKeyVector &keyList) {$/;"	f	class:BlockMgr
getTotalFlattenedLength	src/utils/bedFile/bedFile.cpp	/^unsigned long BedFile::getTotalFlattenedLength(void) {$/;"	f	class:BedFile
getTotalIntersection	src/fisher/fisher.cpp	/^unsigned long Fisher::getTotalIntersection(RecordKeyVector &recList)$/;"	f	class:Fisher
getTotalIntersection	src/jaccard/jaccard.cpp	/^unsigned long Jaccard::getTotalIntersection(RecordKeyVector &hits)$/;"	f	class:Jaccard
getTotalLength	src/utils/bedFile/bedFile.cpp	/^unsigned long BedFile::getTotalLength(void) {$/;"	f	class:BedFile
getTotalMergedRecordLength	src/utils/FileRecordTools/FileRecordMgr.h	/^	unsigned long getTotalMergedRecordLength() const { return _totalMergedRecordLength; } \/\/ sum of all merged intervals$/;"	f	class:FileRecordMgr
getTotalRecordLength	src/utils/FileRecordTools/FileRecordMgr.h	/^	unsigned long getTotalRecordLength() const { return _totalRecordLength; } \/\/sum of length of all returned records$/;"	f	class:FileRecordMgr
getType	src/utils/FileRecordTools/Records/BamRecord.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BAM_RECORD_TYPE; }$/;"	f	class:BamRecord
getType	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED12_RECORD_TYPE; }$/;"	f	class:Bed12Interval
getType	src/utils/FileRecordTools/Records/Bed3Interval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED3_RECORD_TYPE; }$/;"	f	class:Bed3Interval
getType	src/utils/FileRecordTools/Records/Bed4Interval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED4_RECORD_TYPE; }$/;"	f	class:Bed4Interval
getType	src/utils/FileRecordTools/Records/Bed5Interval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED5_RECORD_TYPE; }$/;"	f	class:Bed5Interval
getType	src/utils/FileRecordTools/Records/Bed6Interval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED6_RECORD_TYPE; }$/;"	f	class:Bed6Interval
getType	src/utils/FileRecordTools/Records/BedGraphInterval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BEDGRAPH_RECORD_TYPE; }$/;"	f	class:BedGraphInterval
getType	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::BED_PLUS_RECORD_TYPE; }$/;"	f	class:BedPlusInterval
getType	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::GFF_PLUS_RECORD_TYPE; }$/;"	f	class:GffPlusRecord
getType	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::GFF_RECORD_TYPE; }$/;"	f	class:GffRecord
getType	src/utils/FileRecordTools/Records/NoPosPlusRecord.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::NO_POS_PLUS_RECORD_TYPE; }$/;"	f	class:NoPosPlusRecord
getType	src/utils/FileRecordTools/Records/Record.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::UNKNOWN_RECORD_TYPE; }$/;"	f	class:Record
getType	src/utils/FileRecordTools/Records/VcfRecord.h	/^	virtual FileRecordTypeChecker::RECORD_TYPE getType() const { return FileRecordTypeChecker::VCF_RECORD_TYPE; }$/;"	f	class:VcfRecord
getTypeChecker	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	FileRecordTypeChecker & getTypeChecker() { return _typeChecker; }$/;"	f	class:BufferedStreamMgr
getTypeData	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^bool BufferedStreamMgr::getTypeData()$/;"	f	class:BufferedStreamMgr
getUncompressedBam	src/utils/Contexts/ContextBase.h	/^    bool getUncompressedBam() const { return _uncompressedBam; }$/;"	f	class:ContextBase
getUnspecifiedSeed	src/utils/Contexts/ContextBase.cpp	/^int ContextBase::getUnspecifiedSeed()$/;"	f	class:ContextBase
getUseBufferedOutput	src/utils/Contexts/ContextBase.h	/^    bool getUseBufferedOutput() const { return _useBufferedOutput; }$/;"	f	class:ContextBase
getUseDBfileNames	src/utils/Contexts/ContextBase.h	/^    virtual bool getUseDBfileNames() const { return _reportDBfileNames; }$/;"	f	class:ContextBase
getUseDBnameTags	src/utils/Contexts/ContextBase.h	/^    virtual bool getUseDBnameTags() const { return _reportDBnameTags; }$/;"	f	class:ContextBase
getUseFullBamTags	src/utils/Contexts/ContextBase.h	/^    virtual bool getUseFullBamTags() const { return _useFullBamTags; }$/;"	f	class:ContextBase
getUseMergedIntervals	src/utils/Contexts/ContextBase.h	/^	bool getUseMergedIntervals() const { return _useMergedIntervals; }$/;"	f	class:ContextBase
getVcfSVlen	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^int SingleLineDelimTextFileReader::getVcfSVlen() {$/;"	f	class:SingleLineDelimTextFileReader
getWriteA	src/utils/Contexts/ContextIntersect.h	/^	bool getWriteA() const {return _writeA; }$/;"	f	class:ContextIntersect
getWriteAllOverlap	src/utils/Contexts/ContextIntersect.h	/^	bool getWriteAllOverlap() const {return _writeAllOverlap; }$/;"	f	class:ContextIntersect
getWriteB	src/utils/Contexts/ContextIntersect.h	/^	bool getWriteB() const {return _writeB; }$/;"	f	class:ContextIntersect
getWriteCount	src/utils/Contexts/ContextIntersect.h	/^	bool getWriteCount() const {return _writeCount; }$/;"	f	class:ContextIntersect
getWriteOverlap	src/utils/Contexts/ContextIntersect.h	/^	bool getWriteOverlap() const {return _writeOverlap; }$/;"	f	class:ContextIntersect
getZeroLength	src/utils/FileRecordTools/Records/Record.h	/^	virtual bool getZeroLength() const { return _zeroLength; }$/;"	f	class:Record
get_bits_MSB	src/utils/htslib/cram/cram_codecs.c	/^static inline unsigned int get_bits_MSB(cram_block *block, int nbits) {$/;"	f	file:
get_cache_basedir	src/utils/htslib/cram/cram_io.c	/^static const char *get_cache_basedir(const char **extra) {$/;"	f	file:
get_header_list	src/utils/htslib/hfile_libcurl.c	/^static struct curl_slist * get_header_list(hFILE_libcurl *fp) {$/;"	f	file:
get_int_aux_val	src/utils/htslib/sam.c	/^static inline int64_t get_int_aux_val(uint8_t type, const uint8_t *s,$/;"	f	file:
get_int_threadid	src/utils/htslib/cram/cram_io.c	/^static unsigned get_int_threadid() {$/;"	f	file:
get_intv	src/utils/htslib/tbx.c	/^static inline int get_intv(tbx_t *tbx, kstring_t *str, tbx_intv_t *intv, int is_add)$/;"	f	file:
get_name_suffix	src/utils/htslib/bgzf.c	/^static char * get_name_suffix(const char *bname, const char *suffix)$/;"	f	file:
get_one_bits_MSB	src/utils/htslib/cram/cram_codecs.c	/^static int get_one_bits_MSB(cram_block *block) {$/;"	f	file:
get_severity_tag	src/utils/htslib/hts.c	/^static char get_severity_tag(enum htsLogLevel severity)$/;"	f	file:
get_tid	src/utils/htslib/tbx.c	/^static inline int get_tid(tbx_t *tbx, const char *ss, int is_add)$/;"	f	file:
get_type_name	src/utils/htslib/vcf.c	/^static const char *get_type_name(int type) {$/;"	f	file:
get_zero_bits_MSB	src/utils/htslib/cram/cram_codecs.c	/^static int get_zero_bits_MSB(cram_block *block) {$/;"	f	file:
getoverlap_help	src/getOverlap/getOverlap.cpp	/^void getoverlap_help(void) {$/;"	f
getoverlap_main	src/getOverlap/getOverlap.cpp	/^int getoverlap_main(int argc, char* argv[]) {$/;"	f
gettid	src/utils/htslib/cram/cram_io.c	78;"	d	file:
giveFinalReport	src/complementFile/complementFile.cpp	/^void ComplementFile::giveFinalReport(RecordOutputMgr *outputMgr) {$/;"	f	class:ComplementFile
giveFinalReport	src/coverageFile/coverageFile.cpp	/^void CoverageFile::giveFinalReport(RecordOutputMgr *outputMgr) {$/;"	f	class:CoverageFile
giveFinalReport	src/fisher/fisher.cpp	/^void Fisher::giveFinalReport(RecordOutputMgr *outputMgr)$/;"	f	class:Fisher
giveFinalReport	src/groupBy/groupBy.h	/^	virtual void  giveFinalReport(RecordOutputMgr *outputMgr) {}$/;"	f	class:GroupBy
giveFinalReport	src/intersectFile/intersectFile.h	/^	virtual void  giveFinalReport(RecordOutputMgr *) {}$/;"	f	class:IntersectFile
giveFinalReport	src/jaccard/jaccard.cpp	/^void  Jaccard::giveFinalReport(RecordOutputMgr *outputMgr) {$/;"	f	class:Jaccard
giveFinalReport	src/mergeFile/mergeFile.h	/^	virtual void  giveFinalReport(RecordOutputMgr *outputMgr) {}$/;"	f	class:MergeFile
giveFinalReport	src/sampleFile/sampleFile.cpp	/^void  SampleFile::giveFinalReport(RecordOutputMgr *outputMgr) {$/;"	f	class:SampleFile
giveFinalReport	src/spacingFile/spacingFile.h	/^    virtual void  giveFinalReport(RecordOutputMgr *) {}$/;"	f	class:SpacingFile
greaterThan	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::greaterThan(const Record *other) const$/;"	f	class:Record
groupby_help	src/groupBy/groupByHelp.cpp	/^void groupby_help(void) {$/;"	f
growBuffer	src/utils/general/FreeList.h	/^	void growBuffer() {$/;"	f	class:FreeList
grp	src/utils/htslib/bcf_sr_sort.h	/^    grp_t *grp;             \/\/ list of VCF representatives, each with a unique combination of duplicate lines$/;"	m	struct:__anon120
grp_create_key	src/utils/htslib/bcf_sr_sort.c	/^char *grp_create_key(sr_sort_t *srt)$/;"	f
grp_str2int	src/utils/htslib/bcf_sr_sort.h	/^    void *grp_str2int;$/;"	m	struct:__anon120
grp_t	src/utils/htslib/bcf_sr_sort.h	/^grp_t;$/;"	t	typeref:struct:__anon118
gz_def_cnt	src/utils/htslib/cram/cram_structs.h	/^    int gz_def_cnt;$/;"	m	struct:__anon82
gz_def_extra	src/utils/htslib/cram/cram_structs.h	/^    double gz_def_extra;$/;"	m	struct:__anon82
gz_rle_cnt	src/utils/htslib/cram/cram_structs.h	/^    int gz_rle_cnt;$/;"	m	struct:__anon82
gz_rle_extra	src/utils/htslib/cram/cram_structs.h	/^    double gz_rle_extra;$/;"	m	struct:__anon82
gz_stream	src/utils/htslib/htslib/bgzf.h	/^    z_stream *gz_stream;\/\/ for gzip-compressed files$/;"	m	struct:BGZF
gzi	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
gzip	src/utils/htslib/htslib/hts.h	/^    no_compression, gzip, bgzf, custom,$/;"	e	enum:htsCompression
gzstreambase	src/utils/gzstream/gzstream.C	/^gzstreambase::gzstreambase( const char* name, int mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
gzstreambase	src/utils/gzstream/gzstream.h	/^    gzstreambase() { init(&buf); }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
gzstreambase	src/utils/gzstream/gzstream.h	/^class gzstreambase : virtual public std::ios {$/;"	c	namespace:GZSTREAM_NAMESPACE
gzstreambuf	src/utils/gzstream/gzstream.h	/^    gzstreambuf() : opened(0) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
gzstreambuf	src/utils/gzstream/gzstream.h	/^class gzstreambuf : public std::streambuf {$/;"	c	namespace:GZSTREAM_NAMESPACE
h	src/utils/htslib/cram/cram_decode.c	/^    SAM_hdr *h;$/;"	m	struct:__anon97	file:
h	src/utils/htslib/cram/cram_structs.h	/^    khash_t(m_i2i) *h;$/;"	m	struct:cram_stats
h	src/utils/htslib/cram/sam_header.h	/^    khash_t(sam_hdr) *h;$/;"	m	struct:__anon67
hFILE	src/utils/htslib/htslib/hfile.h	/^typedef struct hFILE {$/;"	s
hFILE	src/utils/htslib/htslib/hfile.h	/^} hFILE;$/;"	t	typeref:struct:hFILE
hFILE_backend	src/utils/htslib/hfile_internal.h	/^struct hFILE_backend {$/;"	s
hFILE_callback_ops	src/utils/htslib/htslib/hfile.h	/^typedef struct  hFILE_callback_ops {$/;"	s
hFILE_callback_ops	src/utils/htslib/htslib/hfile.h	/^} hFILE_callback_ops;$/;"	t	typeref:struct:hFILE_callback_ops
hFILE_cb	src/utils/htslib/hfile.c	/^} hFILE_cb;$/;"	t	typeref:struct:__anon110	file:
hFILE_fd	src/utils/htslib/hfile.c	/^} hFILE_fd;$/;"	t	typeref:struct:__anon109	file:
hFILE_libcurl	src/utils/htslib/hfile_libcurl.c	/^} hFILE_libcurl;$/;"	t	typeref:struct:__anon102	file:
hFILE_mem	src/utils/htslib/hfile.c	/^} hFILE_mem;$/;"	t	typeref:struct:__anon111	file:
hFILE_multipart	src/utils/htslib/multipart.c	/^} hFILE_multipart;$/;"	t	typeref:struct:__anon106	file:
hFILE_net	src/utils/htslib/hfile_net.c	/^} hFILE_net;$/;"	t	typeref:struct:__anon44	file:
hFILE_plugin	src/utils/htslib/hfile_internal.h	/^struct hFILE_plugin {$/;"	s
hFILE_plugin_list	src/utils/htslib/hfile.c	/^struct hFILE_plugin_list {$/;"	s	file:
hFILE_scheme_handler	src/utils/htslib/hfile_internal.h	/^struct hFILE_scheme_handler {$/;"	s
h_meta	src/utils/htslib/cram/cram_structs.h	/^    khash_t(refs) *h_meta; \/\/ ref_entry*, index by name$/;"	m	struct:__anon95
hadError	src/utils/driver/BedtoolsDriver.h	/^	bool hadError() const { return _hadError; }$/;"	f	class:BedtoolsDriver
handleTextFormat	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::handleTextFormat(const char *buffer, size_t len)$/;"	f	class:FileRecordTypeChecker
handle_A	src/utils/Contexts/ContextSubtract.cpp	/^bool ContextSubtract::handle_A() {$/;"	f	class:ContextSubtract
handle_D	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_D() {$/;"	f	class:ContextClosest
handle_F	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_F()$/;"	f	class:ContextIntersect
handle_N	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_N() {$/;"	f	class:ContextClosest
handle_N	src/utils/Contexts/ContextSubtract.cpp	/^bool ContextSubtract::handle_N() {$/;"	f	class:ContextSubtract
handle_S	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_S()$/;"	f	class:ContextIntersect
handle_S	src/utils/Contexts/ContextJaccard.cpp	/^bool ContextJaccard::handle_S() {$/;"	f	class:ContextJaccard
handle_S	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_S() {$/;"	f	class:ContextMerge
handle_a	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_a()$/;"	f	class:ContextIntersect
handle_abam	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_abam()$/;"	f	class:ContextIntersect
handle_b	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_b()$/;"	f	class:ContextIntersect
handle_bed	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_bed()$/;"	f	class:ContextBase
handle_c	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_c()$/;"	f	class:ContextBase
handle_c	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::handle_c()$/;"	f	class:ContextCoverage
handle_c	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_c()$/;"	f	class:ContextIntersect
handle_d	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_d() {$/;"	f	class:ContextClosest
handle_d	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::handle_d()$/;"	f	class:ContextCoverage
handle_d	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_d() {$/;"	f	class:ContextMerge
handle_delim	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_delim()$/;"	f	class:ContextBase
handle_e	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_e()$/;"	f	class:ContextIntersect
handle_exclude	src/utils/Contexts/ContextFisher.cpp	/^bool ContextFisher::handle_exclude()$/;"	f	class:ContextFisher
handle_f	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_f()$/;"	f	class:ContextIntersect
handle_fbam	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_fbam()$/;"	f	class:ContextBase
handle_fd	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_fd() {$/;"	f	class:ContextClosest
handle_filenames	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_filenames()$/;"	f	class:ContextIntersect
handle_fu	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_fu() {$/;"	f	class:ContextClosest
handle_full	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_full() {$/;"	f	class:ContextGroupBy
handle_g	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_g()$/;"	f	class:ContextBase
handle_g	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_g()$/;"	f	class:ContextGroupBy
handle_h	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_h()$/;"	f	class:ContextBase
handle_header	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_header()$/;"	f	class:ContextBase
handle_header	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_header() {$/;"	f	class:ContextGroupBy
handle_hist	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::handle_hist()$/;"	f	class:ContextCoverage
handle_i	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_i()$/;"	f	class:ContextBase
handle_id	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_id() {$/;"	f	class:ContextClosest
handle_ignorecase	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_ignorecase() {$/;"	f	class:ContextGroupBy
handle_inheader	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_inheader()$/;"	f	class:ContextGroupBy
handle_io	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_io() {$/;"	f	class:ContextClosest
handle_iobuf	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_iobuf()$/;"	f	class:ContextBase
handle_iu	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_iu() {$/;"	f	class:ContextClosest
handle_k	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_k()$/;"	f	class:ContextClosest
handle_loj	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_loj()$/;"	f	class:ContextIntersect
handle_m	src/utils/Contexts/ContextFisher.cpp	/^bool ContextFisher::handle_m()$/;"	f	class:ContextFisher
handle_mdb	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_mdb()$/;"	f	class:ContextClosest
handle_mean	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::handle_mean()$/;"	f	class:ContextCoverage
handle_n	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_n()$/;"	f	class:ContextBase
handle_n	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_n()$/;"	f	class:ContextMerge
handle_names	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_names()$/;"	f	class:ContextIntersect
handle_nms	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_nms()$/;"	f	class:ContextMerge
handle_nobuf	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_nobuf()$/;"	f	class:ContextBase
handle_nonamecheck	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_nonamecheck()$/;"	f	class:ContextBase
handle_null	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_null()$/;"	f	class:ContextBase
handle_o	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_o()$/;"	f	class:ContextBase
handle_outheader	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::handle_outheader() {$/;"	f	class:ContextGroupBy
handle_prec	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_prec()$/;"	f	class:ContextBase
handle_r	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_r()$/;"	f	class:ContextIntersect
handle_s	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_s()$/;"	f	class:ContextIntersect
handle_s	src/utils/Contexts/ContextJaccard.cpp	/^bool ContextJaccard::handle_s() {$/;"	f	class:ContextJaccard
handle_s	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_s() {$/;"	f	class:ContextMerge
handle_s	src/utils/Contexts/ContextSample.cpp	/^bool ContextSample::handle_s()$/;"	f	class:ContextSample
handle_scores	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::handle_scores()$/;"	f	class:ContextMerge
handle_seed	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_seed()$/;"	f	class:ContextBase
handle_sorted	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_sorted()$/;"	f	class:ContextBase
handle_sortout	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_sortout()$/;"	f	class:ContextBase
handle_split	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_split()$/;"	f	class:ContextBase
handle_t	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::handle_t()$/;"	f	class:ContextClosest
handle_u	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_u()$/;"	f	class:ContextIntersect
handle_ubam	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::handle_ubam()$/;"	f	class:ContextBase
handle_v	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_v()$/;"	f	class:ContextIntersect
handle_wa	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_wa()$/;"	f	class:ContextIntersect
handle_wao	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_wao()$/;"	f	class:ContextIntersect
handle_wb	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_wb()$/;"	f	class:ContextIntersect
handle_wo	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::handle_wo()$/;"	f	class:ContextIntersect
hasChrInChromName	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::hasChrInChromName() const {$/;"	f	class:Record
hasChrom	src/utils/GenomeFile/NewGenomeFile.h	/^    bool hasChrom(const string &chrom) const { return _chromSizeIds.find(chrom) != _chromSizeIds.end(); }$/;"	f	class:NewGenomeFile
hasColumnOpsMethods	src/utils/Contexts/ContextBase.h	/^    virtual bool hasColumnOpsMethods() const { return _hasColumnOpsMethods; }$/;"	f	class:ContextBase
hasConstantSeed	src/utils/Contexts/ContextBase.h	/^    virtual bool hasConstantSeed() const { return _hasConstantSeed; }$/;"	f	class:ContextBase
hasGenomeFile	src/utils/Contexts/ContextBase.h	/^	bool hasGenomeFile() const { return _genomeFile != NULL; }$/;"	f	class:ContextBase
hasHeader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	virtual bool hasHeader() const { return _bamReader->IsOpen(); } \/\/any open Bam file automatically has a header$/;"	f	class:BamFileReader
hasHeader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	virtual bool hasHeader() const { return _fullHeaderFound; }$/;"	f	class:SingleLineDelimTextFileReader
hasHeader	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool hasHeader() const { return _fileReader->hasHeader(); }$/;"	f	class:FileRecordMgr
hasIntersectMethods	src/utils/Contexts/ContextBase.h	/^    virtual bool hasIntersectMethods() const { return false; }$/;"	f	class:ContextBase
hasIntersectMethods	src/utils/Contexts/ContextClosest.h	/^    virtual bool hasIntersectMethods() const { return true; }$/;"	f	class:ContextClosest
hasIntersectMethods	src/utils/Contexts/ContextCoverage.h	/^    virtual bool hasIntersectMethods() const { return true; }$/;"	f	class:ContextCoverage
hasIntersectMethods	src/utils/Contexts/ContextIntersect.h	/^    virtual bool hasIntersectMethods() const { return true; }$/;"	f	class:ContextIntersect
hasIntersectMethods	src/utils/Contexts/ContextMap.h	/^    virtual bool hasIntersectMethods() const { return true; }$/;"	f	class:ContextMap
hasIntersectMethods	src/utils/Contexts/ContextSubtract.h	/^    virtual bool hasIntersectMethods() const { return true; }$/;"	f	class:ContextSubtract
hasLeadingZeroInChromName	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::hasLeadingZeroInChromName(bool chrKnown) const {$/;"	f	class:Record
hasNext	src/utils/FileRecordTools/Records/RecordList.h	/^	bool hasNext() const { return _next != NULL; }$/;"	f	class:RecordListNode
hasNext	src/utils/general/BTlist.h	/^	bool hasNext() const { return _next != NULL; }$/;"	f	class:BTlistNode
hasStrandedDistMode	src/utils/Contexts/ContextClosest.h	/^    bool hasStrandedDistMode() const { return _haveStrandedDistMode; }$/;"	f	class:ContextClosest
hasTieMode	src/utils/Contexts/ContextClosest.h	/^    bool hasTieMode() const { return _haveTieMode; }$/;"	f	class:ContextClosest
has_errno	src/utils/htslib/htslib/hfile.h	/^    int has_errno;$/;"	m	struct:hFILE
has_filter	src/utils/htslib/synced_bcf_reader.c	/^static inline int has_filter(bcf_sr_t *reader, bcf1_t *line)$/;"	f	file:
has_line	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int *has_line;      \/\/ Corresponds to return value of bcf_sr_next_line but is not limited by sizeof(int). Use bcf_sr_has_line macro to query.$/;"	m	struct:__anon33
has_range	src/utils/BamTools/include/BamReader.hpp	/^			bool has_range;$/;"	m	struct:BamTools::BamReader::_SamFile
haveTitles	src/multiIntersectBed/multiIntersectBed.h	/^    bool                     haveTitles;$/;"	m	class:MultiIntersectBed
hclearerr	src/utils/htslib/htslib/hfile.h	/^static inline void hclearerr(hFILE *fp)$/;"	f
hclose	src/utils/htslib/hfile.c	/^int hclose(hFILE *fp)$/;"	f
hclose_abruptly	src/utils/htslib/hfile.c	/^void hclose_abruptly(hFILE *fp)$/;"	f
hdopen	src/utils/htslib/hfile.c	/^hFILE *hdopen(int fd, const char *mode)$/;"	f
hdr	src/utils/htslib/cram/cram_structs.h	/^    cram_block_slice_hdr *hdr;$/;"	m	struct:cram_slice
hdr	src/utils/htslib/vcf_sweep.c	/^    bcf_hdr_t *hdr;$/;"	m	struct:_bcf_sweep_t	file:
hdr_block	src/utils/htslib/cram/cram_structs.h	/^    cram_block *hdr_block;$/;"	m	struct:cram_slice
hdr_from_dict	src/utils/htslib/sam.c	/^static bam_hdr_t *hdr_from_dict(sdict_t *d)$/;"	f	file:
hdrlist	src/utils/htslib/hfile_libcurl.c	/^} hdrlist;$/;"	t	typeref:struct:__anon100	file:
head	src/utils/htslib/sam.c	/^    lbnode_t *head, *tail;$/;"	m	struct:__bam_plp_t	file:
header	src/utils/htslib/cram/cram_structs.h	/^    SAM_hdr       *header;$/;"	m	struct:cram_fd
header	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf_hdr_t *header;$/;"	m	struct:__anon31
header_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^    header_error, no_eof, no_memory, vcf_parse_error, bcf_read_error$/;"	e	enum:__anon32
header_only	src/utils/htslib/tabix.c	/^    int print_header, header_only;$/;"	m	struct:__anon99	file:
headers	src/utils/htslib/hfile_libcurl.c	/^    http_headers headers;$/;"	m	struct:__anon102	file:
headers	src/utils/htslib/hfile_s3.c	/^    char *headers[3];$/;"	m	struct:__anon55	file:
headers	src/utils/htslib/multipart.c	/^    char **headers;$/;"	m	struct:hfile_part	file:
herrno	src/utils/htslib/htslib/hfile.h	/^static inline int herrno(hFILE *fp)$/;"	f
hfile	src/utils/htslib/htslib/hts.h	/^        struct hFILE *hfile;$/;"	m	union:__anon11::__anon12	typeref:struct:__anon11::__anon12::hFILE
hfile_add_scheme_handler	src/utils/htslib/hfile.c	/^void hfile_add_scheme_handler(const char *scheme,$/;"	f
hfile_always_local	src/utils/htslib/hfile.c	/^int hfile_always_local (const char *fname) { return 0; }$/;"	f
hfile_always_remote	src/utils/htslib/hfile.c	/^int hfile_always_remote(const char *fname) { return 1; }$/;"	f
hfile_destroy	src/utils/htslib/hfile.c	/^void hfile_destroy(hFILE *fp)$/;"	f
hfile_exit	src/utils/htslib/hfile.c	/^static void hfile_exit()$/;"	f	file:
hfile_init	src/utils/htslib/hfile.c	/^hFILE *hfile_init(size_t struct_size, const char *mode, size_t capacity)$/;"	f
hfile_init_fixed	src/utils/htslib/hfile.c	/^hFILE *hfile_init_fixed(size_t struct_size, const char *mode,$/;"	f
hfile_internal_h	src/utils/htslib/Makefile	/^hfile_internal_h = hfile_internal.h $(htslib_hfile_h)$/;"	m
hfile_oflags	src/utils/htslib/hfile.c	/^int hfile_oflags(const char *mode)$/;"	f
hfile_part	src/utils/htslib/multipart.c	/^typedef struct hfile_part {$/;"	s	file:
hfile_part	src/utils/htslib/multipart.c	/^} hfile_part;$/;"	t	typeref:struct:hfile_part	file:
hfile_plugin_init_net	src/utils/htslib/hfile_net.c	/^int hfile_plugin_init_net(struct hFILE_plugin *self)$/;"	f
hfile_set_blksize	src/utils/htslib/hfile.c	/^int hfile_set_blksize(hFILE *fp, size_t bufsiz) {$/;"	f
hflush	src/utils/htslib/hfile.c	/^int hflush(hFILE *fp)$/;"	f
hgacc_t	src/fisher/kfunc.h	/^} hgacc_t;$/;"	t	typeref:struct:__anon140
hgacc_t	src/utils/htslib/kfunc.c	/^} hgacc_t;$/;"	t	typeref:struct:__anon9	file:
hgetc	src/utils/htslib/htslib/hfile.h	/^static inline int hgetc(hFILE *fp)$/;"	f
hgetc2	src/utils/htslib/hfile.c	/^int hgetc2(hFILE *fp)$/;"	f
hgetdelim	src/utils/htslib/hfile.c	/^ssize_t hgetdelim(char *buffer, size_t size, int delim, hFILE *fp)$/;"	f
hgetln	src/utils/htslib/htslib/hfile.h	/^hgetln(char *buffer, size_t size, hFILE *fp)$/;"	f
hgets	src/utils/htslib/hfile.c	/^char *hgets(char *buffer, int size, hFILE *fp)$/;"	f
hi	src/utils/htslib/md5.c	/^	hts_md5_u32plus lo, hi;$/;"	m	struct:hts_md5_context	file:
hisremote	src/utils/htslib/hfile.c	/^int hisremote(const char *fname)$/;"	f
histAscType	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef multimap<int, string, less<int> > histAscType;$/;"	t	class:KeyListOpsMethods
histDescType	src/utils/KeyListOps/KeyListOpsMethods.h	/^	typedef multimap<int, string, greater<int> > histDescType;$/;"	t	class:KeyListOpsMethods
histMap	src/genomeCoverageBed/genomeCoverageBed.h	/^typedef map<int, unsigned int, less<int> > histMap;$/;"	t
hit_eof	src/utils/htslib/bgzf.c	/^    int hit_eof;  \/\/ r\/w entirely within main thread$/;"	m	struct:bgzf_mtaux_t	file:
hit_eof	src/utils/htslib/bgzf.c	/^    int hit_eof;$/;"	m	struct:bgzf_job	file:
hopen	src/utils/htslib/hfile.c	/^hFILE *hopen(const char *fname, const char *mode, ...)$/;"	f
hopen_callback	src/utils/htslib/hfile.c	/^hFILE *hopen_callback(hFILE_callback_ops ops, const char* mode)$/;"	f
hopen_fd	src/utils/htslib/hfile.c	/^static hFILE *hopen_fd(const char *filename, const char *mode)$/;"	f	file:
hopen_fd_fileuri	src/utils/htslib/hfile.c	/^static hFILE *hopen_fd_fileuri(const char *url, const char *mode)$/;"	f	file:
hopen_fd_stdinout	src/utils/htslib/hfile.c	/^static hFILE *hopen_fd_stdinout(const char *mode)$/;"	f	file:
hopen_htsget_redirect	src/utils/htslib/multipart.c	/^hFILE *hopen_htsget_redirect(hFILE *hfile, const char *mode)$/;"	f
hopen_libcurl	src/utils/htslib/hfile_libcurl.c	/^static hFILE *hopen_libcurl(const char *url, const char *modes)$/;"	f	file:
hopen_mem	src/utils/htslib/hfile.c	/^static hFILE *hopen_mem(const char *url, const char *mode)$/;"	f	file:
hopen_net	src/utils/htslib/hfile_net.c	/^hFILE *hopen_net(const char *filename, const char *mode)$/;"	f
hopen_unknown_scheme	src/utils/htslib/hfile.c	/^static hFILE *hopen_unknown_scheme(const char *fname, const char *mode)$/;"	f	file:
host	src/utils/htslib/htslib/knetfile.h	/^	char *host, *port;$/;"	m	struct:knetFile_s
hpeek	src/utils/htslib/hfile.c	/^ssize_t hpeek(hFILE *fp, void *buffer, size_t nbytes)$/;"	f
hputc	src/utils/htslib/htslib/hfile.h	/^static inline int hputc(int c, hFILE *fp)$/;"	f
hputc2	src/utils/htslib/hfile.c	/^int hputc2(int c, hFILE *fp)$/;"	f
hputs	src/utils/htslib/htslib/hfile.h	/^static inline int hputs(const char *text, hFILE *fp)$/;"	f
hputs2	src/utils/htslib/hfile.c	/^int hputs2(const char *text, size_t totalbytes, size_t ncopied, hFILE *fp)$/;"	f
hread	src/utils/htslib/htslib/hfile.h	/^hread(hFILE *fp, void *buffer, size_t nbytes)$/;"	f
hread2	src/utils/htslib/hfile.c	/^ssize_t hread2(hFILE *fp, void *destv, size_t nbytes, size_t nread)$/;"	f
hread_uint64	src/utils/htslib/bgzf.c	/^static inline int hread_uint64(uint64_t *xptr, hFILE *f)$/;"	f	file:
hrec	src/utils/htslib/htslib/vcf.h	/^    bcf_hrec_t **hrec;$/;"	m	struct:__anon21
hrec	src/utils/htslib/htslib/vcf.h	/^    bcf_hrec_t *hrec[3];$/;"	m	struct:__anon19
hrec_add_idx	src/utils/htslib/vcf.c	/^void hrec_add_idx(bcf_hrec_t *hrec, int idx)$/;"	f
hseek	src/utils/htslib/hfile.c	/^off_t hseek(hFILE *fp, off_t offset, int whence)$/;"	f
htell	src/utils/htslib/htslib/hfile.h	/^static inline off_t htell(hFILE *fp)$/;"	f
html_favicon	docs/conf.py	/^html_favicon = 'bedtools.png'$/;"	v
html_last_updated_fmt	docs/conf.py	/^html_last_updated_fmt = '%b %d, %Y'$/;"	v
html_logo	docs/conf.py	/^html_logo = 'bedtools.swiss.png'$/;"	v
html_short_title	docs/conf.py	/^html_short_title = project + " v" + release$/;"	v
html_show_sphinx	docs/conf.py	/^html_show_sphinx = False$/;"	v
html_sidebars	docs/conf.py	/^html_sidebars = {$/;"	v
html_static_path	docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_style	docs/conf.py	/^html_style = 'labibi.css'$/;"	v
html_theme	docs/conf.py	/^html_theme = 'rtd'$/;"	v
html_theme_path	docs/conf.py	/^html_theme_path = ["themes"]$/;"	v
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = 'bedtools-docs'$/;"	v
htsCompression	src/utils/htslib/htslib/hts.h	/^enum htsCompression {$/;"	g
htsExactFormat	src/utils/htslib/htslib/hts.h	/^enum htsExactFormat {$/;"	g
htsFile	src/utils/htslib/htslib/hts.h	/^} htsFile;$/;"	t	typeref:struct:__anon11
htsFormat	src/utils/htslib/htslib/hts.h	/^typedef struct htsFormat {$/;"	s
htsFormat	src/utils/htslib/htslib/hts.h	/^} htsFormat;$/;"	t	typeref:struct:htsFormat
htsFormatCategory	src/utils/htslib/htslib/hts.h	/^enum htsFormatCategory {$/;"	g
htsLogLevel	src/utils/htslib/htslib/hts_log.h	/^enum htsLogLevel {$/;"	g
htsThreadPool	src/utils/htslib/htslib/hts.h	/^} htsThreadPool;$/;"	t	typeref:struct:__anon13
hts_base64_decoded_length	src/utils/htslib/textutils.c	/^size_t hts_base64_decoded_length(size_t len)$/;"	f
hts_bin_bot	src/utils/htslib/htslib/hts.h	/^static inline int hts_bin_bot(int bin, int n_lvls)$/;"	f
hts_bin_first	src/utils/htslib/htslib/hts.h	544;"	d
hts_bin_parent	src/utils/htslib/htslib/hts.h	545;"	d
hts_check_EOF	src/utils/htslib/hts.c	/^int hts_check_EOF(htsFile *fp)$/;"	f
hts_close	src/utils/htslib/hts.c	/^int hts_close(htsFile *fp)$/;"	f
hts_cram_idx_t	src/utils/htslib/hts_internal.h	/^typedef struct hts_cram_idx_t {$/;"	s
hts_cram_idx_t	src/utils/htslib/hts_internal.h	/^} hts_cram_idx_t;$/;"	t	typeref:struct:hts_cram_idx_t
hts_decode_base64	src/utils/htslib/textutils.c	/^int hts_decode_base64(char *dest, size_t *destlen, const char *s)$/;"	f
hts_decode_percent	src/utils/htslib/textutils.c	/^int hts_decode_percent(char *dest, size_t *destlen, const char *s)$/;"	f
hts_detect_format	src/utils/htslib/hts.c	/^int hts_detect_format(hFILE *hfile, htsFormat *fmt)$/;"	f
hts_drand48	src/utils/htslib/hts_os.c	/^double hts_drand48(void) { return drand48(); }$/;"	f
hts_drand48	src/utils/htslib/win/rand.c	/^hts_drand48(void)$/;"	f
hts_erand48	src/utils/htslib/hts_os.c	/^double hts_erand48(unsigned short xseed[3]) { return erand48(xseed); }$/;"	f
hts_erand48	src/utils/htslib/win/rand.c	/^hts_erand48(unsigned short xseed[3])$/;"	f
hts_expand	src/utils/htslib/htslib/hts.h	83;"	d
hts_expand0	src/utils/htslib/htslib/hts.h	112;"	d
hts_file_type	src/utils/htslib/hts.c	/^int hts_file_type(const char *fname)$/;"	f
hts_fmt_option	src/utils/htslib/htslib/hts.h	/^enum hts_fmt_option {$/;"	g
hts_format_description	src/utils/htslib/hts.c	/^char *hts_format_description(const htsFormat *format)$/;"	f
hts_format_file_extension	src/utils/htslib/hts.c	/^const char *hts_format_file_extension(const htsFormat *format) {$/;"	f
hts_get_bgzfp	src/utils/htslib/hts.c	/^BGZF *hts_get_bgzfp(htsFile *fp)$/;"	f
hts_get_format	src/utils/htslib/hts.c	/^const htsFormat *hts_get_format(htsFile *fp)$/;"	f
hts_get_log_level	src/utils/htslib/hts.c	/^enum htsLogLevel hts_get_log_level()$/;"	f
hts_getline	src/utils/htslib/hts.c	/^int hts_getline(htsFile *fp, int delimiter, kstring_t *str)$/;"	f
hts_hfile	src/utils/htslib/hts.c	/^static hFILE *hts_hfile(htsFile *fp) {$/;"	f	file:
hts_hopen	src/utils/htslib/hts.c	/^htsFile *hts_hopen(hFILE *hfile, const char *fn, const char *mode)$/;"	f
hts_httphdr_callback	src/utils/htslib/hfile_internal.h	/^typedef int (* hts_httphdr_callback) (void *cb_data, char ***hdrs);$/;"	t
hts_id2name_f	src/utils/htslib/htslib/hts.h	/^    typedef const char *(*hts_id2name_f)(void*, int);$/;"	t
hts_idx_destroy	src/utils/htslib/hts.c	/^void hts_idx_destroy(hts_idx_t *idx)$/;"	f
hts_idx_finish	src/utils/htslib/hts.c	/^void hts_idx_finish(hts_idx_t *idx, uint64_t final_offset)$/;"	f
hts_idx_get_meta	src/utils/htslib/hts.c	/^uint8_t *hts_idx_get_meta(hts_idx_t *idx, uint32_t *l_meta)$/;"	f
hts_idx_get_n_no_coor	src/utils/htslib/hts.c	/^uint64_t hts_idx_get_n_no_coor(const hts_idx_t* idx)$/;"	f
hts_idx_get_stat	src/utils/htslib/hts.c	/^int hts_idx_get_stat(const hts_idx_t* idx, int tid, uint64_t* mapped, uint64_t* unmapped)$/;"	f
hts_idx_getfn	src/utils/htslib/hts.c	/^char *hts_idx_getfn(const char *fn, const char *ext)$/;"	f
hts_idx_init	src/utils/htslib/hts.c	/^hts_idx_t *hts_idx_init(int n, int fmt, uint64_t offset0, int min_shift, int n_lvls)$/;"	f
hts_idx_load	src/utils/htslib/hts.c	/^hts_idx_t *hts_idx_load(const char *fn, int fmt)$/;"	f
hts_idx_load2	src/utils/htslib/hts.c	/^hts_idx_t *hts_idx_load2(const char *fn, const char *fnidx)$/;"	f
hts_idx_load_core	src/utils/htslib/hts.c	/^static int hts_idx_load_core(hts_idx_t *idx, BGZF *fp, int fmt)$/;"	f	file:
hts_idx_load_local	src/utils/htslib/hts.c	/^static hts_idx_t *hts_idx_load_local(const char *fn)$/;"	f	file:
hts_idx_push	src/utils/htslib/hts.c	/^int hts_idx_push(hts_idx_t *idx, int tid, int beg, int end, uint64_t offset, int is_mapped)$/;"	f
hts_idx_save	src/utils/htslib/hts.c	/^int hts_idx_save(const hts_idx_t *idx, const char *fn, int fmt)$/;"	f
hts_idx_save_as	src/utils/htslib/hts.c	/^int hts_idx_save_as(const hts_idx_t *idx, const char *fn, const char *fnidx, int fmt)$/;"	f
hts_idx_save_core	src/utils/htslib/hts.c	/^static int hts_idx_save_core(const hts_idx_t *idx, BGZF *fp, int fmt)$/;"	f	file:
hts_idx_seqnames	src/utils/htslib/hts.c	/^const char **hts_idx_seqnames(const hts_idx_t *idx, int *n, hts_id2name_f getid, void *hdr)$/;"	f
hts_idx_set_meta	src/utils/htslib/hts.c	/^int hts_idx_set_meta(hts_idx_t *idx, uint32_t l_meta, uint8_t *meta,$/;"	f
hts_idx_t	src/utils/htslib/htslib/hts.h	/^typedef struct __hts_idx_t hts_idx_t;$/;"	t	typeref:struct:__hts_idx_t
hts_internal_h	src/utils/htslib/Makefile	/^hts_internal_h = hts_internal.h $(htslib_hts_h)$/;"	m
hts_itr_destroy	src/utils/htslib/hts.c	/^void hts_itr_destroy(hts_itr_t *iter)$/;"	f
hts_itr_next	src/utils/htslib/hts.c	/^int hts_itr_next(BGZF *fp, hts_itr_t *iter, void *r, void *data)$/;"	f
hts_itr_query	src/utils/htslib/hts.c	/^hts_itr_t *hts_itr_query(const hts_idx_t *idx, int tid, int beg, int end, hts_readrec_func *readrec)$/;"	f
hts_itr_query_func	src/utils/htslib/htslib/hts.h	/^    typedef hts_itr_t *hts_itr_query_func(const hts_idx_t *idx, int tid, int beg, int end, hts_readrec_func *readrec);$/;"	t
hts_itr_querys	src/utils/htslib/hts.c	/^hts_itr_t *hts_itr_querys(const hts_idx_t *idx, const char *reg, hts_name2id_f getid, void *hdr, hts_itr_query_func *itr_query, hts_readrec_func *readrec)$/;"	f
hts_itr_t	src/utils/htslib/htslib/hts.h	/^} hts_itr_t;$/;"	t	typeref:struct:__anon16
hts_json_fnext	src/utils/htslib/textutils.c	/^char hts_json_fnext(struct hFILE *fp, hts_json_token *token, kstring_t *kstr)$/;"	f
hts_json_fskip_value	src/utils/htslib/textutils.c	/^char hts_json_fskip_value(struct hFILE *fp, char type)$/;"	f
hts_json_nextfn	src/utils/htslib/textutils.c	/^typedef char hts_json_nextfn(void *arg1, void *arg2, hts_json_token *token);$/;"	t	file:
hts_json_snext	src/utils/htslib/textutils.c	/^char hts_json_snext(char *str, size_t *state, hts_json_token *token)$/;"	f
hts_json_sskip_value	src/utils/htslib/textutils.c	/^char hts_json_sskip_value(char *str, size_t *state, char type)$/;"	f
hts_json_token	src/utils/htslib/hts_internal.h	/^typedef struct hts_json_token {$/;"	s
hts_json_token	src/utils/htslib/hts_internal.h	/^} hts_json_token;$/;"	t	typeref:struct:hts_json_token
hts_log	src/utils/htslib/hts.c	/^void hts_log(enum htsLogLevel severity, const char *context, const char *format, ...)$/;"	f
hts_log_debug	src/utils/htslib/htslib/hts_log.h	84;"	d
hts_log_error	src/utils/htslib/htslib/hts_log.h	75;"	d
hts_log_info	src/utils/htslib/htslib/hts_log.h	81;"	d
hts_log_trace	src/utils/htslib/htslib/hts_log.h	87;"	d
hts_log_warning	src/utils/htslib/htslib/hts_log.h	78;"	d
hts_lrand48	src/utils/htslib/hts_os.c	/^double hts_lrand48(void) { return lrand48(); }$/;"	f
hts_lrand48	src/utils/htslib/win/rand.c	/^hts_lrand48(void)$/;"	f
hts_md5_context	src/utils/htslib/htslib/hts.h	/^    typedef struct hts_md5_context hts_md5_context;$/;"	t	typeref:struct:hts_md5_context
hts_md5_context	src/utils/htslib/md5.c	/^struct hts_md5_context {$/;"	s	file:
hts_md5_destroy	src/utils/htslib/md5.c	/^void hts_md5_destroy(hts_md5_context *ctx)$/;"	f
hts_md5_final	src/utils/htslib/md5.c	/^void hts_md5_final(unsigned char *result, hts_md5_context *ctx)$/;"	f
hts_md5_hex	src/utils/htslib/md5.c	/^void hts_md5_hex(char *hex, const unsigned char *digest)$/;"	f
hts_md5_init	src/utils/htslib/md5.c	/^hts_md5_context *hts_md5_init(void)$/;"	f
hts_md5_reset	src/utils/htslib/md5.c	/^void hts_md5_reset(hts_md5_context *ctx)$/;"	f
hts_md5_u32plus	src/utils/htslib/md5.c	/^typedef unsigned int hts_md5_u32plus;$/;"	t	file:
hts_md5_update	src/utils/htslib/md5.c	/^void hts_md5_update(hts_md5_context *ctx, const void *data, unsigned long size)$/;"	f
hts_name2id_f	src/utils/htslib/htslib/hts.h	/^    typedef int (*hts_name2id_f)(void*, const char*);$/;"	t
hts_open	src/utils/htslib/hts.c	/^htsFile *hts_open(const char *fn, const char *mode) {$/;"	f
hts_open_callback	src/utils/htslib/hts.c	/^htsFile *hts_open_callback(const char* fn, hFILE_callback_ops* ops, const char* mode)$/;"	f
hts_open_format	src/utils/htslib/hts.c	/^htsFile *hts_open_format(const char *fn, const char *mode, const htsFormat *fmt)$/;"	f
hts_open_format_impl	src/utils/htslib/hts.c	/^static htsFile *hts_open_format_impl(const char *fn, const char *mode, const htsFormat *fmt, hFILE* hf)$/;"	f	file:
hts_opt	src/utils/htslib/htslib/hts.h	/^typedef struct hts_opt {$/;"	s
hts_opt	src/utils/htslib/htslib/hts.h	/^} hts_opt;$/;"	t	typeref:struct:hts_opt
hts_opt_add	src/utils/htslib/hts.c	/^int hts_opt_add(hts_opt **opts, const char *c_arg) {$/;"	f
hts_opt_apply	src/utils/htslib/hts.c	/^int hts_opt_apply(htsFile *fp, hts_opt *opts) {$/;"	f
hts_opt_free	src/utils/htslib/hts.c	/^void hts_opt_free(hts_opt *opts) {$/;"	f
hts_pair64_t	src/utils/htslib/htslib/hts.h	/^} hts_pair64_t;$/;"	t	typeref:struct:__anon15
hts_parse_decimal	src/utils/htslib/hts.c	/^long long hts_parse_decimal(const char *str, char **strend, int flags)$/;"	f
hts_parse_format	src/utils/htslib/hts.c	/^int hts_parse_format(htsFormat *format, const char *str) {$/;"	f
hts_parse_opt_list	src/utils/htslib/hts.c	/^int hts_parse_opt_list(htsFormat *fmt, const char *str) {$/;"	f
hts_parse_reg	src/utils/htslib/hts.c	/^const char *hts_parse_reg(const char *s, int *beg, int *end)$/;"	f
hts_path_itr	src/utils/htslib/hts_internal.h	/^struct hts_path_itr {$/;"	s
hts_path_itr_next	src/utils/htslib/plugin.c	/^const char *hts_path_itr_next(struct hts_path_itr *itr)$/;"	f
hts_path_itr_setup	src/utils/htslib/plugin.c	/^void hts_path_itr_setup(struct hts_path_itr *itr, const char *path,$/;"	f
hts_process_opts	src/utils/htslib/hts.c	/^static int hts_process_opts(htsFile *fp, const char *opts) {$/;"	f	file:
hts_readlines	src/utils/htslib/hts.c	/^char **hts_readlines(const char *fn, int *_n)$/;"	f
hts_readlist	src/utils/htslib/hts.c	/^char **hts_readlist(const char *string, int is_file, int *_n)$/;"	f
hts_readrec_func	src/utils/htslib/htslib/hts.h	/^typedef int hts_readrec_func(BGZF *fp, void *data, void *r, int *tid, int *beg, int *end);$/;"	t
hts_realloc_or_die	src/utils/htslib/hts.c	/^size_t hts_realloc_or_die(size_t n, size_t m, size_t m_sz, size_t size,$/;"	f
hts_reg2bin	src/utils/htslib/htslib/hts.h	/^static inline int hts_reg2bin(int64_t beg, int64_t end, int min_shift, int n_lvls)$/;"	f
hts_set_cache_size	src/utils/htslib/hts.c	/^void hts_set_cache_size(htsFile *fp, int n)$/;"	f
hts_set_fai_filename	src/utils/htslib/hts.c	/^int hts_set_fai_filename(htsFile *fp, const char *fn_aux)$/;"	f
hts_set_log_level	src/utils/htslib/hts.c	/^void hts_set_log_level(enum htsLogLevel level)$/;"	f
hts_set_opt	src/utils/htslib/hts.c	/^int hts_set_opt(htsFile *fp, enum hts_fmt_option opt, ...) {$/;"	f
hts_set_thread_pool	src/utils/htslib/hts.c	/^int hts_set_thread_pool(htsFile *fp, htsThreadPool *p) {$/;"	f
hts_set_threads	src/utils/htslib/hts.c	/^int hts_set_threads(htsFile *fp, int n)$/;"	f
hts_srand48	src/utils/htslib/hts_os.c	/^void hts_srand48(long seed) { return srand48(seed); }$/;"	f
hts_srand48	src/utils/htslib/win/rand.c	/^hts_srand48(long seed)$/;"	f
hts_tpool	src/utils/htslib/htslib/thread_pool.h	/^typedef struct hts_tpool hts_tpool;$/;"	t	typeref:struct:hts_tpool
hts_tpool	src/utils/htslib/thread_pool_internal.h	/^struct hts_tpool {$/;"	s
hts_tpool_add_result	src/utils/htslib/thread_pool.c	/^static int hts_tpool_add_result(hts_tpool_job *j, void *data) {$/;"	f	file:
hts_tpool_delete_result	src/utils/htslib/thread_pool.c	/^void hts_tpool_delete_result(hts_tpool_result *r, int free_data) {$/;"	f
hts_tpool_destroy	src/utils/htslib/thread_pool.c	/^void hts_tpool_destroy(hts_tpool *p) {$/;"	f
hts_tpool_dispatch	src/utils/htslib/thread_pool.c	/^int hts_tpool_dispatch(hts_tpool *p, hts_tpool_process *q,$/;"	f
hts_tpool_dispatch2	src/utils/htslib/thread_pool.c	/^int hts_tpool_dispatch2(hts_tpool *p, hts_tpool_process *q,$/;"	f
hts_tpool_init	src/utils/htslib/thread_pool.c	/^hts_tpool *hts_tpool_init(int n) {$/;"	f
hts_tpool_job	src/utils/htslib/thread_pool_internal.h	/^typedef struct hts_tpool_job {$/;"	s
hts_tpool_job	src/utils/htslib/thread_pool_internal.h	/^} hts_tpool_job;$/;"	t	typeref:struct:hts_tpool_job
hts_tpool_kill	src/utils/htslib/thread_pool.c	/^void hts_tpool_kill(hts_tpool *p) {$/;"	f
hts_tpool_next_result	src/utils/htslib/thread_pool.c	/^hts_tpool_result *hts_tpool_next_result(hts_tpool_process *q) {$/;"	f
hts_tpool_next_result_locked	src/utils/htslib/thread_pool.c	/^static hts_tpool_result *hts_tpool_next_result_locked(hts_tpool_process *q) {$/;"	f	file:
hts_tpool_next_result_wait	src/utils/htslib/thread_pool.c	/^hts_tpool_result *hts_tpool_next_result_wait(hts_tpool_process *q) {$/;"	f
hts_tpool_process	src/utils/htslib/htslib/thread_pool.h	/^typedef struct hts_tpool_process hts_tpool_process;$/;"	t	typeref:struct:hts_tpool_process
hts_tpool_process	src/utils/htslib/thread_pool_internal.h	/^struct hts_tpool_process {$/;"	s
hts_tpool_process_attach	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_attach(hts_tpool *p, hts_tpool_process *q) {$/;"	f
hts_tpool_process_destroy	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_destroy(hts_tpool_process *q) {$/;"	f
hts_tpool_process_detach	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_detach(hts_tpool *p, hts_tpool_process *q) {$/;"	f
hts_tpool_process_empty	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_empty(hts_tpool_process *q) {$/;"	f
hts_tpool_process_flush	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_flush(hts_tpool_process *q) {$/;"	f
hts_tpool_process_init	src/utils/htslib/thread_pool.c	/^hts_tpool_process *hts_tpool_process_init(hts_tpool *p, int qsize, int in_only) {$/;"	f
hts_tpool_process_len	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_len(hts_tpool_process *q) {$/;"	f
hts_tpool_process_qsize	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_qsize(hts_tpool_process *q) {$/;"	f
hts_tpool_process_ref_decr	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_ref_decr(hts_tpool_process *q) {$/;"	f
hts_tpool_process_ref_incr	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_ref_incr(hts_tpool_process *q) {$/;"	f
hts_tpool_process_reset	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_reset(hts_tpool_process *q, int free_results) {$/;"	f
hts_tpool_process_shutdown	src/utils/htslib/thread_pool.c	/^void hts_tpool_process_shutdown(hts_tpool_process *q) {$/;"	f
hts_tpool_process_sz	src/utils/htslib/thread_pool.c	/^int hts_tpool_process_sz(hts_tpool_process *q) {$/;"	f
hts_tpool_result	src/utils/htslib/htslib/thread_pool.h	/^typedef struct hts_tpool_result hts_tpool_result;$/;"	t	typeref:struct:hts_tpool_result
hts_tpool_result	src/utils/htslib/thread_pool_internal.h	/^struct hts_tpool_result {$/;"	s
hts_tpool_result_data	src/utils/htslib/thread_pool.c	/^void *hts_tpool_result_data(hts_tpool_result *r) {$/;"	f
hts_tpool_size	src/utils/htslib/thread_pool.c	/^int hts_tpool_size(hts_tpool *p) {$/;"	f
hts_tpool_wake_dispatch	src/utils/htslib/thread_pool.c	/^void hts_tpool_wake_dispatch(hts_tpool_process *q) {$/;"	f
hts_tpool_worker	src/utils/htslib/thread_pool_internal.h	/^} hts_tpool_worker;$/;"	t	typeref:struct:__anon8
hts_useek	src/utils/htslib/hts.c	/^int hts_useek(htsFile *fp, long uoffset, int where)$/;"	f
hts_utell	src/utils/htslib/hts.c	/^long hts_utell(htsFile *fp)$/;"	f
hts_verbose	src/utils/htslib/hts.c	/^int hts_verbose = HTS_LOG_WARNING;$/;"	v
hts_version	src/utils/htslib/hts.c	/^const char *hts_version()$/;"	f
htsget	src/utils/htslib/htslib/hts.h	/^    htsget,$/;"	e	enum:htsExactFormat
htslib_bgzf_h	src/utils/htslib/htslib_vars.mk	/^htslib_bgzf_h = $(HTSPREFIX)htslib\/bgzf.h $(htslib_hts_defs_h)$/;"	m
htslib_cram_h	src/utils/htslib/htslib_vars.mk	/^htslib_cram_h = $(HTSPREFIX)htslib\/cram.h $(htslib_hts_h)$/;"	m
htslib_default_libs	src/utils/htslib/Makefile	/^htslib_default_libs = -lz -lm -lbz2 -llzma$/;"	m
htslib_faidx_h	src/utils/htslib/htslib_vars.mk	/^htslib_faidx_h = $(HTSPREFIX)htslib\/faidx.h $(htslib_hts_defs_h)$/;"	m
htslib_hfile_h	src/utils/htslib/htslib_vars.mk	/^htslib_hfile_h = $(HTSPREFIX)htslib\/hfile.h $(htslib_hts_defs_h)$/;"	m
htslib_hts_defs_h	src/utils/htslib/htslib_vars.mk	/^htslib_hts_defs_h = $(HTSPREFIX)htslib\/hts_defs.h$/;"	m
htslib_hts_endian_h	src/utils/htslib/htslib_vars.mk	/^htslib_hts_endian_h = $(HTSPREFIX)htslib\/hts_endian.h$/;"	m
htslib_hts_h	src/utils/htslib/htslib_vars.mk	/^htslib_hts_h = $(HTSPREFIX)htslib\/hts.h $(htslib_hts_defs_h) $(htslib_hts_log_h)$/;"	m
htslib_hts_log_h	src/utils/htslib/htslib_vars.mk	/^htslib_hts_log_h = $(HTSPREFIX)htslib\/hts_log.h$/;"	m
htslib_kbitset_h	src/utils/htslib/htslib_vars.mk	/^htslib_kbitset_h = $(HTSPREFIX)htslib\/kbitset.h$/;"	m
htslib_kfunc_h	src/utils/htslib/htslib_vars.mk	/^htslib_kfunc_h = $(HTSPREFIX)htslib\/kfunc.h$/;"	m
htslib_khash_h	src/utils/htslib/htslib_vars.mk	/^htslib_khash_h = $(HTSPREFIX)htslib\/khash.h$/;"	m
htslib_khash_str2int_h	src/utils/htslib/htslib_vars.mk	/^htslib_khash_str2int_h = $(HTSPREFIX)htslib\/khash_str2int.h $(htslib_khash_h)$/;"	m
htslib_klist_h	src/utils/htslib/htslib_vars.mk	/^htslib_klist_h = $(HTSPREFIX)htslib\/klist.h$/;"	m
htslib_knetfile_h	src/utils/htslib/htslib_vars.mk	/^htslib_knetfile_h = $(HTSPREFIX)htslib\/knetfile.h$/;"	m
htslib_kseq_h	src/utils/htslib/htslib_vars.mk	/^htslib_kseq_h = $(HTSPREFIX)htslib\/kseq.h$/;"	m
htslib_ksort_h	src/utils/htslib/htslib_vars.mk	/^htslib_ksort_h = $(HTSPREFIX)htslib\/ksort.h$/;"	m
htslib_kstring_h	src/utils/htslib/htslib_vars.mk	/^htslib_kstring_h = $(HTSPREFIX)htslib\/kstring.h$/;"	m
htslib_regidx_h	src/utils/htslib/htslib_vars.mk	/^htslib_regidx_h = $(HTSPREFIX)htslib\/regidx.h$/;"	m
htslib_sam_h	src/utils/htslib/htslib_vars.mk	/^htslib_sam_h = $(HTSPREFIX)htslib\/sam.h $(htslib_hts_h)$/;"	m
htslib_synced_bcf_reader_h	src/utils/htslib/htslib_vars.mk	/^htslib_synced_bcf_reader_h = $(HTSPREFIX)htslib\/synced_bcf_reader.h $(htslib_hts_h) $(htslib_vcf_h) $(htslib_tbx_h)$/;"	m
htslib_tbx_h	src/utils/htslib/htslib_vars.mk	/^htslib_tbx_h = $(HTSPREFIX)htslib\/tbx.h $(htslib_hts_h)$/;"	m
htslib_thread_pool_h	src/utils/htslib/htslib_vars.mk	/^htslib_thread_pool_h = $(HTSPREFIX)htslib\/thread_pool.h$/;"	m
htslib_vcf_h	src/utils/htslib/htslib_vars.mk	/^htslib_vcf_h = $(HTSPREFIX)htslib\/vcf.h $(htslib_hts_h) $(htslib_kstring_h) $(htslib_hts_defs_h) $(htslib_hts_endian_h)$/;"	m
htslib_vcf_sweep_h	src/utils/htslib/htslib_vars.mk	/^htslib_vcf_sweep_h = $(HTSPREFIX)htslib\/vcf_sweep.h $(htslib_hts_h) $(htslib_vcf_h)$/;"	m
htslib_vcfutils_h	src/utils/htslib/htslib_vars.mk	/^htslib_vcfutils_h = $(HTSPREFIX)htslib\/vcfutils.h $(htslib_vcf_h)$/;"	m
http_headers	src/utils/htslib/hfile_libcurl.c	/^} http_headers;$/;"	t	typeref:struct:__anon101	file:
http_host	src/utils/htslib/htslib/knetfile.h	/^	char *path, *http_host;$/;"	m	struct:knetFile_s
http_status_errno	src/utils/htslib/hfile_libcurl.c	/^static int http_status_errno(int status)$/;"	f	file:
huffman	src/utils/htslib/cram/cram_codecs.h	/^	cram_huffman_decoder         huffman;$/;"	m	union:cram_codec::__anon80
hwrite	src/utils/htslib/htslib/hfile.h	/^hwrite(hFILE *fp, const void *buffer, size_t nbytes)$/;"	f
hwrite2	src/utils/htslib/hfile.c	/^ssize_t hwrite2(hFILE *fp, const void *srcv, size_t totalbytes, size_t ncopied)$/;"	f
hwrite_uint64	src/utils/htslib/bgzf.c	/^static inline int hwrite_uint64(uint64_t x, hFILE *f)$/;"	f	file:
hypergeo	src/fisher/kfunc.cpp	/^ double hypergeo(long long n11, long long n1_, long long n_1, long long n)$/;"	f
hypergeo	src/utils/htslib/kfunc.c	/^static double hypergeo(int n11, int n1_, int n_1, int n)$/;"	f	file:
hypergeo_acc	src/fisher/kfunc.cpp	/^ double hypergeo_acc(long long n11, long long n1_, long long n_1, long long n, hgacc_t *aux)$/;"	f
hypergeo_acc	src/utils/htslib/kfunc.c	/^static double hypergeo_acc(int n11, int n1_, int n_1, int n, hgacc_t *aux)$/;"	f	file:
i	src/utils/htslib/cram/cram_structs.h	/^	} i;$/;"	m	union:cram_feature::__anon83	typeref:struct:cram_feature::__anon83::__anon90
i	src/utils/htslib/cram/cram_structs.h	/^    int i;$/;"	m	union:__anon81
i	src/utils/htslib/htslib/hts.h	/^        int i;$/;"	m	union:hts_opt::__anon14
i	src/utils/htslib/htslib/hts.h	/^    int tid, beg, end, n_off, i;$/;"	m	struct:__anon16
i	src/utils/htslib/htslib/kbitset.h	/^	int i;$/;"	m	struct:kbitset_iter_t
i	src/utils/htslib/htslib/regidx.h	/^    int i, n;$/;"	m	struct:__anon29
i	src/utils/htslib/htslib/sam.h	/^    int64_t i;$/;"	m	union:__anon41
i	src/utils/htslib/htslib/vcf.h	/^        int32_t i; \/\/ integer value$/;"	m	union:__anon24::__anon25
i16	src/utils/htslib/test/hts_endian.c	/^    int16_t  i16;$/;"	m	struct:__anon45	file:
i16_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void i16_to_le(int16_t val, uint8_t *buf) {$/;"	f
i32	src/utils/htslib/test/hts_endian.c	/^    int32_t  i32;$/;"	m	struct:__anon46	file:
i32_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void i32_to_le(int32_t val, uint8_t *buf) {$/;"	f
i64	src/utils/htslib/test/hts_endian.c	/^    int64_t  i64;$/;"	m	struct:__anon47	file:
i64_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void i64_to_le(int64_t val, uint8_t *buf) {$/;"	f
id	src/utils/htslib/cram/sam_header.h	/^    int id;           \/\/ numerical ID$/;"	m	struct:__anon65
id	src/utils/htslib/cram/sam_header.h	/^    int id;           \/\/ numerical ID$/;"	m	struct:__anon66
id	src/utils/htslib/hfile_s3.c	/^    kstring_t id;$/;"	m	struct:__anon55	file:
id	src/utils/htslib/htslib/sam.h	/^    uint64_t id;$/;"	m	struct:__anon40
id	src/utils/htslib/htslib/vcf.h	/^    bcf_idpair_t *id[3];$/;"	m	struct:__anon21
id	src/utils/htslib/htslib/vcf.h	/^    char *id, *als;     \/\/ ID and REF+ALT block (\\0-seperated)$/;"	m	struct:__anon26
id	src/utils/htslib/htslib/vcf.h	/^    int id;             \/\/ id: numeric tag id, the corresponding string is bcf_hdr_t::id[BCF_DT_ID][$id].key$/;"	m	struct:__anon23
id	src/utils/htslib/htslib/vcf.h	/^    int id;$/;"	m	struct:__anon19
id	src/utils/htslib/sam.c	/^    uint64_t id;$/;"	m	struct:__bam_plp_t	file:
identify	src/utils/htslib/htsfile.c	/^enum { identify, view_headers, view_all } mode = identify;$/;"	e	enum:__anon98	file:
idx	src/utils/BamTools/include/BamReader.hpp	/^			uint32_t idx;$/;"	m	struct:BamTools::BamReader::_SamFile
idx	src/utils/htslib/cram/cram_structs.h	/^    int32_t  idx; \/* offset into data *\/$/;"	m	struct:cram_block
idx	src/utils/htslib/htslib/bgzf.h	/^    bgzidx_t *idx;      \/\/ BGZF index$/;"	m	struct:BGZF
idx	src/utils/htslib/htslib/tbx.h	/^    hts_idx_t *idx;$/;"	m	struct:__anon37
idx	src/utils/htslib/regidx.c	/^    int *idx, nidx;$/;"	m	struct:__anon43	file:
idx	src/utils/htslib/thread_pool_internal.h	/^    int idx;$/;"	m	struct:__anon8
idx	src/utils/htslib/vcf_sweep.c	/^    uint64_t *idx;          \/\/ uncompressed offsets of VCF\/BCF records$/;"	m	struct:_bcf_sweep_t	file:
idx_build_otf	src/utils/htslib/htslib/bgzf.h	/^    int idx_build_otf;  \/\/ build index on the fly, set by bgzf_index_build_init()$/;"	m	struct:BGZF
idx_done	src/utils/htslib/vcf_sweep.c	/^    int idx_done;           \/\/ the index is built during the first pass$/;"	m	struct:_bcf_sweep_t	file:
idx_format_name	src/utils/htslib/hts.c	/^static char * idx_format_name(int fmt) {$/;"	f	file:
idx_load_failed	src/utils/htslib/htslib/synced_bcf_reader.h	/^    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,$/;"	e	enum:__anon32
idx_suffix	src/utils/htslib/test/test_bgzf.c	/^const char *idx_suffix  = ".gzi";$/;"	v
idx_write_int32	src/utils/htslib/hts.c	/^static inline ssize_t HTS_RESULT_USED idx_write_int32(BGZF *fp, int32_t x)$/;"	f	file:
idx_write_uint32	src/utils/htslib/hts.c	/^static inline ssize_t HTS_RESULT_USED idx_write_uint32(BGZF *fp, uint32_t x)$/;"	f	file:
idx_write_uint64	src/utils/htslib/hts.c	/^static inline ssize_t HTS_RESULT_USED idx_write_uint64(BGZF *fp, uint64_t x)$/;"	f	file:
ignoreCase	src/utils/Contexts/ContextGroupBy.h	/^	bool ignoreCase() const { return _ignoreCase; }$/;"	f	class:ContextGroupBy
ignoreDownstream	src/utils/Contexts/ContextClosest.h	/^    bool ignoreDownstream() const { return _ignoreDownstream; }$/;"	f	class:ContextClosest
ignoreOverlaps	src/utils/Contexts/ContextClosest.h	/^    bool ignoreOverlaps() const { return _ignoreOverlaps; }$/;"	f	class:ContextClosest
ignoreUpstream	src/utils/Contexts/ContextClosest.h	/^    bool ignoreUpstream() const { return _ignoreUpstream; }$/;"	f	class:ContextClosest
ignore_md5	src/utils/htslib/cram/cram_structs.h	/^    int ignore_md5;$/;"	m	struct:cram_fd
ignore_sam_err	src/utils/htslib/htslib/sam.h	/^    int32_t n_targets, ignore_sam_err;$/;"	m	struct:__anon38
igzstream	src/utils/gzstream/gzstream.h	/^    igzstream( const char* name, int open_mode = std::ios::in)$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
igzstream	src/utils/gzstream/gzstream.h	/^    igzstream() : std::istream( &buf) {}$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
igzstream	src/utils/gzstream/gzstream.h	/^class igzstream : public gzstreambase, public std::istream {$/;"	c	namespace:GZSTREAM_NAMESPACE
iidx	src/utils/htslib/vcf_sweep.c	/^    int iidx, nidx, midx;   \/\/ i: current offset; n: used; m: allocated$/;"	m	struct:_bcf_sweep_t	file:
in	src/utils/general/InflateStreamBuf.h	/^	std::istream* in;$/;"	m	class:InflateStreamBuf
in_only	src/utils/htslib/thread_pool_internal.h	/^    int in_only;                     \/\/ if true, don't queue result up.$/;"	m	struct:hts_tpool_process
includedir	src/utils/htslib/Makefile	/^includedir  = $(prefix)\/include$/;"	m
indel	src/utils/htslib/htslib/sam.h	/^    int indel, level;$/;"	m	struct:__anon42
index	src/utils/Fasta/Fasta.h	/^        FastaIndex* index;$/;"	m	class:FastaReference
index	src/utils/htslib/cram/cram_structs.h	/^    cram_index *index;                  \/\/ array, sizeof index_sz$/;"	m	struct:cram_fd
indexFile	src/utils/Fasta/Fasta.h	/^        ifstream indexFile;$/;"	m	class:FastaIndex
indexFileExtension	src/utils/Fasta/Fasta.cpp	/^string FastaIndex::indexFileExtension() { return ".fai"; }$/;"	f	class:FastaIndex
indexReference	src/utils/Fasta/Fasta.cpp	/^void FastaIndex::indexReference(string refname) {$/;"	f	class:FastaIndex
indexType	src/utils/NewChromsweep/CloseSweep.h	/^	typedef pair<int, int> indexType;$/;"	t	class:RecDistList
index_file	src/utils/htslib/htslib/hts.h	/^    index_file,       \/\/ Index file associated with some data file$/;"	e	enum:htsFormatCategory
index_sz	src/utils/htslib/cram/cram_structs.h	/^    int         index_sz;$/;"	m	struct:cram_fd
indiv	src/utils/htslib/htslib/vcf.h	/^    kstring_t shared, indiv;$/;"	m	struct:__anon27
indiv_dirty	src/utils/htslib/htslib/vcf.h	/^    int indiv_dirty;    \/\/ if set, indiv.s must be recreated on BCF output$/;"	m	struct:__anon26
inflateGzippedArray	src/utils/general/CompressionTools.cpp	/^unsigned long inflateGzippedArray(const BTlist<int> &inList, unsigned char* outbuf, size_t outbufSize, size_t inbufSize)$/;"	f
inflate_block	src/utils/htslib/bgzf.c	/^static int inflate_block(BGZF* fp, int block_length)$/;"	f	file:
inflate_gzip_block	src/utils/htslib/bgzf.c	/^static int inflate_gzip_block(BGZF *fp, int cached)$/;"	f	file:
info	src/utils/htslib/htslib/vcf.h	/^    bcf_info_t *info;   \/\/ INFO$/;"	m	struct:__anon26
info	src/utils/htslib/htslib/vcf.h	/^    uint32_t info[3];  \/\/ stores Number:20, var:4, Type:4, ColType:4 in info[0..2]$/;"	m	struct:__anon19
init	src/complementFile/complementFile.cpp	/^bool ComplementFile::init()$/;"	f	class:ComplementFile
init	src/fisher/fisher.cpp	/^bool Fisher::init(void)$/;"	f	class:Fisher
init	src/groupBy/groupBy.cpp	/^bool GroupBy::init()$/;"	f	class:GroupBy
init	src/intersectFile/intersectFile.cpp	/^bool IntersectFile::init() {$/;"	f	class:IntersectFile
init	src/mergeFile/mergeFile.cpp	/^bool MergeFile::init()$/;"	f	class:MergeFile
init	src/regressTest/RegressTest.cpp	/^bool RegressTest::init(int argc, char **argv)$/;"	f	class:RegressTest
init	src/sampleFile/sampleFile.cpp	/^ bool SampleFile::init()$/;"	f	class:SampleFile
init	src/spacingFile/spacingFile.cpp	/^bool SpacingFile::init()$/;"	f	class:SpacingFile
init	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^bool BufferedStreamMgr::init()$/;"	f	class:BufferedStreamMgr
init	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^bool InputStreamMgr::init()$/;"	f	class:InputStreamMgr
init	src/utils/NewChromsweep/CloseSweep.cpp	/^bool CloseSweep::init() {$/;"	f	class:CloseSweep
init	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::init() {$/;"	f	class:NewChromSweep
init	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::init(ContextBase *context) {$/;"	f	class:RecordOutputMgr
initFromFile	src/utils/FileRecordTools/Records/BamRecord.cpp	/^bool BamRecord::initFromFile(BamFileReader *bamFileReader)$/;"	f	class:BamRecord
initFromFile	src/utils/FileRecordTools/Records/BamRecord.cpp	/^bool BamRecord::initFromFile(FileReader *fileReader)$/;"	f	class:BamRecord
initFromFile	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^bool Bed12Interval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:Bed12Interval
initFromFile	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^bool Bed3Interval::initFromFile(FileReader *fileReader)$/;"	f	class:Bed3Interval
initFromFile	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^bool Bed3Interval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:Bed3Interval
initFromFile	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^bool Bed4Interval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:Bed4Interval
initFromFile	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^bool Bed5Interval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:Bed5Interval
initFromFile	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^bool Bed6Interval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:Bed6Interval
initFromFile	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^bool BedGraphInterval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:BedGraphInterval
initFromFile	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^bool BedPlusInterval::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:BedPlusInterval
initFromFile	src/utils/FileRecordTools/Records/EmptyRecord.cpp	/^bool EmptyRecord::initFromFile(FileReader *fileReader)$/;"	f	class:EmptyRecord
initFromFile	src/utils/FileRecordTools/Records/EmptyRecord.cpp	/^bool EmptyRecord::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:EmptyRecord
initFromFile	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^bool GffPlusRecord::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:GffPlusRecord
initFromFile	src/utils/FileRecordTools/Records/GffRecord.cpp	/^bool GffRecord::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:GffRecord
initFromFile	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^bool NoPosPlusRecord::initFromFile(FileReader *fileReader)$/;"	f	class:NoPosPlusRecord
initFromFile	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^bool NoPosPlusRecord::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:NoPosPlusRecord
initFromFile	src/utils/FileRecordTools/Records/PlusFields.cpp	/^bool PlusFields::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:PlusFields
initFromFile	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^bool VcfRecord::initFromFile(SingleLineDelimTextFileReader *fileReader)$/;"	f	class:VcfRecord
initFromInput	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.cpp	/^bool SingleLineDelimTransferBuffer::initFromInput(const char *inBuffer)$/;"	f	class:SingleLineDelimTransferBuffer
init_add_plugin	src/utils/htslib/hfile.c	/^static int init_add_plugin(void *obj, int (*init)(struct hFILE_plugin *),$/;"	f	file:
init_filters	src/utils/htslib/synced_bcf_reader.c	/^static int *init_filters(bcf_hdr_t *hdr, const char *filters, int *nfilters)$/;"	f	file:
init_mstdin	src/utils/htslib/cram/mFILE.c	/^static void init_mstdin(void) {$/;"	f	file:
input_empty_c	src/utils/htslib/thread_pool_internal.h	/^    pthread_cond_t input_empty_c;    \/\/ Input queue has become empty$/;"	m	struct:hts_tpool_process
input_files	src/multiIntersectBed/multiIntersectBed.h	/^    vector<BedFile*>   input_files;$/;"	m	class:MultiIntersectBed
input_head	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_job    *input_head;    \/\/ input list$/;"	m	struct:hts_tpool_process
input_not_full_c	src/utils/htslib/thread_pool_internal.h	/^    pthread_cond_t input_not_full_c; \/\/ Input queue is no longer full$/;"	m	struct:hts_tpool_process
input_tail	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_job    *input_tail;$/;"	m	struct:hts_tpool_process
insert_to_b	src/utils/htslib/hts.c	/^static inline int insert_to_b(bidx_t *b, int bin, uint64_t beg, uint64_t end)$/;"	f	file:
insert_to_l	src/utils/htslib/hts.c	/^static inline int insert_to_l(lidx_t *l, int64_t _beg, int64_t _end, uint64_t offset, int min_shift)$/;"	f	file:
int2str	src/utils/general/ParseTools.h	/^void int2str(int number, T& buffer, bool appendToBuf = false)$/;"	f
int32_decode	src/utils/htslib/cram/cram_io.c	/^int int32_decode(cram_fd *fd, int32_t *val) {$/;"	f
int32_encode	src/utils/htslib/cram/cram_io.c	/^int int32_encode(cram_fd *fd, int32_t val) {$/;"	f
int32_get_blk	src/utils/htslib/cram/cram_io.c	/^int int32_get_blk(cram_block *b, int32_t *val) {$/;"	f
int32_put_blk	src/utils/htslib/cram/cram_io.c	/^int int32_put_blk(cram_block *b, int32_t val) {$/;"	f
int64tostr	src/utils/htslib/knetfile.c	/^char *int64tostr(char *buf, int64_t x)$/;"	f
intersect_help	src/intersectFile/intersectHelp.cpp	/^void intersect_help(void) {$/;"	f
intersects	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::intersects(const Record *record,$/;"	f	class:Record
intersects	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::intersects(const Record *rec1, const Record *rec2) const$/;"	f	class:NewChromSweep
intersphinx_mapping	docs/conf.py	/^intersphinx_mapping = {'bedtools': ('http:\/\/bedtools.readthedocs.org\/en\/latest\/', None)}$/;"	v
io_task	src/utils/htslib/bgzf.c	/^    pthread_t io_task;$/;"	m	struct:bgzf_mtaux_t	file:
ip	src/utils/BamTools/include/BamReader.hpp	/^			hts_idx_t* ip;$/;"	m	struct:BamTools::BamReader::_SamFile
isBAM	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isBAM(const char *buffer)$/;"	f	class:FileRecordTypeChecker
isBGzipped	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool isBGzipped() const { return _isBgzipped; }$/;"	f	class:InputStreamMgr
isBam	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool isBam() const { return _isBam; }$/;"	f	class:InputStreamMgr
isBam	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBam() const { return _isBAM; }$/;"	f	class:FileRecordTypeChecker
isBed	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed() const { return _isBed; }$/;"	f	class:FileRecordTypeChecker
isBed12	src/utils/bedFile/bedFile.h	/^    bool isBed12;          \/\/ is it file of true blocked BED12 records?$/;"	m	class:BedFile
isBed12	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed12() const { return (_isBed && _numFields == 12); }$/;"	f	class:FileRecordTypeChecker
isBed3	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed3() const { return (_isBed && _numFields == 3); }$/;"	f	class:FileRecordTypeChecker
isBed4	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed4() const { return (_isBed && _numFields == 4 && !_fourthFieldNumeric); }$/;"	f	class:FileRecordTypeChecker
isBed5	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed5() const { return (_isBed && _numFields == 3); }$/;"	f	class:FileRecordTypeChecker
isBed6	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBed6() const { return (_isBed && _numFields == 6); }$/;"	f	class:FileRecordTypeChecker
isBedFormat	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isBedFormat() {$/;"	f	class:FileRecordTypeChecker
isBedGraph	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBedGraph() const { return (_isBed && _numFields == 4 && _fourthFieldNumeric); }$/;"	f	class:FileRecordTypeChecker
isBedPlus	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBedPlus() const { return (_isBed && _numFields > 6 && _numFields != 12); }$/;"	f	class:FileRecordTypeChecker
isBinary	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isBinary() const { return _isBinary; }$/;"	f	class:FileRecordTypeChecker
isBinaryBuffer	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isBinaryBuffer(const char *buffer, size_t len)$/;"	f	class:FileRecordTypeChecker
isCompressed	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool isCompressed() const { return _isGzipped || _isBgzipped || _isBam; }$/;"	f	class:InputStreamMgr
isDelimited	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isDelimited() const { return _isDelimited; }$/;"	f	class:FileRecordTypeChecker
isGFF	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isGFF() const { return _isGFF; }$/;"	f	class:FileRecordTypeChecker
isGFFformat	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isGFFformat()$/;"	f	class:FileRecordTypeChecker
isGzipFile	src/utils/fileType/fileType.cpp	/^bool isGzipFile(istream *file) {$/;"	f
isGzipped	src/utils/FileRecordTools/FileReaders/InputStreamMgr.h	/^	bool isGzipped() const { return _isGzipped; }$/;"	f	class:InputStreamMgr
isGzipped	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isGzipped() const { return _isGzipped; }$/;"	f	class:FileRecordTypeChecker
isHeaderLine	src/utils/general/ParseTools.cpp	/^bool isHeaderLine(const string &line) {$/;"	f
isInteger	src/utils/bedFile/bedFile.h	/^inline bool isInteger(const std::string& s) {$/;"	f
isInteger	src/utils/general/ParseTools.cpp	/^bool isInteger(const string &str) {$/;"	f
isInteger	src/utils/stringUtilities/stringUtilities.h	/^inline bool isInteger(const std::string& s) {$/;"	f
isLeftBoundSpecified	src/utils/BamTools/include/api/BamAux.h	/^		bool isLeftBoundSpecified() const$/;"	f	struct:BamTools::BamRegion
isMateUnmapped	src/utils/FileRecordTools/Records/Record.h	/^	bool isMateUnmapped() const { return _isMateUnmapped; }$/;"	f	class:Record
isNull	src/utils/BamTools/include/api/BamAux.h	/^		bool isNull() const$/;"	f	struct:BamTools::BamRegion
isNumeric	src/utils/general/ParseTools.cpp	/^bool isNumeric(const string &str) {$/;"	f
isNumericField	src/utils/FileRecordTools/Records/BamRecord.cpp	/^bool BamRecord::isNumericField(int fieldNum) {$/;"	f	class:BamRecord
isNumericField	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^bool Bed12Interval::isNumericField(int fieldNum) {$/;"	f	class:Bed12Interval
isNumericField	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^bool Bed3Interval::isNumericField(int fieldNum) {$/;"	f	class:Bed3Interval
isNumericField	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^bool Bed4Interval::isNumericField(int fieldNum) {$/;"	f	class:Bed4Interval
isNumericField	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^bool Bed5Interval::isNumericField(int fieldNum) {$/;"	f	class:Bed5Interval
isNumericField	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^bool Bed6Interval::isNumericField(int fieldNum) {$/;"	f	class:Bed6Interval
isNumericField	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^bool BedGraphInterval::isNumericField(int fieldNum) {$/;"	f	class:BedGraphInterval
isNumericField	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^bool BedPlusInterval::isNumericField(int fieldNum) {$/;"	f	class:BedPlusInterval
isNumericField	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^bool GffPlusRecord::isNumericField(int fieldNum) {$/;"	f	class:GffPlusRecord
isNumericField	src/utils/FileRecordTools/Records/GffRecord.cpp	/^bool GffRecord::isNumericField(int fieldNum) {$/;"	f	class:GffRecord
isNumericField	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^bool NoPosPlusRecord::isNumericField(int fieldNum) {$/;"	f	class:NoPosPlusRecord
isNumericField	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^bool VcfRecord::isNumericField(int fieldNum) {$/;"	f	class:VcfRecord
isNumericOp	src/utils/KeyListOps/KeyListOps.cpp	/^bool KeyListOps::isNumericOp(OP_TYPES op) const {$/;"	f	class:KeyListOps
isNumericOp	src/utils/KeyListOps/KeyListOps.cpp	/^bool KeyListOps::isNumericOp(const string &op) const {$/;"	f	class:KeyListOps
isOpen	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^bool BamFileReader::isOpen() const$/;"	f	class:BamFileReader
isOpen	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	virtual bool isOpen() const { return _isFileOpen; }$/;"	f	class:FileReader
isRegularFile	src/utils/fileType/fileType.cpp	/^bool isRegularFile(const string& filename) {$/;"	f
isRightBoundSpecified	src/utils/BamTools/include/api/BamAux.h	/^		bool isRightBoundSpecified() const$/;"	f	struct:BamTools::BamRegion
isStrandField	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isStrandField(int field) {$/;"	f	class:FileRecordTypeChecker
isText	src/utils/fileType/FileRecordTypeChecker.h	/^	bool isText() const { return _isText; }$/;"	f	class:FileRecordTypeChecker
isTextDelimtedFormat	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isTextDelimtedFormat(const char *buffer, size_t len)$/;"	f	class:FileRecordTypeChecker
isUnmapped	src/utils/FileRecordTools/Records/Record.h	/^	bool isUnmapped() const { return _isUnmapped; }$/;"	f	class:Record
isUsed	src/utils/Contexts/ContextBase.h	/^	bool isUsed(int i) const { return _argsProcessed[i]; }$/;"	f	class:ContextBase
isVCFformat	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::isVCFformat(const char *buffer)$/;"	f	class:FileRecordTypeChecker
isValid	src/utils/FileRecordTools/Records/Record.h	/^	virtual bool isValid() const { return _isValidHit; }$/;"	f	class:Record
isValidColumnOps	src/utils/KeyListOps/KeyListOps.cpp	/^bool KeyListOps::isValidColumnOps(FileRecordMgr *dbFile) {$/;"	f	class:KeyListOps
isValidState	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::isValidState()$/;"	f	class:ContextBase
isValidState	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::isValidState(){$/;"	f	class:ContextClosest
isValidState	src/utils/Contexts/ContextComplement.cpp	/^bool ContextComplement::isValidState()$/;"	f	class:ContextComplement
isValidState	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::isValidState()$/;"	f	class:ContextCoverage
isValidState	src/utils/Contexts/ContextFisher.cpp	/^bool ContextFisher::isValidState()$/;"	f	class:ContextFisher
isValidState	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::isValidState()$/;"	f	class:ContextGroupBy
isValidState	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::isValidState()$/;"	f	class:ContextIntersect
isValidState	src/utils/Contexts/ContextJaccard.cpp	/^bool ContextJaccard::isValidState()$/;"	f	class:ContextJaccard
isValidState	src/utils/Contexts/ContextMap.cpp	/^bool ContextMap::isValidState()$/;"	f	class:ContextMap
isValidState	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::isValidState()$/;"	f	class:ContextMerge
isValidState	src/utils/Contexts/ContextSample.cpp	/^bool ContextSample::isValidState()$/;"	f	class:ContextSample
isValidState	src/utils/Contexts/ContextSubtract.cpp	/^bool ContextSubtract::isValidState()$/;"	f	class:ContextSubtract
isZeroBased	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	virtual bool isZeroBased() const {return false;};$/;"	f	class:GffPlusRecord
isZeroBased	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual bool isZeroBased() const {return false;};$/;"	f	class:GffRecord
isZeroBased	src/utils/FileRecordTools/Records/Record.h	/^	virtual bool isZeroBased() const {return true;};$/;"	f	class:Record
isZeroBased	src/utils/FileRecordTools/Records/VcfRecord.h	/^	virtual bool isZeroBased() const {return false;};$/;"	f	class:VcfRecord
isZeroBased	src/utils/bedFile/bedFile.h	/^    bool isZeroBased;$/;"	m	class:BedFile
isZeroLength	src/utils/FileRecordTools/Records/Record.h	/^	virtual bool isZeroLength() const { return _zeroLength; }$/;"	f	class:Record
is_be	src/utils/htslib/htslib/bgzf.h	/^    unsigned errcode:16, reserved:1, is_write:1, no_eof_block:1, is_be:1;$/;"	m	struct:BGZF
is_be	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
is_bgzf	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
is_bin	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
is_bin	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int is_bin;             \/\/ is open in binary mode (tabix access)$/;"	m	struct:_bcf_sr_regions_t
is_compressed	src/utils/htslib/htslib/bgzf.h	/^    unsigned last_block_eof:1, is_compressed:1, is_gzip:1;$/;"	m	struct:BGZF
is_cram	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
is_cram	src/utils/htslib/htslib/hts.h	/^    uint32_t read_rest:1, finished:1, is_cram:1, dummy:29;$/;"	m	struct:__anon16
is_del	src/utils/htslib/htslib/sam.h	/^    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:28;$/;"	m	struct:__anon42
is_directory	src/utils/htslib/cram/files.c	/^int is_directory(char * fn)$/;"	f
is_dns_compliant	src/utils/htslib/hfile_s3.c	/^static int is_dns_compliant(const char *s0, const char *slim)$/;"	f	file:
is_eof	src/utils/htslib/sam.c	/^    int is_eof, max_plp, error, maxcnt;$/;"	m	struct:__bam_plp_t	file:
is_escaped	src/utils/htslib/vcf.c	/^static inline int is_escaped(const char *min, const char *str)$/;"	f	file:
is_file	src/utils/htslib/cram/files.c	/^int is_file(char * fn)$/;"	f
is_file_newer	src/utils/htslib/test/test.pl	/^sub is_file_newer$/;"	s
is_gt	src/utils/htslib/vcf.c	/^    uint64_t is_gt:1, max_g:31, max_l:32;$/;"	m	struct:__anon52	file:
is_gzip	src/utils/htslib/htslib/bgzf.h	/^    unsigned last_block_eof:1, is_compressed:1, is_gzip:1;$/;"	m	struct:BGZF
is_head	src/utils/htslib/htslib/sam.h	/^    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:28;$/;"	m	struct:__anon42
is_md5	src/utils/htslib/cram/cram_structs.h	/^    int is_md5;            \/\/ Reference comes from a raw seq found by MD5$/;"	m	struct:ref_entry
is_open	src/utils/gzstream/gzstream.h	/^    int is_open() { return opened; }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
is_read	src/utils/htslib/hfile_libcurl.c	/^    unsigned is_read : 1;   \/\/ Opened in read mode$/;"	m	struct:__anon102	file:
is_ready	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
is_refskip	src/utils/htslib/htslib/sam.h	/^    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:28;$/;"	m	struct:__anon42
is_socket	src/utils/htslib/hfile.c	/^    unsigned is_socket:1;$/;"	m	struct:__anon109	file:
is_tail	src/utils/htslib/htslib/sam.h	/^    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:28;$/;"	m	struct:__anon42
is_write	src/utils/htslib/htslib/bgzf.h	/^    unsigned errcode:16, reserved:1, is_write:1, no_eof_block:1, is_be:1;$/;"	m	struct:BGZF
is_write	src/utils/htslib/htslib/hts.h	/^    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;$/;"	m	struct:__anon11
isalnum_c	src/utils/htslib/hts_internal.h	/^static inline int isalnum_c(char c) { return isalnum((unsigned char) c); }$/;"	f
isalpha_c	src/utils/htslib/hts_internal.h	/^static inline int isalpha_c(char c) { return isalpha((unsigned char) c); }$/;"	f
isdigit_c	src/utils/htslib/hts_internal.h	/^static inline int isdigit_c(char c) { return isdigit((unsigned char) c); }$/;"	f
iseq	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int iseq;               \/\/ current position: chr name, index to snames$/;"	m	struct:_bcf_sr_regions_t
isgraph_c	src/utils/htslib/hts_internal.h	/^static inline int isgraph_c(char c) { return isgraph((unsigned char) c); }$/;"	f
isize	src/utils/htslib/htslib/sam.h	/^    int32_t isize;$/;"	m	struct:__anon39
islower_c	src/utils/htslib/hts_internal.h	/^static inline int islower_c(char c) { return islower((unsigned char) c); }$/;"	f
isprint_c	src/utils/htslib/hts_internal.h	/^static inline int isprint_c(char c) { return isprint((unsigned char) c); }$/;"	f
isspace_c	src/utils/htslib/hts_internal.h	/^static inline int isspace_c(char c) { return isspace((unsigned char) c); }$/;"	f
isupper_c	src/utils/htslib/hts_internal.h	/^static inline int isupper_c(char c) { return isupper((unsigned char) c); }$/;"	f
iswap_int2	src/utils/htslib/cram/os.h	115;"	d
iswap_int4	src/utils/htslib/cram/os.h	109;"	d
iswap_int8	src/utils/htslib/cram/os.h	99;"	d
it	src/utils/BamTools/include/BamReader.hpp	/^			hts_itr_t* it;$/;"	m	struct:BamTools::BamReader::_SamFile
items	src/split/splitBed.cpp	/^		vector<BED*> items;$/;"	m	class:BedSplitItems	file:
items	src/split/splitBed.h	/^    std::vector<BED> items;$/;"	m	class:BedSplit
iter	src/utils/htslib/sam.c	/^    bam_plp_t *iter;$/;"	m	struct:__bam_mplp_t	file:
iterator	src/utils/htslib/test/test-vcf-api.c	/^void iterator(const char *fname)$/;"	f
iterator_type	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^	typedef vecType::iterator iterator_type;$/;"	t	class:RecordKeyVector
iterators1	src/utils/htslib/test/sam.c	/^static void iterators1(void)$/;"	f	file:
itf8_bytes	src/utils/htslib/cram/cram_io.c	/^const int itf8_bytes[16] = {$/;"	v
itf8_decode	src/utils/htslib/cram/cram_io.c	/^int itf8_decode(cram_fd *fd, int32_t *val_p) {$/;"	f
itf8_decode_crc	src/utils/htslib/cram/cram_io.c	/^int itf8_decode_crc(cram_fd *fd, int32_t *val_p, uint32_t *crc) {$/;"	f
itf8_encode	src/utils/htslib/cram/cram_io.c	/^int itf8_encode(cram_fd *fd, int32_t val) {$/;"	f
itf8_get	src/utils/htslib/cram/cram_io.h	/^static inline int itf8_get(char *cp, int32_t *val_p) {$/;"	f
itf8_put	src/utils/htslib/cram/cram_io.h	/^static inline int itf8_put(char *cp, int32_t val) {$/;"	f
itf8_put_blk	src/utils/htslib/cram/cram_io.c	/^int itf8_put_blk(cram_block *blk, int val) {$/;"	f
itf8_size	src/utils/htslib/cram/cram_io.h	264;"	d
itr	src/utils/htslib/htslib/synced_bcf_reader.h	/^    hts_itr_t *itr;         \/\/ tabix iterator$/;"	m	struct:_bcf_sr_regions_t
itr	src/utils/htslib/htslib/synced_bcf_reader.h	/^    hts_itr_t *itr;$/;"	m	struct:__anon31
jaccard_help	src/jaccard/jaccardHelp.cpp	/^void jaccard_help(void) {$/;"	f
job_pending	src/utils/htslib/cram/cram_structs.h	/^    void *job_pending;$/;"	m	struct:cram_fd
job_pool	src/utils/htslib/bgzf.c	/^    pool_alloc_t *job_pool;$/;"	m	struct:bgzf_mtaux_t	file:
job_pool_m	src/utils/htslib/bgzf.c	/^    pthread_mutex_t job_pool_m;$/;"	m	struct:bgzf_mtaux_t	file:
jobs_pending	src/utils/htslib/bgzf.c	/^    int jobs_pending; \/\/ number of jobs waiting$/;"	m	struct:bgzf_mtaux_t	file:
json	src/utils/htslib/htslib/hts.h	/^    json HTS_DEPRECATED_ENUM("Use htsExactFormat 'htsget' instead") = htsget,$/;"	e	enum:htsExactFormat
k	src/utils/htslib/cram/cram_codecs.h	/^    int32_t k;$/;"	m	struct:__anon75
k	src/utils/htslib/sam.c	/^    int k, x, y, end;$/;"	m	struct:__anon6	file:
kbitset_iter_t	src/utils/htslib/htslib/kbitset.h	/^typedef struct kbitset_iter_t {$/;"	s
kbitset_iter_t	src/utils/htslib/htslib/kbitset.h	/^} kbitset_iter_t;$/;"	t	typeref:struct:kbitset_iter_t
kbitset_t	src/utils/htslib/htslib/kbitset.h	/^typedef struct kbitset_t {$/;"	s
kbitset_t	src/utils/htslib/htslib/kbitset.h	/^} kbitset_t;$/;"	t	typeref:struct:kbitset_t
kbs_bitwise_or	src/utils/htslib/bcf_sr_sort.c	/^static inline void kbs_bitwise_or(kbitset_t *dst, kbitset_t *src)$/;"	f	file:
kbs_clear	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_clear(kbitset_t *bs)$/;"	f
kbs_delete	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_delete(kbitset_t *bs, int i)$/;"	f
kbs_destroy	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_destroy(kbitset_t *bs)$/;"	f
kbs_exists	src/utils/htslib/htslib/kbitset.h	/^static inline int kbs_exists(const kbitset_t *bs, int i)$/;"	f
kbs_init	src/utils/htslib/htslib/kbitset.h	/^static inline kbitset_t *kbs_init(size_t ni)$/;"	f
kbs_init2	src/utils/htslib/htslib/kbitset.h	/^static inline kbitset_t *kbs_init2(size_t ni, int fill)$/;"	f
kbs_insert	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_insert(kbitset_t *bs, int i)$/;"	f
kbs_insert_all	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_insert_all(kbitset_t *bs)$/;"	f
kbs_logical_and	src/utils/htslib/bcf_sr_sort.c	/^static inline int kbs_logical_and(kbitset_t *bs1, kbitset_t *bs2)$/;"	f	file:
kbs_next	src/utils/htslib/htslib/kbitset.h	/^static inline int kbs_next(const kbitset_t *bs, kbitset_iter_t *itr)$/;"	f
kbs_resize	src/utils/htslib/bcf_sr_sort.c	/^static inline kbitset_t *kbs_resize(kbitset_t *bs, size_t ni)$/;"	f	file:
kbs_start	src/utils/htslib/htslib/kbitset.h	/^static inline void kbs_start(kbitset_iter_t *itr)$/;"	f
kcalloc	src/utils/htslib/htslib/khash.h	180;"	d
keepRecord	src/sampleFile/sampleFile.cpp	/^bool SampleFile::keepRecord(Record *record)$/;"	f	class:SampleFile
keep_samples	src/utils/htslib/htslib/vcf.h	/^    uint8_t *keep_samples;$/;"	m	struct:__anon21
key	src/utils/htslib/bcf_sr_sort.h	/^    char *key;              \/\/ only for debugging$/;"	m	struct:__anon118
key	src/utils/htslib/cram/cram_structs.h	/^    int key;    \/* 0xe0 + 3 bytes *\/$/;"	m	struct:cram_map
key	src/utils/htslib/htslib/vcf.h	/^    char *key;      \/\/ The part before '=', i.e. FILTER\/INFO\/FORMAT\/contig\/fileformat etc.$/;"	m	struct:__anon18
key	src/utils/htslib/htslib/vcf.h	/^    const char *key;$/;"	m	struct:__anon20
key	src/utils/htslib/htslib/vcf.h	/^    int key;        \/\/ key: numeric tag id, the corresponding string is bcf_hdr_t::id[BCF_DT_ID][$key].key$/;"	m	struct:__anon24
key	src/utils/htslib/vcf.c	/^    int key, max_m, size, offset;$/;"	m	struct:__anon52	file:
keys	src/utils/htslib/htslib/vcf.h	/^    char **keys, **vals;    \/\/ The key=value pairs$/;"	m	struct:__anon18
kf_betai	src/fisher/kfunc.cpp	/^double kf_betai(double a, double b, double x)$/;"	f
kf_betai	src/utils/htslib/kfunc.c	/^double kf_betai(double a, double b, double x)$/;"	f
kf_betai_aux	src/fisher/kfunc.cpp	/^ double kf_betai_aux(double a, double b, double x)$/;"	f
kf_betai_aux	src/utils/htslib/kfunc.c	/^static double kf_betai_aux(double a, double b, double x)$/;"	f	file:
kf_erfc	src/fisher/kfunc.cpp	/^double kf_erfc(double x)$/;"	f
kf_erfc	src/utils/htslib/kfunc.c	/^double kf_erfc(double x)$/;"	f
kf_gammap	src/fisher/kfunc.cpp	/^double kf_gammap(double s, double z)$/;"	f
kf_gammap	src/utils/htslib/kfunc.c	/^double kf_gammap(double s, double z)$/;"	f
kf_gammaq	src/fisher/kfunc.cpp	/^double kf_gammaq(double s, double z)$/;"	f
kf_gammaq	src/utils/htslib/kfunc.c	/^double kf_gammaq(double s, double z)$/;"	f
kf_lgamma	src/fisher/kfunc.cpp	/^double kf_lgamma(double z)$/;"	f
kf_lgamma	src/utils/htslib/kfunc.c	/^double kf_lgamma(double z)$/;"	f
kfree	src/utils/htslib/htslib/khash.h	189;"	d
kftp_connect	src/utils/htslib/knetfile.c	/^int kftp_connect(knetFile *ftp)$/;"	f
kftp_connect_file	src/utils/htslib/knetfile.c	/^int kftp_connect_file(knetFile *fp)$/;"	f
kftp_get_response	src/utils/htslib/knetfile.c	/^static int kftp_get_response(knetFile *ftp)$/;"	f	file:
kftp_parse_url	src/utils/htslib/knetfile.c	/^knetFile *kftp_parse_url(const char *fn, const char *mode)$/;"	f
kftp_pasv_connect	src/utils/htslib/knetfile.c	/^static int kftp_pasv_connect(knetFile *ftp)$/;"	f	file:
kftp_pasv_prep	src/utils/htslib/knetfile.c	/^static int kftp_pasv_prep(knetFile *ftp)$/;"	f	file:
kftp_reconnect	src/utils/htslib/knetfile.c	/^int kftp_reconnect(knetFile *ftp)$/;"	f
kftp_send_cmd	src/utils/htslib/knetfile.c	/^static int kftp_send_cmd(knetFile *ftp, const char *cmd, int is_get)$/;"	f	file:
kget_int32	src/utils/htslib/cram/cram_index.c	/^static int kget_int32(kstring_t *k, size_t *pos, int32_t *val_p) {$/;"	f	file:
kget_int64	src/utils/htslib/cram/cram_index.c	/^static int kget_int64(kstring_t *k, size_t *pos, int64_t *val_p) {$/;"	f	file:
kgetline	src/utils/htslib/kstring.c	/^int kgetline(kstring_t *s, kgets_func *fgets_fn, void *fp)$/;"	f
kgets_func	src/utils/htslib/htslib/kstring.h	/^	typedef char *kgets_func(char *, int, void *);$/;"	t
kh_begin	src/utils/htslib/htslib/khash.h	528;"	d
kh_clear	src/utils/htslib/htslib/khash.h	453;"	d
kh_cstr_t	src/utils/htslib/htslib/khash.h	/^typedef const char *kh_cstr_t;$/;"	t
kh_del	src/utils/htslib/htslib/khash.h	491;"	d
kh_destroy	src/utils/htslib/htslib/khash.h	446;"	d
kh_end	src/utils/htslib/htslib/khash.h	535;"	d
kh_exist	src/utils/htslib/htslib/khash.h	499;"	d
kh_foreach	src/utils/htslib/htslib/khash.h	558;"	d
kh_foreach_value	src/utils/htslib/htslib/khash.h	572;"	d
kh_get	src/utils/htslib/htslib/khash.h	483;"	d
kh_init	src/utils/htslib/htslib/khash.h	439;"	d
kh_inline	src/utils/htslib/htslib/khash.h	148;"	d
kh_inline	src/utils/htslib/htslib/khash.h	150;"	d
kh_int64_hash_equal	src/utils/htslib/htslib/khash.h	389;"	d
kh_int64_hash_func	src/utils/htslib/htslib/khash.h	385;"	d
kh_int_hash_equal	src/utils/htslib/htslib/khash.h	379;"	d
kh_int_hash_func	src/utils/htslib/htslib/khash.h	375;"	d
kh_int_hash_func2	src/utils/htslib/htslib/khash.h	422;"	d
kh_key	src/utils/htslib/htslib/khash.h	507;"	d
kh_n_buckets	src/utils/htslib/htslib/khash.h	549;"	d
kh_put	src/utils/htslib/htslib/khash.h	474;"	d
kh_resize	src/utils/htslib/htslib/khash.h	461;"	d
kh_size	src/utils/htslib/htslib/khash.h	542;"	d
kh_str_hash_equal	src/utils/htslib/htslib/khash.h	410;"	d
kh_str_hash_func	src/utils/htslib/htslib/khash.h	406;"	d
kh_val	src/utils/htslib/htslib/khash.h	516;"	d
kh_value	src/utils/htslib/htslib/khash.h	521;"	d
khash_str2int_destroy	src/utils/htslib/htslib/khash_str2int.h	/^static inline void khash_str2int_destroy(void *_hash)$/;"	f
khash_str2int_destroy_free	src/utils/htslib/htslib/khash_str2int.h	/^static inline void khash_str2int_destroy_free(void *_hash)$/;"	f
khash_str2int_get	src/utils/htslib/htslib/khash_str2int.h	/^static inline int khash_str2int_get(void *_hash, const char *str, int *value)$/;"	f
khash_str2int_has_key	src/utils/htslib/htslib/khash_str2int.h	/^static inline int khash_str2int_has_key(void *_hash, const char *str)$/;"	f
khash_str2int_inc	src/utils/htslib/htslib/khash_str2int.h	/^static inline int khash_str2int_inc(void *_hash, const char *str)$/;"	f
khash_str2int_init	src/utils/htslib/htslib/khash_str2int.h	/^static inline void *khash_str2int_init(void)$/;"	f
khash_str2int_set	src/utils/htslib/htslib/khash_str2int.h	/^static inline int khash_str2int_set(void *_hash, const char *str, int value)$/;"	f
khash_str2int_size	src/utils/htslib/htslib/khash_str2int.h	/^static inline int khash_str2int_size(void *_hash)$/;"	f
khash_t	src/utils/htslib/htslib/khash.h	432;"	d
khint32_t	src/utils/htslib/htslib/khash.h	/^typedef unsigned int khint32_t;$/;"	t
khint32_t	src/utils/htslib/htslib/khash.h	/^typedef unsigned long khint32_t;$/;"	t
khint64_t	src/utils/htslib/htslib/khash.h	/^typedef unsigned long khint64_t;$/;"	t
khint64_t	src/utils/htslib/htslib/khash.h	/^typedef unsigned long long khint64_t;$/;"	t
khint_t	src/utils/htslib/htslib/khash.h	/^typedef khint32_t khint_t;$/;"	t
khiter_t	src/utils/htslib/htslib/khash.h	/^typedef khint_t khiter_t;$/;"	t
khttp_connect_file	src/utils/htslib/knetfile.c	/^int khttp_connect_file(knetFile *fp)$/;"	f
khttp_parse_url	src/utils/htslib/knetfile.c	/^knetFile *khttp_parse_url(const char *fn, const char *mode)$/;"	f
kl_begin	src/utils/htslib/htslib/klist.h	127;"	d
kl_destroy	src/utils/htslib/htslib/klist.h	131;"	d
kl_end	src/utils/htslib/htslib/klist.h	128;"	d
kl_init	src/utils/htslib/htslib/klist.h	130;"	d
kl_next	src/utils/htslib/htslib/klist.h	126;"	d
kl_pushp	src/utils/htslib/htslib/klist.h	132;"	d
kl_shift	src/utils/htslib/htslib/klist.h	133;"	d
kl_val	src/utils/htslib/htslib/klist.h	125;"	d
klib_unused	src/utils/htslib/htslib/khash.h	156;"	d
klib_unused	src/utils/htslib/htslib/khash.h	158;"	d
klib_unused	src/utils/htslib/htslib/klist.h	33;"	d
klib_unused	src/utils/htslib/htslib/klist.h	35;"	d
klist_t	src/utils/htslib/htslib/klist.h	124;"	d
kliter_t	src/utils/htslib/htslib/klist.h	123;"	d
kmalloc	src/utils/htslib/htslib/khash.h	183;"	d
kmemmem	src/utils/htslib/kstring.c	/^void *kmemmem(const void *_str, int n, const void *_pat, int m, int **_prep)$/;"	f
kmempool_t	src/utils/htslib/htslib/klist.h	71;"	d
kmp_alloc	src/utils/htslib/htslib/klist.h	74;"	d
kmp_destroy	src/utils/htslib/htslib/klist.h	73;"	d
kmp_free	src/utils/htslib/htslib/klist.h	75;"	d
kmp_init	src/utils/htslib/htslib/klist.h	72;"	d
knetFile	src/utils/htslib/htslib/knetfile.h	/^} knetFile;$/;"	t	typeref:struct:knetFile_s
knetFile_s	src/utils/htslib/htslib/knetfile.h	/^typedef struct knetFile_s {$/;"	s
knet_close	src/utils/htslib/knetfile.c	/^int knet_close(knetFile *fp)$/;"	f
knet_dopen	src/utils/htslib/knetfile.c	/^knetFile *knet_dopen(int fd, const char *mode)$/;"	f
knet_fileno	src/utils/htslib/htslib/knetfile.h	67;"	d
knet_open	src/utils/htslib/knetfile.c	/^knetFile *knet_open(const char *fn, const char *mode)$/;"	f
knet_read	src/utils/htslib/knetfile.c	/^ssize_t knet_read(knetFile *fp, void *buf, size_t len)$/;"	f
knet_seek	src/utils/htslib/knetfile.c	/^off_t knet_seek(knetFile *fp, off_t off, int whence)$/;"	f
knet_tell	src/utils/htslib/htslib/knetfile.h	66;"	d
knet_win32_destroy	src/utils/htslib/knetfile.c	/^void knet_win32_destroy()$/;"	f
knet_win32_init	src/utils/htslib/knetfile.c	/^int knet_win32_init()$/;"	f
kputc	src/utils/htslib/htslib/kstring.h	/^static inline int kputc(int c, kstring_t *s)$/;"	f
kputc_	src/utils/htslib/htslib/kstring.h	/^static inline int kputc_(int c, kstring_t *s)$/;"	f
kputd	src/utils/htslib/kstring.c	/^int kputd(double d, kstring_t *s) {$/;"	f
kputl	src/utils/htslib/htslib/kstring.h	/^static inline int kputl(long c, kstring_t *s)$/;"	f
kputs	src/utils/htslib/htslib/kstring.h	/^static inline int kputs(const char *p, kstring_t *s)$/;"	f
kputsn	src/utils/htslib/htslib/kstring.h	/^static inline int kputsn(const char *p, int l, kstring_t *s)$/;"	f
kputsn_	src/utils/htslib/htslib/kstring.h	/^static inline int kputsn_(const void *p, int l, kstring_t *s)$/;"	f
kputuw	src/utils/htslib/htslib/kstring.h	/^static inline int kputuw(unsigned c, kstring_t *s)$/;"	f
kputw	src/utils/htslib/htslib/kstring.h	/^static inline int kputw(int c, kstring_t *s)$/;"	f
krealloc	src/utils/htslib/htslib/khash.h	186;"	d
kroundup32	src/utils/htslib/bgzf.c	1609;"	d	file:
kroundup32	src/utils/htslib/faidx.c	60;"	d	file:
kroundup32	src/utils/htslib/htslib/hts.h	59;"	d
kroundup32	src/utils/htslib/htslib/khash.h	176;"	d
kroundup32	src/utils/htslib/htslib/kseq.h	91;"	d
kroundup32	src/utils/htslib/htslib/kstring.h	36;"	d
kroundup_size_t	src/utils/htslib/htslib/kstring.h	40;"	d
ksBM_prep	src/utils/htslib/kstring.c	/^static int *ksBM_prep(const ubyte_t *pat, int m)$/;"	f	file:
ks_combsort	src/utils/htslib/htslib/ksort.h	277;"	d
ks_eof	src/utils/htslib/htslib/kseq.h	49;"	d
ks_heapadjust	src/utils/htslib/htslib/ksort.h	280;"	d
ks_heapmake	src/utils/htslib/htslib/ksort.h	279;"	d
ks_heapsort	src/utils/htslib/htslib/ksort.h	278;"	d
ks_introsort	src/utils/htslib/htslib/ksort.h	276;"	d
ks_isort_stack_t	src/utils/htslib/htslib/ksort.h	/^} ks_isort_stack_t;$/;"	t	typeref:struct:__anon35
ks_ksmall	src/utils/htslib/htslib/ksort.h	281;"	d
ks_len	src/utils/htslib/htslib/kstring.h	/^static inline size_t ks_len(kstring_t *s)$/;"	f
ks_lt_generic	src/utils/htslib/htslib/ksort.h	284;"	d
ks_lt_str	src/utils/htslib/htslib/ksort.h	285;"	d
ks_mergesort	src/utils/htslib/htslib/ksort.h	275;"	d
ks_release	src/utils/htslib/htslib/kstring.h	/^static inline char *ks_release(kstring_t *s)$/;"	f
ks_resize	src/utils/htslib/htslib/kstring.h	/^static inline int ks_resize(kstring_t *s, size_t size)$/;"	f
ks_rewind	src/utils/htslib/htslib/kseq.h	50;"	d
ks_shuffle	src/utils/htslib/htslib/ksort.h	282;"	d
ks_str	src/utils/htslib/htslib/kstring.h	/^static inline char *ks_str(kstring_t *s)$/;"	f
ks_tokaux_t	src/utils/htslib/htslib/kstring.h	/^} ks_tokaux_t;$/;"	t	typeref:struct:__anon34
kseq_rewind	src/utils/htslib/htslib/kseq.h	167;"	d
ksplit	src/utils/htslib/htslib/kstring.h	/^static inline int *ksplit(kstring_t *s, int delimiter, int *n)$/;"	f
ksplit_core	src/utils/htslib/kstring.c	/^int ksplit_core(char *s, int delimiter, int *_max, int **_offsets)$/;"	f
ksprintf	src/utils/htslib/kstring.c	/^int ksprintf(kstring_t *s, const char *fmt, ...)$/;"	f
ksstr_t	src/utils/htslib/htslib/ksort.h	/^typedef const char *ksstr_t;$/;"	t
kstring_t	src/utils/htslib/htslib/bgzf.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
kstring_t	src/utils/htslib/htslib/hts.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
kstring_t	src/utils/htslib/htslib/kseq.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
kstring_t	src/utils/htslib/htslib/kstring.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
kstrnstr	src/utils/htslib/kstring.c	/^char *kstrnstr(const char *str, const char *pat, int n, int **_prep)$/;"	f
kstrstr	src/utils/htslib/kstring.c	/^char *kstrstr(const char *str, const char *pat, int **_prep)$/;"	f
kstrtok	src/utils/htslib/kstring.c	/^char *kstrtok(const char *str, const char *sep, ks_tokaux_t *aux)$/;"	f
kt_fisher_exact	src/fisher/kfunc.cpp	/^double kt_fisher_exact(long long n11, long long n12, long long n21, long long n22, double *_left, double *_right, double *two)$/;"	f
kt_fisher_exact	src/utils/htslib/kfunc.c	/^double kt_fisher_exact(int n11, int n12, int n21, int n22, double *_left, double *_right, double *two)$/;"	f
kvsprintf	src/utils/htslib/kstring.c	/^int kvsprintf(kstring_t *s, const char *fmt, va_list ap)$/;"	f
l	src/utils/htslib/htslib/bgzf.h	/^    size_t l, m;$/;"	m	struct:__kstring_t
l	src/utils/htslib/htslib/hts.h	/^    size_t l, m;$/;"	m	struct:__kstring_t
l	src/utils/htslib/htslib/kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
l	src/utils/htslib/htslib/kstring.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
l_data	src/utils/htslib/htslib/sam.h	/^    int l_data;$/;"	m	struct:__anon40
l_extranul	src/utils/htslib/htslib/sam.h	/^    uint8_t l_extranul;$/;"	m	struct:__anon39
l_meta	src/utils/htslib/hts.c	/^    uint32_t l_meta;$/;"	m	struct:__hts_idx_t	file:
l_qname	src/utils/htslib/htslib/sam.h	/^    uint8_t l_qname;$/;"	m	struct:__anon39
l_qseq	src/utils/htslib/htslib/sam.h	/^    int32_t l_qseq;$/;"	m	struct:__anon39
l_text	src/utils/htslib/htslib/sam.h	/^    uint32_t l_text;$/;"	m	struct:__anon38
lals	src/utils/htslib/vcf_sweep.c	/^    char *lals;$/;"	m	struct:_bcf_sweep_t	file:
lals_len	src/utils/htslib/vcf_sweep.c	/^    int lrid, lpos, lnals, lals_len, mlals;   \/\/ to check uniqueness of a record$/;"	m	struct:_bcf_sweep_t	file:
landmark	src/utils/htslib/cram/cram_structs.h	/^    int32_t *landmark;$/;"	m	struct:cram_block_compression_hdr
landmark	src/utils/htslib/cram/cram_structs.h	/^    int32_t *landmark;$/;"	m	struct:cram_container
last	src/utils/htslib/cram/cram_structs.h	/^    ref_entry *last;       \/\/ Last queried sequence$/;"	m	struct:__anon95
lastElemCode	src/utils/general/Tokenizer.h	/^	typedef enum { USE_NOW, IGNORE } lastElemCode;$/;"	t	class:Tokenizer	typeref:enum:Tokenizer::__anon1
last_apos	src/utils/htslib/cram/cram_structs.h	/^    int last_apos, max_apos;$/;"	m	struct:cram_slice
last_base	src/utils/htslib/cram/cram_structs.h	/^    int first_base, last_base;$/;"	m	struct:cram_fd
last_base	src/utils/htslib/cram/cram_structs.h	/^    int ref_start, first_base, last_base, ref_id, ref_end;$/;"	m	struct:cram_container
last_bin	src/utils/htslib/hts.c	/^        uint32_t last_bin, save_bin;$/;"	m	struct:__hts_idx_t::__anon5	file:
last_block_eof	src/utils/htslib/htslib/bgzf.h	/^    unsigned last_block_eof:1, is_compressed:1, is_gzip:1;$/;"	m	struct:BGZF
last_coor	src/utils/htslib/hts.c	/^        int last_coor, last_tid, save_tid, finished;$/;"	m	struct:__hts_idx_t::__anon5	file:
last_id	src/utils/htslib/cram/cram_structs.h	/^    int last_id;           \/\/ Used in cram_ref_decr_locked to delay free$/;"	m	struct:__anon95
last_off	src/utils/htslib/hts.c	/^        uint64_t last_off, save_off;$/;"	m	struct:__hts_idx_t::__anon5	file:
last_pos	src/utils/htslib/cram/cram_structs.h	/^    int last_pos;                \/\/ last record position$/;"	m	struct:cram_container
last_slice	src/utils/htslib/cram/cram_structs.h	/^    int last_slice;                     \/\/ number of recs encoded in last slice$/;"	m	struct:cram_fd
last_slice	src/utils/htslib/cram/cram_structs.h	/^    int last_slice;              \/\/ number of reads in last slice (0 for 1st)$/;"	m	struct:cram_container
last_tid	src/utils/htslib/hts.c	/^        int last_coor, last_tid, save_tid, finished;$/;"	m	struct:__hts_idx_t::__anon5	file:
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v
lazy_flush	src/utils/htslib/bgzf.c	/^static inline int lazy_flush(BGZF *fp)$/;"	f	file:
lazy_flush	src/utils/htslib/bgzf.c	/^static int lazy_flush(BGZF *fp)$/;"	f	file:
lbinom	src/fisher/kfunc.cpp	/^ double lbinom(long long n, long long k)$/;"	f
lbinom	src/utils/htslib/kfunc.c	/^static double lbinom(int n, int k)$/;"	f	file:
lbnode_t	src/utils/htslib/sam.c	/^} lbnode_t;$/;"	t	typeref:struct:__linkbuf_t	file:
le_int2	src/utils/htslib/cram/os.h	/^static inline uint16_t le_int2(uint16_t x) {$/;"	f
le_int2	src/utils/htslib/cram/os.h	149;"	d
le_int2	src/utils/htslib/cram/os.h	152;"	d
le_int4	src/utils/htslib/cram/os.h	/^static inline uint32_t le_int4(uint32_t x) {$/;"	f
le_int4	src/utils/htslib/cram/os.h	148;"	d
le_int4	src/utils/htslib/cram/os.h	151;"	d
le_to_double	src/utils/htslib/htslib/hts_endian.h	/^static inline double le_to_double(const uint8_t *buf) {$/;"	f
le_to_float	src/utils/htslib/htslib/hts_endian.h	/^static inline float le_to_float(const uint8_t *buf) {$/;"	f
le_to_i16	src/utils/htslib/htslib/hts_endian.h	/^static inline int16_t le_to_i16(const uint8_t *buf) {$/;"	f
le_to_i32	src/utils/htslib/htslib/hts_endian.h	/^static inline int32_t le_to_i32(const uint8_t *buf) {$/;"	f
le_to_i64	src/utils/htslib/htslib/hts_endian.h	/^static inline int64_t le_to_i64(const uint8_t *buf) {$/;"	f
le_to_i8	src/utils/htslib/htslib/hts_endian.h	/^static inline int8_t le_to_i8(const uint8_t *buf) {$/;"	f
le_to_u16	src/utils/htslib/htslib/hts_endian.h	/^static inline uint16_t le_to_u16(const uint8_t *buf) {$/;"	f
le_to_u32	src/utils/htslib/htslib/hts_endian.h	/^static inline uint32_t le_to_u32(const uint8_t *buf) {$/;"	f
le_to_u64	src/utils/htslib/htslib/hts_endian.h	/^static inline uint64_t le_to_u64(const uint8_t *buf) {$/;"	f
left	src/utils/htslib/htslib/ksort.h	/^	void *left, *right;$/;"	m	struct:__anon35
len	src/utils/htslib/cram/cram_codecs.h	/^    int32_t len;$/;"	m	struct:__anon70
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon86
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon88
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon89
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon91
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon92
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon93
len	src/utils/htslib/cram/cram_structs.h	/^	    int len;$/;"	m	struct:cram_feature::__anon83::__anon94
len	src/utils/htslib/cram/cram_structs.h	/^    int     len;    \/\/                     1.1 - size of slice in bytes$/;"	m	struct:cram_index
len	src/utils/htslib/cram/cram_structs.h	/^    int32_t len;          \/\/ RL$/;"	m	struct:cram_record
len	src/utils/htslib/cram/sam_header.h	/^    int   len;$/;"	m	struct:SAM_hdr_tag_s
len	src/utils/htslib/cram/sam_header.h	/^    uint32_t len;$/;"	m	struct:__anon64
len	src/utils/htslib/faidx.c	/^    int64_t len;$/;"	m	struct:__anon114	file:
len	src/utils/htslib/hfile_libcurl.c	/^        size_t len;$/;"	m	struct:__anon102::__anon103	file:
len	src/utils/htslib/htslib/vcf.h	/^    int type, len;  \/\/ type: one of BCF_BT_* types; len: vector length, 1 for scalars$/;"	m	struct:__anon24
len_codec	src/utils/htslib/cram/cram_codecs.h	/^    struct cram_codec *len_codec;$/;"	m	struct:__anon77	typeref:struct:__anon77::cram_codec
len_codec	src/utils/htslib/cram/cram_codecs.h	/^    struct cram_codec *len_codec;$/;"	m	struct:__anon79	typeref:struct:__anon79::cram_codec
len_dat	src/utils/htslib/cram/cram_codecs.h	/^    void *len_dat;$/;"	m	struct:__anon79
len_encoding	src/utils/htslib/cram/cram_codecs.h	/^    enum cram_encoding len_encoding;$/;"	m	struct:__anon79	typeref:enum:__anon79::cram_encoding
length	src/utils/BamTools/include/BamAlignment.hpp	/^				size_t      length() const { return size; }$/;"	f	struct:BamTools::BamAlignment::_SupportData::__anon126
length	src/utils/Fasta/Fasta.h	/^        int length;  \/\/ length of sequence$/;"	m	class:FastaIndexEntry
length	src/utils/htslib/cram/cram_structs.h	/^    int32_t  length;$/;"	m	struct:cram_container
length	src/utils/htslib/cram/cram_structs.h	/^    int64_t length;$/;"	m	struct:ref_entry
lessThan	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::lessThan(const Record *other) const$/;"	f	class:Record
level	src/utils/htslib/cram/cram_structs.h	/^    int level;$/;"	m	struct:cram_fd
level	src/utils/htslib/htslib/sam.h	/^    int indel, level;$/;"	m	struct:__anon42
lfact	src/utils/htslib/errmod.c	47;"	d	file:
libcurl_backend	src/utils/htslib/hfile_libcurl.c	/^static const struct hFILE_backend libcurl_backend =$/;"	v	typeref:struct:hFILE_backend	file:
libcurl_close	src/utils/htslib/hfile_libcurl.c	/^static int libcurl_close(hFILE *fpv)$/;"	f	file:
libcurl_exit	src/utils/htslib/hfile_libcurl.c	/^static void libcurl_exit()$/;"	f	file:
libcurl_open	src/utils/htslib/hfile_libcurl.c	/^libcurl_open(const char *url, const char *modes, http_headers *headers)$/;"	f	file:
libcurl_read	src/utils/htslib/hfile_libcurl.c	/^static ssize_t libcurl_read(hFILE *fpv, void *bufferv, size_t nbytes)$/;"	f	file:
libcurl_seek	src/utils/htslib/hfile_libcurl.c	/^static off_t libcurl_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
libcurl_write	src/utils/htslib/hfile_libcurl.c	/^static ssize_t libcurl_write(hFILE *fpv, const void *bufferv, size_t nbytes)$/;"	f	file:
libdir	src/utils/htslib/Makefile	/^libdir      = $(exec_prefix)\/lib$/;"	m
libexecdir	src/utils/htslib/Makefile	/^libexecdir  = $(exec_prefix)\/libexec$/;"	m
lidx	src/utils/htslib/hts.c	/^    lidx_t *lidx;$/;"	m	struct:__hts_idx_t	file:
lidx_t	src/utils/htslib/hts.c	/^} lidx_t;$/;"	t	typeref:struct:__anon4	file:
limit	src/utils/htslib/htslib/hfile.h	/^    char *buffer, *begin, *end, *limit;$/;"	m	struct:hFILE
line	src/utils/BamTools/mapping/BamAlignment.py	/^    line = line.strip().split(":")$/;"	v
line	src/utils/htslib/htslib/hts.h	/^    kstring_t line;$/;"	m	struct:__anon11
line	src/utils/htslib/htslib/synced_bcf_reader.h	/^    kstring_t line;         \/\/ holder of the current line, set only when reading from tabix-indexed files$/;"	m	struct:_bcf_sr_regions_t
lineNum	src/utils/bedFile/bedFile.h	/^    int lineNum;$/;"	m	struct:MATE
line_blen	src/utils/Fasta/Fasta.h	/^        int line_blen;  \/\/ line length in bytes, sequence characters$/;"	m	class:FastaIndexEntry
line_blen	src/utils/htslib/faidx.c	/^    int32_t line_len, line_blen;$/;"	m	struct:__anon114	file:
line_len	src/utils/Fasta/Fasta.h	/^        int line_len;  \/\/ line length including newline$/;"	m	class:FastaIndexEntry
line_len	src/utils/htslib/faidx.c	/^    int32_t line_len, line_blen;$/;"	m	struct:__anon114	file:
line_length	src/utils/htslib/cram/cram_structs.h	/^    int line_length;$/;"	m	struct:ref_entry
line_skip	src/utils/htslib/htslib/tbx.h	/^    int32_t meta_char, line_skip;$/;"	m	struct:__anon36
lineno	src/utils/htslib/htslib/hts.h	/^    int64_t lineno;$/;"	m	struct:__anon11
links_help	src/linksBed/linksMain.cpp	/^void links_help(void) {$/;"	f
links_main	src/linksBed/linksMain.cpp	/^int links_main(int argc, char* argv[]) {$/;"	f
list	src/utils/htslib/hfile_libcurl.c	/^    struct curl_slist *list;$/;"	m	struct:__anon100	typeref:struct:__anon100::curl_slist	file:
list	src/utils/htslib/hts.c	/^    hts_pair64_t *list;$/;"	m	struct:__anon3	file:
listType	src/utils/FileRecordTools/Records/RecordKeyList.h	/^	typedef RecordList listType;$/;"	t	class:RecordKeyList
lnals	src/utils/htslib/vcf_sweep.c	/^    int lrid, lpos, lnals, lals_len, mlals;   \/\/ to check uniqueness of a record$/;"	m	struct:_bcf_sweep_t	file:
lo	src/utils/htslib/md5.c	/^	hts_md5_u32plus lo, hi;$/;"	m	struct:hts_md5_context	file:
loadBed	src/split/splitBed.cpp	/^void BedSplit::loadBed()$/;"	f	class:BedSplit
loadBedCovFileIntoMap	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedCovFileIntoMap() {$/;"	f	class:BedFile
loadBedCovListFileIntoMap	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedCovListFileIntoMap() {$/;"	f	class:BedFile
loadBedFileIntoMap	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedFileIntoMap() {$/;"	f	class:BedFile
loadBedFileIntoMapNoBin	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedFileIntoMapNoBin() {$/;"	f	class:BedFile
loadBedFileIntoMergedMap	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedFileIntoMergedMap() {$/;"	f	class:BedFile
loadBedFileIntoVector	src/utils/bedFile/bedFile.cpp	/^void BedFile::loadBedFileIntoVector() {$/;"	f	class:BedFile
loadBedPEFileIntoMap	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::loadBedPEFileIntoMap() {$/;"	f	class:BedFilePE
loadDB	src/utils/BinTree/BinTree.cpp	/^void BinTree::loadDB()$/;"	f	class:BinTree
loadGenomeFileIntoMap	src/utils/GenomeFile/GenomeFile.cpp	/^void GenomeFile::loadGenomeFileIntoMap() {$/;"	f	class:GenomeFile
loadGenomeFileIntoMap	src/utils/GenomeFile/NewGenomeFile.cpp	/^void NewGenomeFile::loadGenomeFileIntoMap() {$/;"	f	class:NewGenomeFile
load_block_from_cache	src/utils/htslib/bgzf.c	/^static int load_block_from_cache(BGZF *fp, int64_t block_address) {return 0;}$/;"	f	file:
load_block_from_cache	src/utils/htslib/bgzf.c	/^static int load_block_from_cache(BGZF *fp, int64_t block_address)$/;"	f	file:
load_hfile_plugins	src/utils/htslib/hfile.c	/^static void load_hfile_plugins()$/;"	f	file:
load_index	src/utils/BamTools/include/BamReader.hpp	/^			bool load_index(const char* filename) $/;"	f	struct:BamTools::BamReader::_SamFile
load_plugin	src/utils/htslib/plugin.c	/^void *load_plugin(void **pluginp, const char *filename, const char *symbol)$/;"	f
load_ref_portion	src/utils/htslib/cram/cram_io.c	/^static char *load_ref_portion(BGZF *fp, ref_entry *e, int start, int end) {$/;"	f	file:
lock	src/utils/htslib/cram/cram_structs.h	/^    pthread_mutex_t lock;  \/\/ Mutex for multi-threaded updating$/;"	m	struct:__anon95
lock	src/utils/htslib/hfile_libcurl.c	/^    pthread_mutex_t lock;$/;"	m	struct:__anon105	file:
loff	src/utils/htslib/hts.c	/^    uint64_t loff;$/;"	m	struct:__anon3	file:
logbinomial_table	src/utils/htslib/errmod.c	/^static double* logbinomial_table( const int n_size )$/;"	f	file:
lookupType	src/utils/GenomeFile/NewGenomeFile.h	/^    typedef map<string, pair<CHRPOS, int> > lookupType;$/;"	t	class:NewGenomeFile
lossy_read_names	src/utils/htslib/cram/cram_encode.c	/^static int lossy_read_names(cram_fd *fd, cram_container *c, cram_slice *s,$/;"	f	file:
lossy_read_names	src/utils/htslib/cram/cram_structs.h	/^    int lossy_read_names;               \/\/ boolean$/;"	m	struct:cram_fd
lpos	src/utils/htslib/vcf_sweep.c	/^    int lrid, lpos, lnals, lals_len, mlals;   \/\/ to check uniqueness of a record$/;"	m	struct:_bcf_sweep_t	file:
lrand48	src/utils/htslib/htslib/hts_os.h	39;"	d
lrid	src/utils/htslib/vcf_sweep.c	/^    int lrid, lpos, lnals, lals_len, mlals;   \/\/ to check uniqueness of a record$/;"	m	struct:_bcf_sweep_t	file:
ltext	src/utils/htslib/test/test_bgzf.c	/^    size_t ltext;$/;"	m	struct:__anon50	file:
ltf8_bytes	src/utils/htslib/cram/cram_io.c	/^const int ltf8_bytes[256] = {$/;"	v
ltf8_decode	src/utils/htslib/cram/cram_io.c	/^int ltf8_decode(cram_fd *fd, int64_t *val_p) {$/;"	f
ltf8_decode_crc	src/utils/htslib/cram/cram_io.c	/^int ltf8_decode_crc(cram_fd *fd, int64_t *val_p, uint32_t *crc) {$/;"	f
ltf8_get	src/utils/htslib/cram/cram_io.h	/^static inline int ltf8_get(char *cp, int64_t *val_p) {$/;"	f
ltf8_put	src/utils/htslib/cram/cram_io.h	/^static inline int ltf8_put(char *cp, int64_t val) {$/;"	f
lzma_cnt	src/utils/htslib/cram/cram_structs.h	/^    int lzma_cnt;$/;"	m	struct:__anon82
lzma_extra	src/utils/htslib/cram/cram_structs.h	/^    double lzma_extra;$/;"	m	struct:__anon82
lzma_mem_deflate	src/utils/htslib/cram/cram_io.c	/^static char *lzma_mem_deflate(char *data, size_t size, size_t *cdata_size,$/;"	f	file:
lzma_mem_inflate	src/utils/htslib/cram/cram_io.c	/^static char *lzma_mem_inflate(char *cdata, size_t csize, size_t *size) {$/;"	f	file:
m	src/utils/htslib/cram/cram_structs.h	/^    cram_metrics *m; \/\/ used to track aux block compression only$/;"	m	struct:cram_block
m	src/utils/htslib/cram/cram_structs.h	/^    cram_metrics *m;$/;"	m	struct:cram_tag_map
m	src/utils/htslib/cram/cram_structs.h	/^    cram_metrics *m[DS_END];$/;"	m	struct:cram_fd
m	src/utils/htslib/hts.c	/^    int32_t m, n;$/;"	m	struct:__anon3	file:
m	src/utils/htslib/hts.c	/^    int32_t n, m;$/;"	m	struct:__anon4	file:
m	src/utils/htslib/hts.c	/^    int32_t n, m;$/;"	m	struct:__hts_idx_t	file:
m	src/utils/htslib/htslib/bgzf.h	/^    size_t l, m;$/;"	m	struct:__kstring_t
m	src/utils/htslib/htslib/hts.h	/^        int n, m;$/;"	m	struct:__anon16::__anon17
m	src/utils/htslib/htslib/hts.h	/^    size_t l, m;$/;"	m	struct:__kstring_t
m	src/utils/htslib/htslib/kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
m	src/utils/htslib/htslib/kstring.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
m	src/utils/htslib/htslib/vcf.h	/^    int32_t m[3];          \/\/ m: allocated size of the dictionary block in use (see n above)$/;"	m	struct:__anon21
m	test/fisher/plot.py	/^m = int(max(x.max(), y.max())) + 1$/;"	v
mFILE	src/utils/htslib/cram/mFILE.h	/^} mFILE;$/;"	t	typeref:struct:__anon60
m_allele	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
m_als	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
m_channel	src/utils/htslib/cram/mFILE.c	/^static mFILE *m_channel[3];  \/* stdin, stdout and stderr fakes *\/$/;"	v	file:
m_data	src/utils/htslib/htslib/sam.h	/^    uint32_t m_data;$/;"	m	struct:__anon40
m_flt	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
m_fmt	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
m_id	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
m_info	src/utils/htslib/htslib/vcf.h	/^    int m_fmt, m_info, m_id, m_als, m_allele, m_flt; \/\/ allocated size (high-water mark); do not change$/;"	m	struct:__anon26
magic	src/utils/htslib/cram/cram_structs.h	/^    char    magic[4];$/;"	m	struct:cram_file_def
main	scripts/makeBashScripts.py	/^def main():$/;"	f
main	src/bedtools.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/fisher/kfunc.cpp	/^long long main(long long argc, char *argv[])$/;"	f
main	src/split/splitBed.cpp	/^int BedSplit::main(int argc,char** argv)$/;"	f	class:BedSplit
main	src/utils/htslib/bgzip.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/cram/pooled_alloc.c	/^int main(void) {$/;"	f
main	src/utils/htslib/cram/rANS_static.c	/^int main(int argc, char **argv) {$/;"	f
main	src/utils/htslib/htsfile.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/kfunc.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/htslib/knetfile.c	/^int main(void)$/;"	f
main	src/utils/htslib/kstring.c	/^int main()$/;"	f
main	src/utils/htslib/probaln.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/htslib/tabix.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/htslib/test/fieldarith.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/hfile.c	/^int main(void)$/;"	f
main	src/utils/htslib/test/hts_endian.c	/^int main(int argc, char **argv) {$/;"	f
main	src/utils/htslib/test/sam.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/test-bcf-sr.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/htslib/test/test-bcf-translate.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/test-regidx.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/test-vcf-api.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/test-vcf-sweep.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/htslib/test/test_bgzf.c	/^int main(int argc, char **argv) {$/;"	f
main	src/utils/htslib/test/test_view.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/htslib/test/thrash_threads1.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/test/thrash_threads2.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/test/thrash_threads3.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/test/thrash_threads4.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/test/thrash_threads5.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/test/thrash_threads6.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/htslib/thread_pool.c	/^int main(int argc, char **argv) {$/;"	f
mainMapType	src/utils/BinTree/BinTree.h	/^	typedef map<string, allBinsType> mainMapType; \/\/for each chrom, a map of bin num to RecordLists.$/;"	t	class:BinTree
major	src/utils/htslib/htslib/hts.h	/^    struct { short major, minor; } version;$/;"	m	struct:htsFormat::__anon10
major_version	src/utils/htslib/cram/cram_io.c	/^static int major_version = 3;$/;"	v	file:
major_version	src/utils/htslib/cram/cram_structs.h	/^    uint8_t major_version;$/;"	m	struct:cram_file_def
makeDepthCount	src/coverageFile/coverageFile.cpp	/^void CoverageFile::makeDepthCount(RecordKeyVector &hits) {$/;"	f	class:CoverageFile
makeFreqMap	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^void KeyListOpsMethods::makeFreqMap() {$/;"	f	class:KeyListOpsMethods
makeSweep	src/closestFile/closestFile.cpp	/^void ClosestFile::makeSweep() {$/;"	f	class:ClosestFile
makeSweep	src/intersectFile/intersectFile.cpp	/^void IntersectFile::makeSweep() {$/;"	f	class:IntersectFile
mals	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nals, mals;         \/\/ number of set alleles and the size of allocated array$/;"	m	struct:_bcf_sr_regions_t
man1dir	src/utils/htslib/Makefile	/^man1dir     = $(mandir)\/man1$/;"	m
man5dir	src/utils/htslib/Makefile	/^man5dir     = $(mandir)\/man5$/;"	m
man_pages	docs/conf.py	/^man_pages = [$/;"	v
mandir	src/utils/htslib/Makefile	/^mandir      = $(datarootdir)\/man$/;"	m
map_find	src/utils/htslib/cram/cram_decode.c	/^static cram_map *map_find(cram_map **map, unsigned char *key, int id) {$/;"	f	file:
map_help	src/mapFile/mapHelp.cpp	/^void map_help(void) {$/;"	f
mapped_qs_included	src/utils/htslib/cram/cram_structs.h	/^    int mapped_qs_included;$/;"	m	struct:cram_block_compression_hdr
markUsed	src/utils/Contexts/ContextBase.h	/^	void markUsed(int i) { _argsProcessed[i] = true; }$/;"	f	class:ContextBase
mask	src/utils/htslib/bcf_sr_sort.h	/^    kbitset_t *mask;        \/\/ which groups are populated in this set (replace with expandable bitmask)$/;"	m	struct:__anon119
mask	src/utils/htslib/bcf_sr_sort.h	/^    kbitset_t *mask;        \/\/ which groups contain the variant$/;"	m	struct:__anon117
mask	src/utils/htslib/htslib/kbitset.h	/^	unsigned long mask;$/;"	m	struct:kbitset_iter_t
maskfastafrombed_help	src/maskFastaFromBed/maskFastaFromBedMain.cpp	/^void maskfastafrombed_help(void) {$/;"	f
maskfastafrombed_main	src/maskFastaFromBed/maskFastaFromBedMain.cpp	/^int maskfastafrombed_main(int argc, char* argv[]) {$/;"	f
masterBedCovListMap	src/utils/bedFile/bedFile.h	/^typedef map<string, binsToBedCovLists> masterBedCovListMap;$/;"	t
masterBedCovMap	src/utils/bedFile/bedFile.h	/^typedef map<string, binsToBedCovs> masterBedCovMap;$/;"	t
masterBedMap	src/utils/bedFile/bedFile.h	/^typedef map<string, binsToBeds>    masterBedMap;$/;"	t
masterBedMapNoBin	src/utils/bedFile/bedFile.h	/^typedef map<string, bedVector>     masterBedMapNoBin;$/;"	t
masterMateMap	src/utils/bedFile/bedFile.h	/^typedef map<string, binsToMates> masterMateMap;$/;"	t
masterScan	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::masterScan(RecordKeyVector &retList) {$/;"	f	class:CloseSweep
masterScan	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::masterScan(RecordKeyVector &retList) {$/;"	f	class:NewChromSweep
master_doc	docs/conf.py	/^master_doc = 'index'$/;"	v
mate	src/utils/bedFile/bedFile.h	/^    MATE *mate;$/;"	m	struct:MATE
mateVector	src/utils/bedFile/bedFile.h	/^typedef vector<MATE> mateVector;$/;"	t
mate_flags	src/utils/htslib/cram/cram_structs.h	/^    int32_t mate_flags;   \/\/ MF$/;"	m	struct:cram_record
mate_line	src/utils/htslib/cram/cram_structs.h	/^    int32_t mate_line;    \/\/ index to another cram_record$/;"	m	struct:cram_record
mate_pos	src/utils/htslib/cram/cram_structs.h	/^    int32_t mate_pos;     \/\/ NP$/;"	m	struct:cram_record
mate_ref_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t mate_ref_id;$/;"	m	struct:cram_record
max	src/utils/htslib/sam.c	/^    int cnt, n, max;$/;"	m	struct:__anon7	file:
max_apos	src/utils/htslib/cram/cram_structs.h	/^    int last_apos, max_apos;$/;"	m	struct:cram_slice
max_apos	src/utils/htslib/cram/cram_structs.h	/^    int max_apos;                \/\/ maximum position, used if pos_sorted==0$/;"	m	struct:cram_container
max_c_rec	src/utils/htslib/cram/cram_structs.h	/^    int max_c_rec, curr_c_rec;   \/\/ current and max recs per container$/;"	m	struct:cram_container
max_g	src/utils/htslib/vcf.c	/^    uint64_t is_gt:1, max_g:31, max_l:32;$/;"	m	struct:__anon52	file:
max_l	src/utils/htslib/vcf.c	/^    uint64_t is_gt:1, max_g:31, max_l:32;$/;"	m	struct:__anon52	file:
max_length	src/utils/htslib/cram/string_alloc.h	/^    size_t max_length;$/;"	m	struct:__anon63
max_m	src/utils/htslib/vcf.c	/^    int key, max_m, size, offset;$/;"	m	struct:__anon52	file:
max_plp	src/utils/htslib/sam.c	/^    int is_eof, max_plp, error, maxcnt;$/;"	m	struct:__bam_plp_t	file:
max_pos	src/utils/htslib/sam.c	/^    int32_t tid, pos, max_tid, max_pos;$/;"	m	struct:__bam_plp_t	file:
max_rec	src/utils/htslib/cram/cram_structs.h	/^    int max_rec, curr_rec;       \/\/ current and max recs per slice$/;"	m	struct:cram_container
max_response	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
max_slice	src/utils/htslib/cram/cram_structs.h	/^    int max_slice, curr_slice;   \/\/ maximum number of slices$/;"	m	struct:cram_container
max_tid	src/utils/htslib/sam.c	/^    int32_t tid, pos, max_tid, max_pos;$/;"	m	struct:__bam_plp_t	file:
max_unpack	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int max_unpack;     \/\/ When reading VCFs and knowing some fields will not be needed, boost performance of vcf_parse1$/;"	m	struct:__anon33
max_unpack	src/utils/htslib/htslib/vcf.h	/^    int max_unpack;         \/\/ Set to BCF_UN_STR, BCF_UN_FLT, or BCF_UN_INFO to boost performance of vcf_parse when some of the fields won't be needed$/;"	m	struct:__anon27
maxcnt	src/utils/htslib/sam.c	/^    int is_eof, max_plp, error, maxcnt;$/;"	m	struct:__bam_plp_t	file:
maxparts	src/utils/htslib/multipart.c	/^    size_t nparts, maxparts, current;$/;"	m	struct:__anon106	file:
mbuffer	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nbuffer, mbuffer;           \/\/ number of cached records (including the current record); number of allocated records$/;"	m	struct:__anon31
mcharp	src/utils/htslib/bcf_sr_sort.h	/^    int moff, noff, *off, mcharp;$/;"	m	struct:__anon120
mcnt	src/utils/htslib/bcf_sr_sort.h	/^    int mcnt, *cnt;         \/\/ number of VCF covered by a varset$/;"	m	struct:__anon120
md5	src/utils/htslib/cram/cram_structs.h	/^    unsigned char md5[16];$/;"	m	struct:cram_block_slice_hdr
md5_print	src/utils/htslib/cram/cram_decode.c	/^static char *md5_print(unsigned char *md5, char *out) {$/;"	f	file:
mem	src/utils/htslib/htslib/vcf.h	/^    kstring_t mem;$/;"	m	struct:__anon21
mem_backend	src/utils/htslib/hfile.c	/^static const struct hFILE_backend mem_backend =$/;"	v	typeref:struct:hFILE_backend	file:
mem_close	src/utils/htslib/hfile.c	/^static int mem_close(hFILE *fpv)$/;"	f	file:
mem_seek	src/utils/htslib/hfile.c	/^static off_t mem_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
mempool_t	src/utils/htslib/sam.c	/^} mempool_t;$/;"	t	typeref:struct:__anon7	file:
mergeSort	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::mergeSort(RecordListNode **headRef) {$/;"	f	class:RecordList
merge_help	src/mergeFile/mergeHelp.cpp	/^void merge_help(void) {$/;"	f
merge_rows	src/utils/htslib/test/test-bcf-sr.pl	/^sub merge_rows$/;"	s
merge_vsets	src/utils/htslib/bcf_sr_sort.c	/^int merge_vsets(sr_sort_t *srt, int ivset, int jvset)$/;"	f
meta	src/utils/htslib/hts.c	/^    uint8_t *meta; \/\/ MUST have a terminating NUL on the end$/;"	m	struct:__hts_idx_t	file:
meta_char	src/utils/htslib/htslib/tbx.h	/^    int32_t meta_char, line_skip;$/;"	m	struct:__anon36
method	src/utils/htslib/cram/cram_structs.h	/^    enum cram_block_method  method, orig_method;$/;"	m	struct:cram_block	typeref:enum:cram_block::cram_block_method
method	src/utils/htslib/cram/cram_structs.h	/^    int method;$/;"	m	struct:__anon82
metrics_lock	src/utils/htslib/cram/cram_structs.h	/^    pthread_mutex_t metrics_lock;$/;"	m	struct:cram_fd
mf	src/utils/htslib/cram/cram_structs.h	/^    mFILE *mf;$/;"	m	struct:ref_entry
mfascii	src/utils/htslib/cram/mFILE.c	/^void mfascii(mFILE *mf) {$/;"	f
mfclose	src/utils/htslib/cram/mFILE.c	/^int mfclose(mFILE *mf) {$/;"	f
mfcreate	src/utils/htslib/cram/mFILE.c	/^mFILE *mfcreate(char *data, int size) {$/;"	f
mfcreate_from	src/utils/htslib/cram/mFILE.c	/^mFILE *mfcreate_from(const char *path, const char *mode_str, FILE *fp) {$/;"	f
mfdestroy	src/utils/htslib/cram/mFILE.c	/^int mfdestroy(mFILE *mf) {$/;"	f
mfdetach	src/utils/htslib/cram/mFILE.c	/^int mfdetach(mFILE *mf) {$/;"	f
mfeof	src/utils/htslib/cram/mFILE.c	/^int mfeof(mFILE *mf) {$/;"	f
mfflush	src/utils/htslib/cram/mFILE.c	/^int mfflush(mFILE *mf) {$/;"	f
mfgetc	src/utils/htslib/cram/mFILE.c	/^int mfgetc(mFILE *mf) {$/;"	f
mfgets	src/utils/htslib/cram/mFILE.c	/^char *mfgets(char *s, int size, mFILE *mf) {$/;"	f
mfload	src/utils/htslib/cram/mFILE.c	/^static char *mfload(FILE *fp, const char *fn, size_t *size, int binary) {$/;"	f	file:
mfmmap	src/utils/htslib/cram/mFILE.c	/^int mfmmap(mFILE *mf, FILE *fp, const char *fn) {$/;"	f
mfopen	src/utils/htslib/cram/mFILE.c	/^mFILE *mfopen(const char *path, const char *mode) {$/;"	f
mfread	src/utils/htslib/cram/mFILE.c	/^size_t mfread(void *ptr, size_t size, size_t nmemb, mFILE *mf) {$/;"	f
mfrecreate	src/utils/htslib/cram/mFILE.c	/^void mfrecreate(mFILE *mf, char *data, int size) {$/;"	f
mfreopen	src/utils/htslib/cram/mFILE.c	/^mFILE *mfreopen(const char *path, const char *mode_str, FILE *fp) {$/;"	f
mfseek	src/utils/htslib/cram/mFILE.c	/^int mfseek(mFILE *mf, long offset, int whence) {$/;"	f
mfsteal	src/utils/htslib/cram/mFILE.c	/^void *mfsteal(mFILE *mf, size_t *size_out) {$/;"	f
mftell	src/utils/htslib/cram/mFILE.c	/^long mftell(mFILE *mf) {$/;"	f
mftruncate	src/utils/htslib/cram/mFILE.c	/^void mftruncate(mFILE *mf, long offset) {$/;"	f
mfwrite	src/utils/htslib/cram/mFILE.c	/^size_t mfwrite(void *ptr, size_t size, size_t nmemb, mFILE *mf) {$/;"	f
mgrp	src/utils/htslib/bcf_sr_sort.h	/^    int ngrp, mgrp;$/;"	m	struct:__anon120
midx	src/utils/htslib/vcf_sweep.c	/^    int iidx, nidx, midx;   \/\/ i: current offset; n: used; m: allocated$/;"	m	struct:_bcf_sweep_t	file:
min	src/utils/htslib/sam.c	/^    uint64_t min, *pos;$/;"	m	struct:__bam_mplp_t	file:
minOverlapStart	src/utils/bedFile/bedFile.h	/^    CHRPOS minOverlapStart;$/;"	m	struct:BEDCOV
minOverlapStarts	src/utils/bedFile/bedFile.h	/^    vector<CHRPOS> minOverlapStarts;$/;"	m	struct:BEDCOVLIST
min_shift	src/utils/htslib/hts.c	/^    int fmt, min_shift, n_lvls, n_bins;$/;"	m	struct:__hts_idx_t	file:
minor	src/utils/htslib/htslib/hts.h	/^    struct { short major, minor; } version;$/;"	m	struct:htsFormat::__anon10
minor_version	src/utils/htslib/cram/cram_io.c	/^static int minor_version = 0;$/;"	v	file:
minor_version	src/utils/htslib/cram/cram_structs.h	/^    uint8_t minor_version;$/;"	m	struct:cram_file_def
missed_reg_data	src/utils/htslib/htslib/synced_bcf_reader.h	/^    void *missed_reg_data;$/;"	m	struct:_bcf_sr_regions_t
missed_reg_handler	src/utils/htslib/htslib/synced_bcf_reader.h	/^    void (*missed_reg_handler)(struct _bcf_sr_regions_t *, void *);$/;"	m	struct:_bcf_sr_regions_t
mkdir	src/utils/htslib/cram/os.h	209;"	d
mkdir	src/utils/htslib/htslib/hts_os.h	50;"	d
mkdir_prefix	src/utils/htslib/cram/cram_io.c	/^void mkdir_prefix(char *path, int mode) {$/;"	f
mlals	src/utils/htslib/vcf_sweep.c	/^    int lrid, lpos, lnals, lals_len, mlals;   \/\/ to check uniqueness of a record$/;"	m	struct:_bcf_sweep_t	file:
mobile	src/utils/htslib/htslib/hfile.h	/^    unsigned at_eof:1, mobile:1, readonly:1;$/;"	m	struct:hFILE
mode	src/utils/gzstream/gzstream.h	/^    int              mode;               \/\/ I\/O mode$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
mode	src/utils/htslib/cram/cram_structs.h	/^    int            mode;     \/\/ 'r' or 'w'$/;"	m	struct:cram_fd
mode	src/utils/htslib/cram/mFILE.h	/^    int mode; \/* open mode in MF_?? define bit pattern *\/$/;"	m	struct:__anon60
mode	src/utils/htslib/hfile_s3.c	/^    char mode;$/;"	m	struct:__anon55	file:
mode	src/utils/htslib/htsfile.c	/^enum { identify, view_headers, view_all } mode = identify;$/;"	v	typeref:enum:__anon98
mode2level	src/utils/htslib/bgzf.c	/^static int mode2level(const char *mode)$/;"	f	file:
moff	src/utils/htslib/bcf_sr_sort.h	/^    int moff, noff, *off, mcharp;$/;"	m	struct:__anon120
moffs	src/utils/htslib/bgzf.c	/^    int noffs, moffs;       \/\/ the size of the index, n:used, m:allocated$/;"	m	struct:__bgzidx_t	file:
mp	src/utils/htslib/sam.c	/^    mempool_t *mp;$/;"	m	struct:__bam_plp_t	file:
mp_alloc	src/utils/htslib/sam.c	/^static inline lbnode_t *mp_alloc(mempool_t *mp)$/;"	f	file:
mp_destroy	src/utils/htslib/sam.c	/^static void mp_destroy(mempool_t *mp)$/;"	f	file:
mp_free	src/utils/htslib/sam.c	/^static inline void mp_free(mempool_t *mp, lbnode_t *p)$/;"	f	file:
mp_init	src/utils/htslib/sam.c	/^static mempool_t *mp_init(void)$/;"	f	file:
mpmat	src/utils/htslib/bcf_sr_sort.h	/^    int mpmat, *pmat;       \/\/ pairing matrix, i-th vset and j-th group accessible as i*ngrp+j$/;"	m	struct:__anon120
mpos	src/utils/htslib/htslib/sam.h	/^    int32_t mpos;$/;"	m	struct:__anon39
mqual	src/utils/htslib/cram/cram_structs.h	/^    int32_t mqual;        \/\/ MQ$/;"	m	struct:cram_record
mrec	src/utils/htslib/bcf_sr_sort.h	/^    int nrec, mrec;$/;"	m	struct:__anon116
mrec	src/utils/htslib/vcf_sweep.c	/^    int nrec, mrec;         \/\/ number of used records; total size of the buffer$/;"	m	struct:_bcf_sweep_t	file:
mregs	src/utils/htslib/regidx.c	/^    int nregs, mregs;   \/\/ n:used, m:alloced$/;"	m	struct:__anon43	file:
mregs	src/utils/htslib/synced_bcf_reader.c	/^    int nregs, mregs, creg;$/;"	m	struct:_region_t	file:
mrewind	src/utils/htslib/cram/mFILE.c	/^void mrewind(mFILE *mf) {$/;"	f
mseq	src/utils/htslib/regidx.c	/^    int nseq, mseq;     \/\/ n:used, m:alloced$/;"	m	struct:_regidx_t	file:
msr	src/utils/htslib/bcf_sr_sort.h	/^    int pos, nsr, msr;$/;"	m	struct:__anon120
mstderr	src/utils/htslib/cram/mFILE.c	/^mFILE *mstderr(void) {$/;"	f
mstdin	src/utils/htslib/cram/mFILE.c	/^mFILE *mstdin(void) {$/;"	f
mstdout	src/utils/htslib/cram/mFILE.c	/^mFILE *mstdout(void) {$/;"	f
mt	src/utils/htslib/htslib/bgzf.h	/^    struct bgzf_mtaux_t *mt; \/\/ only used for multi-threading$/;"	m	struct:BGZF	typeref:struct:BGZF::bgzf_mtaux_t
mt_destroy	src/utils/htslib/bgzf.c	/^static void mt_destroy(mtaux_t *mt)$/;"	f	file:
mt_flush_queue	src/utils/htslib/bgzf.c	/^static int mt_flush_queue(BGZF *fp)$/;"	f	file:
mt_queue	src/utils/htslib/bgzf.c	/^static int mt_queue(BGZF *fp)$/;"	f	file:
mt_rand	src/shuffleBed/shuffleBed.h	/^    mt19937 mt_rand;$/;"	m	class:BedShuffle
mtaux_cmd	src/utils/htslib/bgzf.c	/^enum mtaux_cmd {$/;"	g	file:
mtaux_t	src/utils/htslib/bgzf.c	/^} mtaux_t;$/;"	t	typeref:struct:bgzf_mtaux_t	file:
mtid	src/utils/htslib/htslib/sam.h	/^    int32_t mtid;$/;"	m	struct:__anon39
multi	src/utils/htslib/hfile_libcurl.c	/^    CURLM *multi;$/;"	m	struct:__anon102	file:
multiDbModeType	src/utils/Contexts/ContextClosest.h	/^    typedef enum { EACH_DB, ALL_DBS } multiDbModeType;$/;"	t	class:ContextClosest	typeref:enum:ContextClosest::__anon129
multiDbOutputHelp	src/utils/general/CommonHelp.cpp	/^void multiDbOutputHelp() {$/;"	f
multi_errno	src/utils/htslib/hfile_libcurl.c	/^static int multi_errno(CURLMcode errm)$/;"	f	file:
multi_is_exact	src/utils/htslib/bcf_sr_sort.c	/^static int multi_is_exact(var_t *avar, var_t *bvar)$/;"	f	file:
multi_is_exact	src/utils/htslib/test/test-bcf-sr.pl	/^sub multi_is_exact$/;"	s
multi_is_subset	src/utils/htslib/bcf_sr_sort.c	/^static int multi_is_subset(var_t *avar, var_t *bvar)$/;"	f	file:
multi_is_subset	src/utils/htslib/test/test-bcf-sr.pl	/^sub multi_is_subset$/;"	s
multi_seq	src/utils/htslib/cram/cram_structs.h	/^    int multi_seq;               \/\/ true if packing multi seqs per cont\/slice$/;"	m	struct:cram_container
multi_seq	src/utils/htslib/cram/cram_structs.h	/^    int multi_seq;$/;"	m	struct:cram_fd
multibamcov_help	src/multiBamCov/multiBamCovMain.cpp	/^void multibamcov_help(void) {$/;"	f
multibamcov_main	src/multiBamCov/multiBamCovMain.cpp	/^int multibamcov_main(int argc, char* argv[]) {$/;"	f
multiintersect_examples	src/multiIntersectBed/multiIntersectBedMain.cpp	/^void multiintersect_examples()$/;"	f
multiintersect_help	src/multiIntersectBed/multiIntersectBedMain.cpp	/^void multiintersect_help(void) {$/;"	f
multiintersect_main	src/multiIntersectBed/multiIntersectBedMain.cpp	/^int multiintersect_main(int argc, char* argv[])$/;"	f
multipart_backend	src/utils/htslib/multipart.c	/^static const struct hFILE_backend multipart_backend =$/;"	v	typeref:struct:hFILE_backend	file:
multipart_close	src/utils/htslib/multipart.c	/^static int multipart_close(hFILE *fpv)$/;"	f	file:
multipart_read	src/utils/htslib/multipart.c	/^static ssize_t multipart_read(hFILE *fpv, void *buffer, size_t nbytes)$/;"	f	file:
multipart_seek	src/utils/htslib/multipart.c	/^static off_t multipart_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
multipart_write	src/utils/htslib/multipart.c	/^static ssize_t multipart_write(hFILE *fpv, const void *buffer, size_t nbytes)$/;"	f	file:
mungetc	src/utils/htslib/cram/mFILE.c	/^int mungetc(int c, mFILE *mf) {$/;"	f
mvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ list of compatible variants that can be output together$/;"	m	struct:__anon119
mvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ the variants and their type$/;"	m	struct:__anon118
mvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar;$/;"	m	struct:__anon120
mvcf	src/utils/htslib/bcf_sr_sort.h	/^    int nvcf, mvcf, *vcf;   \/\/ the list of readers with the same variants$/;"	m	struct:__anon117
mvset	src/utils/htslib/bcf_sr_sort.h	/^    int nvset, mvset;$/;"	m	struct:__anon120
my_netread	src/utils/htslib/knetfile.c	/^static off_t my_netread(int fd, void *buf, off_t len)$/;"	f	file:
n	src/fisher/kfunc.h	/^    long long n11, n1_, n_1, n;$/;"	m	struct:__anon140
n	src/utils/htslib/hts.c	/^    int32_t m, n;$/;"	m	struct:__anon3	file:
n	src/utils/htslib/hts.c	/^    int32_t n, m;$/;"	m	struct:__anon4	file:
n	src/utils/htslib/hts.c	/^    int32_t n, m;$/;"	m	struct:__hts_idx_t	file:
n	src/utils/htslib/htslib/hts.h	/^        int n, m;$/;"	m	struct:__anon16::__anon17
n	src/utils/htslib/htslib/kbitset.h	/^	size_t n;$/;"	m	struct:kbitset_t
n	src/utils/htslib/htslib/regidx.h	/^    int i, n;$/;"	m	struct:__anon29
n	src/utils/htslib/htslib/vcf.h	/^    int n, size, type;  \/\/ n: number of values per-sample; size: number of bytes per-sample; type: one of BCF_BT_* types$/;"	m	struct:__anon23
n	src/utils/htslib/htslib/vcf.h	/^    int type, n;    \/\/ variant type and the number of bases affected, negative for deletions$/;"	m	struct:__anon22
n	src/utils/htslib/htslib/vcf.h	/^    int32_t n[3];           \/\/ n:the size of the dictionary block in use, (allocated size, m, is below to preserve ABI)$/;"	m	struct:__anon21
n	src/utils/htslib/kfunc.c	/^    int n11, n1_, n_1, n;$/;"	m	struct:__anon9	file:
n	src/utils/htslib/sam.c	/^    int cnt, n, max;$/;"	m	struct:__anon7	file:
n	src/utils/htslib/sam.c	/^    int n;$/;"	m	struct:__bam_mplp_t	file:
n	src/utils/htslib/thread_pool.c	/^    int n;$/;"	m	struct:__anon112	file:
n	src/utils/htslib/thread_pool.c	/^    int n;$/;"	m	struct:squareB_opt	file:
n11	src/fisher/kfunc.h	/^    long long n11, n1_, n_1, n;$/;"	m	struct:__anon140
n11	src/utils/htslib/kfunc.c	/^    int n11, n1_, n_1, n;$/;"	m	struct:__anon9	file:
n1_	src/fisher/kfunc.h	/^    long long n11, n1_, n_1, n;$/;"	m	struct:__anon140
n1_	src/utils/htslib/kfunc.c	/^    int n11, n1_, n_1, n;$/;"	m	struct:__anon9	file:
nA	test/fisher/sim.py	/^nA = 3000$/;"	v
nTL	src/utils/htslib/cram/cram_structs.h	/^    int nTL;		         \/\/ number of TL entries in TD$/;"	m	struct:cram_block_compression_hdr
nTN	src/utils/htslib/cram/cram_structs.h	/^    int           nTN, aTN;  \/\/ used and allocated size for TN[]$/;"	m	struct:cram_slice
n_1	src/fisher/kfunc.h	/^    long long n11, n1_, n_1, n;$/;"	m	struct:__anon140
n_1	src/utils/htslib/kfunc.c	/^    int n11, n1_, n_1, n;$/;"	m	struct:__anon9	file:
n_allele	src/utils/htslib/htslib/vcf.h	/^    uint32_t n_info:16, n_allele:16;$/;"	m	struct:__anon27
n_bins	src/utils/htslib/hts.c	/^    int fmt, min_shift, n_lvls, n_bins;$/;"	m	struct:__hts_idx_t	file:
n_cigar	src/utils/htslib/htslib/sam.h	/^    uint32_t n_cigar;$/;"	m	struct:__anon39
n_count	src/utils/htslib/thread_pool_internal.h	/^    int n_count, n_running;$/;"	m	struct:hts_tpool
n_flt	src/utils/htslib/htslib/vcf.h	/^    int n_flt;  \/\/ Number of FILTER fields$/;"	m	struct:__anon26
n_fmt	src/utils/htslib/htslib/vcf.h	/^    uint32_t n_fmt:8, n_sample:24;$/;"	m	struct:__anon27
n_info	src/utils/htslib/htslib/vcf.h	/^    uint32_t n_info:16, n_allele:16;$/;"	m	struct:__anon27
n_input	src/utils/htslib/thread_pool_internal.h	/^    int n_input;                     \/\/ no. items in input queue; was njobs$/;"	m	struct:hts_tpool_process
n_lvls	src/utils/htslib/hts.c	/^    int fmt, min_shift, n_lvls, n_bins;$/;"	m	struct:__hts_idx_t	file:
n_mapped	src/utils/htslib/hts.c	/^        uint64_t n_mapped, n_unmapped;$/;"	m	struct:__hts_idx_t::__anon5	file:
n_no_coor	src/utils/htslib/hts.c	/^    uint64_t n_no_coor;$/;"	m	struct:__hts_idx_t	file:
n_off	src/utils/htslib/htslib/hts.h	/^    int tid, beg, end, n_off, i;$/;"	m	struct:__anon16
n_output	src/utils/htslib/thread_pool_internal.h	/^    int n_output;                    \/\/ no. items in output queue$/;"	m	struct:hts_tpool_process
n_plp	src/utils/htslib/sam.c	/^    int *n_plp;$/;"	m	struct:__bam_mplp_t	file:
n_processing	src/utils/htslib/thread_pool_internal.h	/^    int n_processing;                \/\/ no. items being processed (executing)$/;"	m	struct:hts_tpool_process
n_running	src/utils/htslib/thread_pool_internal.h	/^    int n_count, n_running;$/;"	m	struct:hts_tpool
n_sample	src/utils/htslib/htslib/vcf.h	/^    uint32_t n_fmt:8, n_sample:24;$/;"	m	struct:__anon27
n_smpl	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int *samples, n_smpl;   \/\/ list of columns in the order consistent with bcf_srs_t.samples$/;"	m	struct:__anon31
n_smpl	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int n_smpl;$/;"	m	struct:__anon33
n_targets	src/utils/htslib/htslib/sam.h	/^    int32_t n_targets, ignore_sam_err;$/;"	m	struct:__anon38
n_threads	src/utils/htslib/bgzf.c	/^    int n_threads;$/;"	m	struct:bgzf_mtaux_t	file:
n_threads	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int n_threads;      \/\/ Simple multi-threaded decoding \/ encoding.$/;"	m	struct:__anon33
n_unmapped	src/utils/htslib/hts.c	/^        uint64_t n_mapped, n_unmapped;$/;"	m	struct:__hts_idx_t::__anon5	file:
n_var	src/utils/htslib/htslib/vcf.h	/^    int n_var, var_type;$/;"	m	struct:__anon26
nalloc	src/utils/htslib/cram/cram_structs.h	/^    int nslice, nalloc;   \/\/ total number of slices$/;"	m	struct:cram_index
nals	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nals, mals;         \/\/ number of set alleles and the size of allocated array$/;"	m	struct:_bcf_sr_regions_t
nalt	src/utils/htslib/bcf_sr_sort.h	/^    int nalt;       \/\/ number of alternate alleles in this record$/;"	m	struct:__anon117
name	src/utils/BamTools/mapping/BamAlignment.py	/^    def name(self):$/;"	m	class:ReadOnlyPropertyMapping
name	src/utils/BamTools/mapping/BamAlignment.py	/^    def name(self):$/;"	m	class:SimplePropertyMapping
name	src/utils/Fasta/Fasta.h	/^        string name;  \/\/ sequence name$/;"	m	class:FastaIndexEntry
name	src/utils/bedFile/bedFile.h	/^    string name;$/;"	m	struct:BED
name	src/utils/bedFile/bedFile.h	/^    string name;$/;"	m	struct:BEDCOV
name	src/utils/bedFile/bedFile.h	/^    string name;$/;"	m	struct:BEDCOVLIST
name	src/utils/bedFilePE/bedFilePE.h	/^    string name;$/;"	m	struct:BEDPE
name	src/utils/htslib/cram/cram_structs.h	/^    char *name;$/;"	m	struct:ref_entry
name	src/utils/htslib/cram/cram_structs.h	/^    int32_t name;         \/\/ RN; idx to s->names_blk$/;"	m	struct:cram_record
name	src/utils/htslib/cram/sam_header.h	/^    char *name;$/;"	m	struct:__anon64
name	src/utils/htslib/cram/sam_header.h	/^    char *name;$/;"	m	struct:__anon65
name	src/utils/htslib/cram/sam_header.h	/^    char *name;$/;"	m	struct:__anon66
name	src/utils/htslib/hfile_internal.h	/^    const char *name;$/;"	m	struct:hFILE_plugin
nameConventionWarning	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::nameConventionWarning(const Record *record, const string &filename, const string &message)$/;"	f	class:ContextBase
name_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *name_blk;$/;"	m	struct:cram_slice
name_len	src/utils/htslib/cram/cram_structs.h	/^    int32_t name_len;$/;"	m	struct:cram_record
name_len	src/utils/htslib/cram/sam_header.h	/^    int name_len;$/;"	m	struct:__anon65
name_len	src/utils/htslib/cram/sam_header.h	/^    int name_len;$/;"	m	struct:__anon66
naux_block	src/utils/htslib/cram/cram_structs.h	/^    int naux_block;$/;"	m	struct:cram_slice
nbases	src/split/splitBed.cpp	/^		double nbases;$/;"	m	class:BedSplitItems	file:
nbases	src/split/splitBed.cpp	/^        double nbases;$/;"	m	class:SimpleSplitInfo	file:
nbits	src/utils/htslib/cram/cram_codecs.h	/^    int32_t nbits;$/;"	m	struct:__anon73
nbuffer	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nbuffer, mbuffer;           \/\/ number of cached records (including the current record); number of allocated records$/;"	m	struct:__anon31
ncigar	src/utils/htslib/cram/cram_structs.h	/^    int32_t ncigar;$/;"	m	struct:cram_record
ncigar	src/utils/htslib/cram/cram_structs.h	/^    uint32_t   ncigar;$/;"	m	struct:cram_slice
ncodes	src/utils/htslib/cram/cram_codecs.h	/^    int ncodes;$/;"	m	struct:__anon71
needsFlush	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	bool needsFlush() const {$/;"	f	class:RecordOutputMgr
needsMoreData	src/utils/fileType/FileRecordTypeChecker.h	/^	bool needsMoreData() const { return _insufficientData; }$/;"	f	class:FileRecordTypeChecker
nek_sandbox1_main	src/nekSandbox1/nekSandboxMain.cpp	/^int nek_sandbox1_main(int argc, char **argv) {$/;"	f
nek_sandbox1_main	src/nekSandbox1/nekSandboxMain.cpp	/^int nek_sandbox1_main(int argc,char** argv)$/;"	f
net_backend	src/utils/htslib/hfile_net.c	/^static const struct hFILE_backend net_backend =$/;"	v	typeref:struct:hFILE_backend	file:
net_close	src/utils/htslib/hfile_net.c	/^static int net_close(hFILE *fpv)$/;"	f	file:
net_exit	src/utils/htslib/hfile_net.c	/^static void net_exit(void)$/;"	f	file:
net_init	src/utils/htslib/hfile_net.c	/^static int net_init(void)$/;"	f	file:
net_inited	src/utils/htslib/hfile_net.c	/^static int net_inited = 0;$/;"	v	file:
net_read	src/utils/htslib/hfile_net.c	/^static ssize_t net_read(hFILE *fpv, void *buffer, size_t nbytes)$/;"	f	file:
net_seek	src/utils/htslib/hfile_net.c	/^static off_t net_seek(hFILE *fpv, off_t offset, int whence)$/;"	f	file:
netclose	src/utils/htslib/htslib/knetfile.h	37;"	d
netclose	src/utils/htslib/htslib/knetfile.h	42;"	d
netfp	src/utils/htslib/hfile_net.c	/^    knetFile *netfp;$/;"	m	struct:__anon44	file:
netread	src/utils/htslib/htslib/knetfile.h	35;"	d
netread	src/utils/htslib/htslib/knetfile.h	40;"	d
netwrite	src/utils/htslib/htslib/knetfile.h	36;"	d
netwrite	src/utils/htslib/htslib/knetfile.h	41;"	d
newObj	src/utils/general/FreeList.h	/^	T *newObj() {$/;"	f	class:FreeList
new_pool	src/utils/htslib/cram/pooled_alloc.c	/^static pool_t *new_pool(pool_alloc_t *p) {$/;"	f	file:
new_string_pool	src/utils/htslib/cram/string_alloc.c	/^static string_t *new_string_pool(string_alloc_t *a_str) {$/;"	f	file:
newline	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	void newline() { _outBuf.append("\\n"); }$/;"	f	class:RecordOutputMgr
next	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::const_iterator_type RecordKeyList::next()  {$/;"	f	class:RecordKeyList
next	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::iterator_type RecordKeyVector::next()  {$/;"	f	class:RecordKeyVector
next	src/utils/FileRecordTools/Records/RecordList.cpp	/^const RecordListNode *RecordList::next() {$/;"	f	class:RecordList
next	src/utils/FileRecordTools/Records/RecordList.h	/^	RecordListNode *next() { return _next; }$/;"	f	class:RecordListNode
next	src/utils/FileRecordTools/Records/RecordList.h	/^	const RecordListNode *next() const { return _next; }$/;"	f	class:RecordListNode
next	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void next() { _iter = _keyList->next(); }$/;"	f	class:KeyListOpsMethods
next	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::next(RecordKeyVector &retList) {$/;"	f	class:NewChromSweep
next	src/utils/general/BTlist.h	/^	BTlistNode<T> *next() { return _next; }$/;"	f	class:BTlistNode
next	src/utils/general/BTlist.h	/^	const BTlistNode<T> *next() const { return _next; }$/;"	f	class:BTlistNode
next	src/utils/general/BTlist.h	/^	const BTlistNode<T> *next() {$/;"	f	class:BTlist
next	src/utils/htslib/cram/cram_structs.h	/^    struct cram_map *next; \/\/ for noddy internal hash$/;"	m	struct:cram_map	typeref:struct:cram_map::cram_map
next	src/utils/htslib/cram/cram_structs.h	/^    struct spare_bams *next;$/;"	m	struct:spare_bams	typeref:struct:spare_bams::spare_bams
next	src/utils/htslib/cram/sam_header.h	/^    struct SAM_hdr_item_s *next; \/\/ cirular$/;"	m	struct:SAM_hdr_item_s	typeref:struct:SAM_hdr_item_s::SAM_hdr_item_s
next	src/utils/htslib/cram/sam_header.h	/^    struct SAM_hdr_tag_s *next;$/;"	m	struct:SAM_hdr_tag_s	typeref:struct:SAM_hdr_tag_s::SAM_hdr_tag_s
next	src/utils/htslib/hfile.c	/^    struct hFILE_plugin_list *next;$/;"	m	struct:hFILE_plugin_list	typeref:struct:hFILE_plugin_list::hFILE_plugin_list	file:
next	src/utils/htslib/htslib/hts.h	/^    struct hts_opt *next;$/;"	m	struct:hts_opt	typeref:struct:hts_opt::hts_opt
next	src/utils/htslib/sam.c	/^    struct __linkbuf_t *next;$/;"	m	struct:__linkbuf_t	typeref:struct:__linkbuf_t::__linkbuf_t	file:
next	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool_job *next;$/;"	m	struct:hts_tpool_job	typeref:struct:hts_tpool_job::hts_tpool_job
next	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool_process *next, *prev;\/\/ to form circular linked list.$/;"	m	struct:hts_tpool_process	typeref:struct:hts_tpool_process::hts_tpool_process
next	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool_result *next;$/;"	m	struct:hts_tpool_result	typeref:struct:hts_tpool_result::hts_tpool_result
nextRecord	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::nextRecord(bool query, int dbIdx) {$/;"	f	class:NewChromSweep
nextSortedFind	src/intersectFile/intersectFile.cpp	/^bool IntersectFile::nextSortedFind(RecordKeyVector &hits)$/;"	f	class:IntersectFile
nextUnsortedFind	src/intersectFile/intersectFile.cpp	/^bool IntersectFile::nextUnsortedFind(RecordKeyVector &hits)$/;"	f	class:IntersectFile
next_power_2	src/utils/htslib/cram/pooled_alloc.c	/^static int next_power_2(unsigned int v) {$/;"	f	file:
next_serial	src/utils/htslib/thread_pool_internal.h	/^    uint64_t next_serial;            \/\/ next serial for output$/;"	m	struct:hts_tpool_process
next_trial	src/utils/htslib/cram/cram_structs.h	/^    int next_trial;$/;"	m	struct:__anon82
nfailures	src/utils/htslib/test/fieldarith.c	/^int nfailures = 0;$/;"	v
nfeature	src/utils/htslib/cram/cram_structs.h	/^    int32_t nfeature;     \/\/ number of features$/;"	m	struct:cram_record
nfeatures	src/utils/htslib/cram/cram_structs.h	/^    int           nfeatures;$/;"	m	struct:cram_slice
nfilter_ids	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nfilter_ids, *filter_ids;   \/\/ -1 for ".", otherwise filter id as returned by bcf_hdr_id2int$/;"	m	struct:__anon31
ngrp	src/utils/htslib/bcf_sr_sort.h	/^    int ngrp, mgrp;$/;"	m	struct:__anon120
nhrec	src/utils/htslib/htslib/vcf.h	/^    int nhrec, dirty;$/;"	m	struct:__anon21
nidx	src/utils/htslib/regidx.c	/^    int *idx, nidx;$/;"	m	struct:__anon43	file:
nidx	src/utils/htslib/vcf_sweep.c	/^    int iidx, nidx, midx;   \/\/ i: current offset; n: used; m: allocated$/;"	m	struct:_bcf_sweep_t	file:
njobs	src/utils/htslib/thread_pool_internal.h	/^    int njobs;    \/\/ how many total jobs are waiting in all queues$/;"	m	struct:hts_tpool
nkeys	src/utils/htslib/htslib/vcf.h	/^    int nkeys;              \/\/ Number of structured fields$/;"	m	struct:__anon18
no_compression	src/utils/htslib/htslib/hts.h	/^    no_compression, gzip, bgzf, custom,$/;"	e	enum:htsCompression
no_coverage_value	src/multiIntersectBed/multiIntersectBed.h	/^    std::string no_coverage_value;$/;"	m	class:MultiIntersectBed
no_coverage_value	src/unionBedGraphs/unionBedGraphs.h	/^    std::string no_coverage_value;$/;"	m	class:UnionBedGraphs
no_eof	src/utils/htslib/htslib/synced_bcf_reader.h	/^    header_error, no_eof, no_memory, vcf_parse_error, bcf_read_error$/;"	e	enum:__anon32
no_eof_block	src/utils/htslib/htslib/bgzf.h	/^    unsigned errcode:16, reserved:1, is_write:1, no_eof_block:1, is_be:1;$/;"	m	struct:BGZF
no_memory	src/utils/htslib/htslib/synced_bcf_reader.h	/^    header_error, no_eof, no_memory, vcf_parse_error, bcf_read_error$/;"	e	enum:__anon32
no_reconnect	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
no_ref	src/utils/htslib/cram/cram_structs.h	/^    int no_ref;$/;"	m	struct:cram_fd
noff	src/utils/htslib/bcf_sr_sort.h	/^    int moff, noff, *off, mcharp;$/;"	m	struct:__anon120
noffs	src/utils/htslib/bgzf.c	/^    int noffs, moffs;       \/\/ the size of the index, n:used, m:allocated$/;"	m	struct:__bgzidx_t	file:
nonNumErrFlagSet	src/utils/KeyListOps/KeyListOpsMethods.h	/^    bool nonNumErrFlagSet() const { return _nonNumErrFlag; }$/;"	f	class:KeyListOpsMethods
none_processing_c	src/utils/htslib/thread_pool_internal.h	/^    pthread_cond_t none_processing_c;\/\/ n_processing has hit zero$/;"	m	struct:hts_tpool_process
not_bgzf	src/utils/htslib/htslib/synced_bcf_reader.h	/^    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,$/;"	e	enum:__anon32
nparts	src/utils/htslib/multipart.c	/^    size_t nparts, maxparts, current;$/;"	m	struct:__anon106	file:
npg	src/utils/htslib/cram/sam_header.h	/^    int npg;                  \/\/!< Number of \\@PG lines$/;"	m	struct:__anon67
npg_end	src/utils/htslib/cram/sam_header.h	/^    int npg_end;              \/\/!< Number of terminating \\@PG lines$/;"	m	struct:__anon67
npg_end_alloc	src/utils/htslib/cram/sam_header.h	/^    int npg_end_alloc;        \/\/!< Size of pg_end field$/;"	m	struct:__anon67
npools	src/utils/htslib/cram/pooled_alloc.h	/^    size_t npools;$/;"	m	struct:__anon57
nreaders	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nreaders;$/;"	m	struct:__anon33
nrec	src/utils/htslib/bcf_sr_sort.h	/^    int nrec, mrec;$/;"	m	struct:__anon116
nrec	src/utils/htslib/vcf_sweep.c	/^    int nrec, mrec;         \/\/ number of used records; total size of the buffer$/;"	m	struct:_bcf_sweep_t	file:
nref	src/utils/htslib/cram/cram_structs.h	/^    int nref;              \/\/ number of ref_entry$/;"	m	struct:__anon95
nref	src/utils/htslib/cram/sam_header.h	/^    int nref;                 \/\/!< Number of \\@SQ lines$/;"	m	struct:__anon67
nregs	src/utils/htslib/regidx.c	/^    int nregs, mregs;   \/\/ n:used, m:alloced$/;"	m	struct:__anon43	file:
nregs	src/utils/htslib/synced_bcf_reader.c	/^    int nregs, mregs, creg;$/;"	m	struct:_region_t	file:
nrg	src/utils/htslib/cram/sam_header.h	/^    int nrg;                  \/\/!< Number of \\@RG lines$/;"	m	struct:__anon67
nrunning	src/utils/htslib/hfile_libcurl.c	/^    int nrunning;$/;"	m	struct:__anon102	file:
nsamp	src/utils/htslib/cram/cram_structs.h	/^    int nsamp; \/\/ total number of values added$/;"	m	struct:cram_stats
nsamples_ori	src/utils/htslib/htslib/vcf.h	/^    int nsamples_ori;           \/\/ for bcf_hdr_set_samples()$/;"	m	struct:__anon21
nseq	src/utils/htslib/cram/cram_structs.h	/^    int     nseq;   \/\/ 1.0 - undocumented$/;"	m	struct:cram_index
nseq	src/utils/htslib/regidx.c	/^    int nseq, mseq;     \/\/ n:used, m:alloced$/;"	m	struct:_regidx_t	file:
nseqs	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int nseqs;              \/\/ number of sequences (chromosomes) in the file$/;"	m	struct:_bcf_sr_regions_t
nslice	src/utils/htslib/cram/cram_structs.h	/^    int nslice, nalloc;   \/\/ total number of slices$/;"	m	struct:cram_index
nsr	src/utils/htslib/bcf_sr_sort.h	/^    int pos, nsr, msr;$/;"	m	struct:__anon120
nstrings	src/utils/htslib/cram/string_alloc.h	/^    size_t nstrings;$/;"	m	struct:__anon63
ntags	src/utils/htslib/cram/cram_structs.h	/^    int32_t ntags;        \/\/ TC$/;"	m	struct:cram_record
ntests	src/utils/htslib/test/fieldarith.c	/^int ntests = 0;$/;"	v
ntransl	src/utils/htslib/htslib/vcf.h	/^    int ntransl, *transl[2];    \/\/ for bcf_translate()$/;"	m	struct:__anon21
nuc_help	src/nucBed/nucBedMain.cpp	/^void nuc_help(void) {$/;"	f
nuc_main	src/nucBed/nucBedMain.cpp	/^int nuc_main(int argc, char* argv[]) {$/;"	f
null	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::null(bool queryType, bool dbType)$/;"	f	class:RecordOutputMgr
num	src/utils/htslib/hfile_libcurl.c	/^    unsigned int num;$/;"	m	struct:__anon100	file:
numFixedFields	src/utils/FileRecordTools/Records/VcfRecord.h	/^	static const int numFixedFields = 6;$/;"	m	class:VcfRecord
num_bases	src/utils/htslib/cram/cram_structs.h	/^    int64_t  num_bases;$/;"	m	struct:cram_container
num_blocks	src/utils/htslib/cram/cram_structs.h	/^    int32_t  num_blocks;$/;"	m	struct:cram_container
num_blocks	src/utils/htslib/cram/cram_structs.h	/^    int32_t num_blocks;$/;"	m	struct:cram_block_slice_hdr
num_chuncks	src/split/splitBed.h	/^    unsigned int num_chuncks;$/;"	m	class:BedSplit
num_content_ids	src/utils/htslib/cram/cram_structs.h	/^    int32_t num_content_ids;$/;"	m	struct:cram_block_slice_hdr
num_landmarks	src/utils/htslib/cram/cram_structs.h	/^    int32_t  num_landmarks;$/;"	m	struct:cram_container
num_landmarks	src/utils/htslib/cram/cram_structs.h	/^    int32_t num_landmarks;$/;"	m	struct:cram_block_compression_hdr
num_records	src/utils/htslib/cram/cram_structs.h	/^    int32_t  num_records;$/;"	m	struct:cram_container
num_records	src/utils/htslib/cram/cram_structs.h	/^    int32_t num_records;$/;"	m	struct:cram_block_compression_hdr
num_records	src/utils/htslib/cram/cram_structs.h	/^    int32_t num_records;$/;"	m	struct:cram_block_slice_hdr
nvals	src/utils/htslib/cram/cram_codecs.h	/^    int nvals;$/;"	m	struct:__anon72
nvals	src/utils/htslib/cram/cram_structs.h	/^    int nvals; \/\/ total number of unique values added$/;"	m	struct:cram_stats
nvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ list of compatible variants that can be output together$/;"	m	struct:__anon119
nvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ the variants and their type$/;"	m	struct:__anon118
nvar	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar;$/;"	m	struct:__anon120
nvcf	src/utils/htslib/bcf_sr_sort.h	/^    int nvcf, mvcf, *vcf;   \/\/ the list of readers with the same variants$/;"	m	struct:__anon117
nvcf	src/utils/htslib/bcf_sr_sort.h	/^    int nvcf;               \/\/ number of readers with the same variants$/;"	m	struct:__anon118
nvset	src/utils/htslib/bcf_sr_sort.h	/^    int nvset, mvset;$/;"	m	struct:__anon120
nwaiting	src/utils/htslib/thread_pool_internal.h	/^    int nwaiting; \/\/ how many workers waiting for new jobs$/;"	m	struct:hts_tpool
o	src/utils/htslib/thread_pool.c	/^    pipe_opt *o;$/;"	m	struct:__anon113	file:
obj	src/utils/htslib/hfile_internal.h	/^    void *obj;$/;"	m	struct:hFILE_plugin
off	src/utils/htslib/bcf_sr_sort.h	/^    int moff, noff, *off, mcharp;$/;"	m	struct:__anon120
off	src/utils/htslib/htslib/hts.h	/^    hts_pair64_t *off;$/;"	m	struct:__anon16
off_beg	src/utils/htslib/hts.c	/^        uint64_t off_beg, off_end;$/;"	m	struct:__hts_idx_t::__anon5	file:
off_end	src/utils/htslib/hts.c	/^        uint64_t off_beg, off_end;$/;"	m	struct:__hts_idx_t::__anon5	file:
off_type	src/nucBed/LargeFileSupport.h	/^typedef __int64_t off_type;$/;"	t
off_type	src/nucBed/LargeFileSupport.h	/^typedef off_t off_type;$/;"	t
off_type	src/utils/Fasta/LargeFileSupport.h	/^typedef __int64_t off_type;$/;"	t
off_type	src/utils/Fasta/LargeFileSupport.h	/^typedef off_t off_type;$/;"	t
offs	src/utils/htslib/bgzf.c	/^    bgzidx1_t *offs;        \/\/ offsets$/;"	m	struct:__bgzidx_t	file:
offset	src/utils/Fasta/Fasta.h	/^        long long offset;  \/\/ bytes offset of sequence from start of file$/;"	m	class:FastaIndexEntry
offset	src/utils/htslib/cram/cram_codecs.h	/^    int32_t offset;$/;"	m	struct:__anon73
offset	src/utils/htslib/cram/cram_codecs.h	/^    int32_t offset;$/;"	m	struct:__anon74
offset	src/utils/htslib/cram/cram_codecs.h	/^    int32_t offset;$/;"	m	struct:__anon75
offset	src/utils/htslib/cram/cram_structs.h	/^    int offset; \/* Offset into a single block of memory *\/$/;"	m	struct:cram_map
offset	src/utils/htslib/cram/cram_structs.h	/^    int64_t offset; \/\/ 1.0                 1.1$/;"	m	struct:cram_index
offset	src/utils/htslib/cram/cram_structs.h	/^    int64_t offset;$/;"	m	struct:ref_entry
offset	src/utils/htslib/cram/cram_structs.h	/^    size_t   offset;$/;"	m	struct:cram_container
offset	src/utils/htslib/cram/mFILE.h	/^    size_t offset;$/;"	m	struct:__anon60
offset	src/utils/htslib/faidx.c	/^    uint64_t offset;$/;"	m	struct:__anon114	file:
offset	src/utils/htslib/hts.c	/^    uint64_t *offset;$/;"	m	struct:__anon4	file:
offset	src/utils/htslib/htslib/hfile.h	/^    off_t offset;$/;"	m	struct:hFILE
offset	src/utils/htslib/htslib/knetfile.h	/^	int64_t offset;$/;"	m	struct:knetFile_s
offset	src/utils/htslib/vcf.c	/^    int key, max_m, size, offset;$/;"	m	struct:__anon52	file:
ofs_l	src/utils/BamTools/include/BamReader.hpp	/^			int ofs_l, ofs_r;$/;"	m	struct:BamTools::BamReader::_SamFile
ofs_r	src/utils/BamTools/include/BamReader.hpp	/^			int ofs_l, ofs_r;$/;"	m	struct:BamTools::BamReader::_SamFile
ogzstream	src/utils/gzstream/gzstream.h	/^    ogzstream( const char* name, int mode = std::ios::out)$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
ogzstream	src/utils/gzstream/gzstream.h	/^    ogzstream() : std::ostream( &buf) {}$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
ogzstream	src/utils/gzstream/gzstream.h	/^class ogzstream : public gzstreambase, public std::ostream {$/;"	c	namespace:GZSTREAM_NAMESPACE
olap_hash_t	src/utils/htslib/sam.c	/^typedef khash_t(olap_hash) olap_hash_t;$/;"	t	file:
ooc	src/utils/htslib/cram/cram_structs.h	/^    int ooc;                            \/\/ out of containers.$/;"	m	struct:cram_fd
open	src/utils/Fasta/Fasta.cpp	/^void FastaReference::open(string reffilename, bool usemmap, bool useFullHeader) {$/;"	f	class:FastaReference
open	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^bool BamFileReader::open()$/;"	f	class:BamFileReader
open	src/utils/FileRecordTools/FileReaders/FileReader.cpp	/^bool FileReader::open() {$/;"	f	class:FileReader
open	src/utils/FileRecordTools/FileRecordMgr.cpp	/^bool FileRecordMgr::open(bool inheader){$/;"	f	class:FileRecordMgr
open	src/utils/gzstream/gzstream.C	/^gzstreambuf* gzstreambuf::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
open	src/utils/gzstream/gzstream.C	/^void gzstreambase::open( const char* name, int open_mode) {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
open	src/utils/gzstream/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::in) {$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
open	src/utils/gzstream/gzstream.h	/^    void open( const char* name, int open_mode = std::ios::out) {$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
openFiles	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::openFiles() {$/;"	f	class:ContextBase
openGenomeFile	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::openGenomeFile(const BamTools::RefVector &refVector)$/;"	f	class:ContextBase
openGenomeFile	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::openGenomeFile(const string &genomeFilename)$/;"	f	class:ContextBase
open_failed	src/utils/htslib/htslib/synced_bcf_reader.h	/^    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,$/;"	e	enum:__anon32
open_nextdir	src/utils/htslib/plugin.c	/^static DIR *open_nextdir(struct hts_path_itr *itr)$/;"	f	file:
open_path_mfile	src/utils/htslib/cram/open_trace_file.c	/^mFILE *open_path_mfile(char *file, char *path, char *relative_to) {$/;"	f
opened	src/utils/gzstream/gzstream.h	/^    char             opened;             \/\/ open\/close state of stream$/;"	m	class:GZSTREAM_NAMESPACE::gzstreambuf
operator !=	src/utils/general/QuickString.cpp	/^bool string::operator != (const string &qs) const {$/;"	f	class:string
operator ()	src/utils/BamTools/include/BamAlignment.hpp	/^			bool operator ()(const std::string& tag, MakeValue make_value)$/;"	f	struct:BamTools::BamAlignment::_TagGetter
operator ()	src/utils/BamTools/include/BamAlignment.hpp	/^			bool operator()(const std::string tag, MakeValue make_value)$/;"	f	struct:BamTools::BamAlignment::_TagGetter
operator ()	src/utils/BamTools/include/BamAlignment.hpp	/^		void operator ()(const std::string filename, const bam1_t* bam, uint32_t size = 0, bool copy = true)$/;"	f	class:BamTools::BamAlignment
operator ()	src/utils/BamTools/include/BamReader.hpp	/^			bool operator()(const std::pair<_MetaData, bam1_t*>& left, const std::pair<_MetaData, bam1_t*>& right) $/;"	f	struct:BamTools::BamReader::_Comp
operator ()	src/utils/FileRecordTools/Records/Record.h	/^	bool operator()(const Record *rec1, const Record *rec2) const { return *rec1 < *rec2; }$/;"	f	class:RecordPtrSortAscFunctor
operator ()	src/utils/FileRecordTools/Records/Record.h	/^	bool operator()(const Record *rec1, const Record *rec2) const { return *rec1 > *rec2; }$/;"	f	class:RecordPtrSortDescFunctor
operator ()	src/utils/NewChromsweep/CloseSweep.h	/^	bool operator()(const distanceTuple & d1, const distanceTuple & d2) const {$/;"	f	class:DistanceTupleSortAscFunctor
operator ()	src/utils/VectorOps/VectorOps.cpp	/^    bool operator()( const vector< pair<int, string> >::value_type& lhs,$/;"	f	struct:ValueGreaterThan
operator ()	src/utils/VectorOps/VectorOps.cpp	/^    bool operator()( const vector< pair<int, string> >::value_type& lhs,$/;"	f	struct:ValueLessThan
operator ()	src/utils/bedFile/bedFile.cpp	/^    bool operator()(double const val, BED const& bed) const $/;"	f	struct:CompareByWeight
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (const char *inBuf)$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (const string & inBuf)$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (double num) {$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (float num) {$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (int num) {$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator += (uint32_t num) {$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator +=(char c) {$/;"	f	class:string
operator +=	src/utils/general/QuickString.cpp	/^string &string::operator +=(const string &inBuf)$/;"	f	class:string
operator <	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::operator < (const Record &other) const$/;"	f	class:Record
operator <	src/utils/Point/Point.h	/^      bool operator< ( const PointWithDepth& other ) const$/;"	f	class:PointWithDepth
operator <	src/utils/Point/Point.h	/^    bool operator< ( const Point& other ) const$/;"	f	class:Point
operator <	src/utils/general/QuickString.cpp	/^bool string::operator < (const string &qs) const {$/;"	f	class:string
operator <<	src/utils/Fasta/Fasta.cpp	/^ostream& operator<<(ostream& output, FastaIndex& fastaIndex) {$/;"	f
operator <<	src/utils/Fasta/Fasta.cpp	/^ostream& operator<<(ostream& output, const FastaIndexEntry& e) {$/;"	f
operator <<	src/utils/FileRecordTools/Records/Record.cpp	/^ostream &operator << (ostream &out, const Record &record)$/;"	f
operator <<	src/utils/bedGraphFile/bedGraphFile.h	/^std::ostream& operator<< (std::ostream& strm, const BEDGRAPH<T>& bg)$/;"	f
operator <<	src/utils/general/QuickString.cpp	/^ostream &operator << (ostream &out, const string &str) {$/;"	f
operator =	src/utils/BamTools/include/BamAlignment.hpp	/^		const BamAlignment& operator = (const BamAlignment& ba)$/;"	f	class:BamTools::BamAlignment
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int16_t& operator=(const int16_t& val) {$/;"	f	struct:_MapQuality_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_AlignmentFlag_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_InsertSize_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_Length_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_MatePosition_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_MateRefID_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_Position_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const int32_t& operator=(const int32_t& val) {$/;"	f	struct:_RefID_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const uint32_t& operator=(const uint32_t& val) {$/;"	f	struct:_Bin_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const uint32_t& operator=(const uint32_t& val) {$/;"	f	struct:_NumCigarOperations_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const uint32_t& operator=(const uint32_t& val) {$/;"	f	struct:_QueryNameLength_t
operator =	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    const uint32_t& operator=(const uint32_t& val) {$/;"	f	struct:_QuerySequenceLength_t
operator =	src/utils/FileRecordTools/Records/BamRecord.cpp	/^const BamRecord &BamRecord::operator=(const BamRecord &other)$/;"	f	class:BamRecord
operator =	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^const Bed12Interval &Bed12Interval::operator=(const Bed12Interval &other) {$/;"	f	class:Bed12Interval
operator =	src/utils/FileRecordTools/Records/Record.cpp	/^const Record &Record::operator=(const Record &other)$/;"	f	class:Record
operator =	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList &RecordKeyList::operator=(RecordKeyList &other)$/;"	f	class:RecordKeyList
operator =	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^const RecordKeyVector &RecordKeyVector::operator=(const RecordKeyVector &other)$/;"	f	class:RecordKeyVector
operator =	src/utils/FileRecordTools/Records/RecordList.cpp	/^RecordList &RecordList::operator=(const RecordList &other) {$/;"	f	class:RecordList
operator =	src/utils/general/BTlist.h	/^	const BTlist<T> &operator=(const BTlist<T> &other) {$/;"	f	class:BTlist
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (char val) {$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (const char *inBuf){$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (const string & inBuf){$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (double val) {$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (float val) {$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (int val) {$/;"	f	class:string
operator =	src/utils/general/QuickString.cpp	/^string &string::operator = (uint32_t val) {$/;"	f	class:string
operator ==	src/utils/general/QuickString.cpp	/^bool string::operator == (const char *str) const {$/;"	f	class:string
operator ==	src/utils/general/QuickString.cpp	/^bool string::operator == (const string &qs) const {$/;"	f	class:string
operator ==	src/utils/general/QuickString.cpp	/^bool string::operator == (const string &str) const {$/;"	f	class:string
operator >	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::operator > (const Record &other) const {$/;"	f	class:Record
operator >	src/utils/general/QuickString.cpp	/^bool string::operator > (const string &qs) const {$/;"	f	class:string
operator []	src/utils/general/QuickString.h	/^	char &operator [] (int pos) { return _buffer[pos]; }$/;"	f	class:string
operator []	src/utils/general/QuickString.h	/^	const char &operator [] (int pos) const { return _buffer[pos]; }$/;"	f	class:string
operator bool	src/utils/BamTools/include/BamAlignment.hpp	/^			operator bool() { return false; }$/;"	f	struct:BamTools::BamAlignment::_TagGetter
operator bool	src/utils/BamTools/include/BamAlignment.hpp	/^			operator bool() { return true; }$/;"	f	struct:BamTools::BamAlignment::_TagGetter
operator int16_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int16_t() const {return (int16_t)(_ptr()->core.qual);}$/;"	f	struct:_MapQuality_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.flag);}$/;"	f	struct:_AlignmentFlag_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.isize);}$/;"	f	struct:_InsertSize_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.l_qseq);}$/;"	f	struct:_Length_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.mpos);}$/;"	f	struct:_MatePosition_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.mtid);}$/;"	f	struct:_MateRefID_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.pos);}$/;"	f	struct:_Position_t
operator int32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator int32_t() const {return (int32_t)(_ptr()->core.tid);}$/;"	f	struct:_RefID_t
operator uint32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator uint32_t() const {return (uint32_t)(_ptr()->core.bin);}$/;"	f	struct:_Bin_t
operator uint32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator uint32_t() const {return (uint32_t)(_ptr()->core.l_qname);}$/;"	f	struct:_QueryNameLength_t
operator uint32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator uint32_t() const {return (uint32_t)(_ptr()->core.l_qseq);}$/;"	f	struct:_QuerySequenceLength_t
operator uint32_t	src/utils/BamTools/include/BamAlignment.mapping.hpp	/^    operator uint32_t() const {return (uint32_t)(_ptr()->core.n_cigar);}$/;"	f	struct:_NumCigarOperations_t
ops	src/utils/htslib/hfile.c	/^	hFILE_callback_ops ops;$/;"	m	struct:__anon110	file:
opt	src/utils/htslib/htslib/hts.h	/^    enum hts_fmt_option opt;  \/\/ tokenised key$/;"	m	struct:hts_opt	typeref:enum:hts_opt::hts_fmt_option
order	src/utils/htslib/cram/sam_header.h	/^    int order;                   \/\/ 0 upwards$/;"	m	struct:SAM_hdr_item_s
orig_method	src/utils/htslib/cram/cram_structs.h	/^    enum cram_block_method  method, orig_method;$/;"	m	struct:cram_block	typeref:enum:cram_block::
other_idxs	src/utils/bedFile/bedFile.h	/^    vector<uint16_t> other_idxs;$/;"	m	struct:BED
other_idxs	src/utils/bedFile/bedFile.h	/^    vector<uint16_t> other_idxs;$/;"	m	struct:BEDCOV
other_idxs	src/utils/bedFile/bedFile.h	/^    vector<uint16_t> other_idxs;$/;"	m	struct:BEDCOVLIST
other_idxs	src/utils/bedFilePE/bedFilePE.h	/^    vector<uint16_t> other_idxs;$/;"	m	struct:BEDPE
out	src/split/splitBed.cpp	/^        FILE* out;$/;"	m	class:SimpleSplitInfo	file:
out	src/utils/htslib/cram/cram_codecs.h	/^    cram_block *out;$/;"	m	struct:cram_codec
outPutLastRecordInPrevChrom	src/complementFile/complementFile.cpp	/^void ComplementFile::outPutLastRecordInPrevChrom()$/;"	f	class:ComplementFile
out_queue	src/utils/htslib/bgzf.c	/^    hts_tpool_process *out_queue;$/;"	m	struct:bgzf_mtaux_t	file:
outfileprefix	src/split/splitBed.h	/^    std::string outfileprefix;$/;"	m	class:BedSplit
output	src/multiIntersectBed/multiIntersectBed.h	/^    std::ostream    &output;$/;"	m	class:MultiIntersectBed
output	src/unionBedGraphs/unionBedGraphs.h	/^    std::ostream    &output;$/;"	m	class:UnionBedGraphs
output_avail_c	src/utils/htslib/thread_pool_internal.h	/^    pthread_cond_t output_avail_c;   \/\/ Signalled on each new output$/;"	m	struct:hts_tpool_process
output_head	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_result *output_head;   \/\/ output list$/;"	m	struct:hts_tpool_process
output_row	src/utils/htslib/test/test-bcf-sr.pl	/^sub output_row$/;"	s
output_tail	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_result *output_tail;$/;"	m	struct:hts_tpool_process
overflow	src/utils/gzstream/gzstream.C	/^int gzstreambuf::overflow( int c) { \/\/ used for output buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
overlap_push	src/utils/htslib/sam.c	/^static void overlap_push(bam_plp_t iter, lbnode_t *node)$/;"	f	file:
overlap_remove	src/utils/htslib/sam.c	/^static void overlap_remove(bam_plp_t iter, const bam1_t *b)$/;"	f	file:
overlaps	src/utils/bedFile/bedFile.h	/^int overlaps(CHRPOS aS, CHRPOS aE, CHRPOS bS, CHRPOS bE) {$/;"	f
overlaps	src/utils/htslib/sam.c	/^    olap_hash_t *overlaps;$/;"	m	struct:__bam_plp_t	file:
own_pool	src/utils/htslib/bgzf.c	/^    int own_pool;$/;"	m	struct:bgzf_mtaux_t	file:
own_pool	src/utils/htslib/cram/cram_structs.h	/^    int own_pool;$/;"	m	struct:cram_fd
p	src/fisher/kfunc.h	/^    double p;$/;"	m	struct:__anon140
p	src/utils/htslib/cram/cram_codecs.h	/^    int32_t p; \/\/ next code start value, minus index to codes[]$/;"	m	struct:__anon70
p	src/utils/htslib/cram/cram_structs.h	/^    char *p;$/;"	m	union:__anon81
p	src/utils/htslib/htslib/kstring.h	/^	const char *p; \/\/ end of the current token$/;"	m	struct:__anon34
p	src/utils/htslib/htslib/sam.h	/^    void *p;$/;"	m	union:__anon41
p	src/utils/htslib/htslib/synced_bcf_reader.h	/^    htsThreadPool *p;   \/\/ Our pool, but it can be used by others if needed.$/;"	m	struct:__anon33
p	src/utils/htslib/htslib/vcf.h	/^    uint8_t *p;         \/\/ same as vptr and vptr_* in bcf_info_t below$/;"	m	struct:__anon23
p	src/utils/htslib/kfunc.c	/^    double p;$/;"	m	struct:__anon9	file:
p	src/utils/htslib/thread_pool.c	/^    hts_tpool *p;$/;"	m	struct:__anon112	file:
p	src/utils/htslib/thread_pool.c	/^    hts_tpool *p;$/;"	m	struct:squareB_opt	file:
p	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool *p;             \/\/ thread pool$/;"	m	struct:hts_tpool_process	typeref:struct:hts_tpool_process::hts_tpool
p	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool *p;$/;"	m	struct:__anon8	typeref:struct:__anon8::hts_tpool
p	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool *p;$/;"	m	struct:hts_tpool_job	typeref:struct:hts_tpool_job::hts_tpool
p_free	src/utils/htslib/htslib/vcf.h	/^    uint32_t p_off:31, p_free:1;$/;"	m	struct:__anon23
p_len	src/utils/htslib/htslib/vcf.h	/^    uint32_t p_len;$/;"	m	struct:__anon23
p_off	src/utils/htslib/htslib/vcf.h	/^    uint32_t p_off:31, p_free:1;$/;"	m	struct:__anon23
packInt16	src/utils/htslib/bgzf.c	/^static inline void packInt16(uint8_t *buffer, uint16_t value)$/;"	f	file:
packInt32	src/utils/htslib/bgzf.c	/^static inline void packInt32(uint8_t *buffer, uint32_t value)$/;"	f	file:
pair	src/utils/htslib/bcf_sr_sort.h	/^    int pair;$/;"	m	struct:__anon120
pair	src/utils/htslib/cram/cram_structs.h	/^    khash_t(m_s2i) *pair[2];   \/\/ for identifying read-pairs in this slice.$/;"	m	struct:cram_slice
pair64_lt	src/utils/htslib/hts.c	1271;"	d	file:
pair_keys	src/utils/htslib/cram/cram_structs.h	/^    string_alloc_t *pair_keys; \/\/ Pooled keys for pair hash.$/;"	m	struct:cram_slice
pair_lines	src/utils/htslib/test/test-bcf-sr.pl	/^sub pair_lines$/;"	s
pairing_score	src/utils/htslib/bcf_sr_sort.c	/^int32_t pairing_score(sr_sort_t *srt, int ivset, int jvset)$/;"	f
pairing_score	src/utils/htslib/test/test-bcf-sr.pl	/^sub pairing_score$/;"	s
pairtobed_help	src/pairToBed/pairToBedMain.cpp	/^void pairtobed_help(void) {$/;"	f
pairtobed_main	src/pairToBed/pairToBedMain.cpp	/^int pairtobed_main(int argc, char* argv[]) {$/;"	f
pairtopair_help	src/pairToPair/pairToPairMain.cpp	/^void pairtopair_help(void) {$/;"	f
pairtopair_main	src/pairToPair/pairToPairMain.cpp	/^int pairtopair_main(int argc, char* argv[]) {$/;"	f
parse	src/utils/htslib/regidx.c	/^    regidx_parse_f parse;   \/\/ parse one input line$/;"	m	struct:_regidx_t	file:
parseBedLine	src/utils/bedFile/bedFile.h	/^    inline bool parseBedLine (T &bed, const vector<string> &fields) $/;"	f	class:BedFile
parseBedPELine	src/utils/bedFilePE/bedFilePE.cpp	/^bool BedFilePE::parseBedPELine (BEDPE &bed, const vector<string> &lineVector, const int &lineNum) {$/;"	f	class:BedFilePE
parseCmdArgs	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextBase
parseCmdArgs	src/utils/Contexts/ContextClosest.cpp	/^bool ContextClosest::parseCmdArgs(int argc, char **argv, int skipFirstArgs){$/;"	f	class:ContextClosest
parseCmdArgs	src/utils/Contexts/ContextCoverage.cpp	/^bool ContextCoverage::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextCoverage
parseCmdArgs	src/utils/Contexts/ContextFisher.cpp	/^bool ContextFisher::parseCmdArgs(int argc, char **argv, int skipFirstArgs)$/;"	f	class:ContextFisher
parseCmdArgs	src/utils/Contexts/ContextGroupBy.cpp	/^bool ContextGroupBy::parseCmdArgs(int argc, char **argv, int skipFirstArgs)$/;"	f	class:ContextGroupBy
parseCmdArgs	src/utils/Contexts/ContextIntersect.cpp	/^bool ContextIntersect::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextIntersect
parseCmdArgs	src/utils/Contexts/ContextJaccard.cpp	/^bool ContextJaccard::parseCmdArgs(int argc, char **argv, int skipFirstArgs)$/;"	f	class:ContextJaccard
parseCmdArgs	src/utils/Contexts/ContextMap.cpp	/^bool ContextMap::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextMap
parseCmdArgs	src/utils/Contexts/ContextMerge.cpp	/^bool ContextMerge::parseCmdArgs(int argc, char **argv, int skipFirstArgs)$/;"	f	class:ContextMerge
parseCmdArgs	src/utils/Contexts/ContextSample.cpp	/^bool ContextSample::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextSample
parseCmdArgs	src/utils/Contexts/ContextSpacing.cpp	/^bool ContextSpacing::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextSpacing
parseCmdArgs	src/utils/Contexts/ContextSubtract.cpp	/^bool ContextSubtract::parseCmdArgs(int argc, char **argv, int skipFirstArgs) {$/;"	f	class:ContextSubtract
parseConfigLines	src/regressTest/RegressTest.cpp	/^bool RegressTest::parseConfigLines(int numLinesToRead, bool correctnessFiles)$/;"	f	class:RegressTest
parseGffLine	src/utils/bedFile/bedFile.h	/^    inline bool parseGffLine (T &bed, const vector<string> &fields) $/;"	f	class:BedFile
parseIoBufSize	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::parseIoBufSize(string bufStr)$/;"	f	class:ContextBase
parseLine	src/utils/bedFile/bedFile.h	/^    inline BedLineStatus parseLine (T &bed, const vector<string> &fields) {$/;"	f	class:BedFile
parseLine	src/utils/bedFilePE/bedFilePE.cpp	/^BedLineStatus BedFilePE::parseLine (BEDPE &bedpe, const vector<string> &lineVector, int &lineNum) {$/;"	f	class:BedFilePE
parseLine	src/utils/bedGraphFile/bedGraphFile.h	/^    BedGraphLineStatus parseLine (BEDGRAPH<T> &bg, const vector<string> &lineVector, int &lineNum)$/;"	f	class:BedGraphFile
parseParams	src/regressTest/RegressTest.cpp	/^bool RegressTest::parseParams(int argc, char **argv)$/;"	f	class:RegressTest
parseTabLine	src/utils/tabFile/tabFile.h	/^    inline TabLineStatus parseTabLine (const vector<string> &lineVector, int &lineNum) {$/;"	f	class:TabFile
parseVcfLine	src/utils/bedFile/bedFile.h	/^    inline bool parseVcfLine (T &bed, const vector<string> &fields) $/;"	f	class:BedFile
parse_ga4gh_body_json	src/utils/htslib/multipart.c	/^parse_ga4gh_body_json(hFILE_multipart *fp, hFILE *json,$/;"	f	file:
parse_ga4gh_redirect_json	src/utils/htslib/multipart.c	/^parse_ga4gh_redirect_json(hFILE_multipart *fp, hFILE *json,$/;"	f	file:
parse_ini	src/utils/htslib/hfile_s3.c	/^static void parse_ini(const char *fname, const char *section, ...)$/;"	f	file:
parse_params	src/utils/htslib/test/test-bcf-sr.pl	/^sub parse_params$/;"	s
parse_params	src/utils/htslib/test/test.pl	/^sub parse_params$/;"	s
parse_regions	src/utils/htslib/tabix.c	/^static char **parse_regions(char *regions_fname, char **argv, int argc, int *nregs)$/;"	f	file:
parse_simple	src/utils/htslib/hfile_s3.c	/^static void parse_simple(const char *fname, kstring_t *id, kstring_t *secret)$/;"	f	file:
parse_va_list	src/utils/htslib/hfile_libcurl.c	/^static int parse_va_list(http_headers *headers, va_list args)$/;"	f	file:
parse_version	src/utils/htslib/hts.c	/^parse_version(htsFormat *fmt, const unsigned char *u, const unsigned char *ulim)$/;"	f	file:
parts	src/utils/htslib/multipart.c	/^    hfile_part *parts;$/;"	m	struct:__anon106	file:
passed	src/utils/htslib/test/test.pl	/^sub passed$/;"	s
passesBed12	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::passesBed12() {$/;"	f	class:FileRecordTypeChecker
passesBed5	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::passesBed5() {$/;"	f	class:FileRecordTypeChecker
passesBed6	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::passesBed6() {$/;"	f	class:FileRecordTypeChecker
pasv_ip	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
pasv_port	src/utils/htslib/htslib/knetfile.h	/^	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;$/;"	m	struct:knetFile_s
path	src/utils/htslib/hts_internal.h	/^    kstring_t path, entry;$/;"	m	struct:hts_path_itr
path	src/utils/htslib/htslib/knetfile.h	/^	char *path, *http_host;$/;"	m	struct:knetFile_s
pathdir	src/utils/htslib/hts_internal.h	/^    const char *pathdir, *prefix, *suffix;$/;"	m	struct:hts_path_itr
paused	src/utils/htslib/hfile_libcurl.c	/^    unsigned paused : 1;    \/\/ callback tells us that it has paused transfer$/;"	m	struct:__anon102	file:
payload	src/utils/htslib/htslib/regidx.h	/^    void *payload;$/;"	m	struct:__anon29
payload	src/utils/htslib/regidx.c	/^    void *payload;$/;"	m	struct:__anon43	file:
payload	src/utils/htslib/regidx.c	/^    void *payload;$/;"	m	struct:_regidx_t	file:
payload_size	src/utils/htslib/regidx.c	/^    int payload_size;$/;"	m	struct:_regidx_t	file:
pclose	src/utils/htslib/cram/os.h	199;"	d
pending_c	src/utils/htslib/thread_pool_internal.h	/^    pthread_cond_t  pending_c; \/\/ when waiting for a job$/;"	m	struct:__anon8
performTests	src/regressTest/RegressTest.cpp	/^bool RegressTest::performTests(bool isCorrectnessTest)$/;"	f	class:RegressTest
perform_again	src/utils/htslib/hfile_libcurl.c	/^    unsigned perform_again : 1;$/;"	m	struct:__anon102	file:
pg	src/utils/htslib/cram/sam_header.h	/^    SAM_PG *pg;		      \/\/!< Array of parsed \\@PG lines$/;"	m	struct:__anon67
pg_end	src/utils/htslib/cram/sam_header.h	/^    int *pg_end;              \/\/!< \\@PG chain termination IDs$/;"	m	struct:__anon67
pg_hash	src/utils/htslib/cram/sam_header.h	/^    khash_t(m_s2i) *pg_hash;  \/\/!< Maps PG ID field to pg[] index$/;"	m	struct:__anon67
pipe_input_thread	src/utils/htslib/thread_pool.c	/^static void *pipe_input_thread(void *arg) {$/;"	f	file:
pipe_job	src/utils/htslib/thread_pool.c	/^} pipe_job;$/;"	t	typeref:struct:__anon113	file:
pipe_opt	src/utils/htslib/thread_pool.c	/^} pipe_opt;$/;"	t	typeref:struct:__anon112	file:
pipe_output_thread	src/utils/htslib/thread_pool.c	/^static void *pipe_output_thread(void *arg) {$/;"	f	file:
pipe_stage1	src/utils/htslib/thread_pool.c	/^static void *pipe_stage1(void *arg) {$/;"	f	file:
pipe_stage1to2	src/utils/htslib/thread_pool.c	/^static void *pipe_stage1to2(void *arg) {$/;"	f	file:
pipe_stage2	src/utils/htslib/thread_pool.c	/^static void *pipe_stage2(void *arg) {$/;"	f	file:
pipe_stage2to3	src/utils/htslib/thread_pool.c	/^static void *pipe_stage2to3(void *arg) {$/;"	f	file:
pipe_stage3	src/utils/htslib/thread_pool.c	/^static void *pipe_stage3(void *arg) {$/;"	f	file:
pkgconfigdir	src/utils/htslib/Makefile	/^pkgconfigdir= $(libdir)\/pkgconfig$/;"	m
plp	src/utils/htslib/sam.c	/^    bam_pileup1_t *plp;$/;"	m	struct:__bam_plp_t	file:
plp	src/utils/htslib/sam.c	/^    const bam_pileup1_t **plp;$/;"	m	struct:__bam_mplp_t	file:
plp_construct	src/utils/htslib/sam.c	/^    int (*plp_construct)(void *data, const bam1_t *b, bam_pileup_cd *cd);$/;"	m	struct:__bam_plp_t	file:
plp_destruct	src/utils/htslib/sam.c	/^    int (*plp_destruct )(void *data, const bam1_t *b, bam_pileup_cd *cd);$/;"	m	struct:__bam_plp_t	file:
plugin	src/utils/htslib/hfile.c	/^    struct hFILE_plugin plugin;$/;"	m	struct:hFILE_plugin_list	typeref:struct:hFILE_plugin_list::hFILE_plugin	file:
plugin_sym	src/utils/htslib/plugin.c	/^void *plugin_sym(void *plugin, const char *name, const char **errmsg)$/;"	f
plugindir	src/utils/htslib/Makefile	/^plugindir =$/;"	m
plugins	src/utils/htslib/hfile.c	/^static struct hFILE_plugin_list *plugins = NULL;$/;"	v	typeref:struct:hFILE_plugin_list	file:
plugins_lock	src/utils/htslib/hfile.c	/^static pthread_mutex_t plugins_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
pmap_t	src/utils/htslib/cram/cram_structs.h	/^} pmap_t;$/;"	t	typeref:union:__anon81
pmat	src/utils/htslib/bcf_sr_sort.h	/^    int mpmat, *pmat;       \/\/ pairing matrix, i-th vset and j-th group accessible as i*ngrp+j$/;"	m	struct:__anon120
pool	src/utils/htslib/bgzf.c	/^    hts_tpool *pool;$/;"	m	struct:bgzf_mtaux_t	file:
pool	src/utils/htslib/cram/cram_structs.h	/^    hts_tpool *pool;$/;"	m	struct:cram_fd
pool	src/utils/htslib/cram/cram_structs.h	/^    string_alloc_t *pool;  \/\/ String pool for holding filenames and SN vals$/;"	m	struct:__anon95
pool	src/utils/htslib/cram/pooled_alloc.h	/^    void   *pool;$/;"	m	struct:__anon56
pool	src/utils/htslib/htslib/hts.h	/^    struct hts_tpool *pool; \/\/ The shared thread pool itself$/;"	m	struct:__anon13	typeref:struct:__anon13::hts_tpool
pool_alloc	src/utils/htslib/cram/pooled_alloc.c	/^void *pool_alloc(pool_alloc_t *p) {$/;"	f
pool_alloc_t	src/utils/htslib/cram/pooled_alloc.h	/^} pool_alloc_t;$/;"	t	typeref:struct:__anon57
pool_create	src/utils/htslib/cram/pooled_alloc.c	/^pool_alloc_t *pool_create(size_t dsize) {$/;"	f
pool_destroy	src/utils/htslib/cram/pooled_alloc.c	/^void pool_destroy(pool_alloc_t *p) {$/;"	f
pool_free	src/utils/htslib/cram/pooled_alloc.c	/^void pool_free(pool_alloc_t *p, void *ptr) {$/;"	f
pool_m	src/utils/htslib/thread_pool_internal.h	/^    pthread_mutex_t pool_m;$/;"	m	struct:hts_tpool
pool_t	src/utils/htslib/cram/pooled_alloc.h	/^} pool_t;$/;"	t	typeref:struct:__anon56
pools	src/utils/htslib/cram/pooled_alloc.h	/^    pool_t *pools;$/;"	m	struct:__anon57
pop	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^void StrandQueue::pop() {$/;"	f	class:StrandQueue
pop	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^void StrandQueue::pop(Record::strandType strand) {$/;"	f	class:StrandQueue
pop_front	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::pop_front() {$/;"	f	class:RecordList
pop_front	src/utils/general/BTlist.h	/^	void pop_front() {$/;"	f	class:BTlist
popen	src/utils/htslib/cram/os.h	198;"	d
populateScanBuffer	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^bool InputStreamMgr::populateScanBuffer()$/;"	f	class:InputStreamMgr
port	src/utils/htslib/htslib/knetfile.h	/^	char *host, *port;$/;"	m	struct:knetFile_s
pos	src/utils/htslib/bcf_sr_sort.h	/^    int pos, nsr, msr;$/;"	m	struct:__anon120
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon84
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon85
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon86
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon87
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon88
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon89
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon90
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon91
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon92
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon93
pos	src/utils/htslib/cram/cram_structs.h	/^	    int pos;$/;"	m	struct:cram_feature::__anon83::__anon94
pos	src/utils/htslib/htslib/sam.h	/^    int32_t pos;$/;"	m	struct:__anon39
pos	src/utils/htslib/htslib/vcf.h	/^    int32_t pos;  \/\/ POS$/;"	m	struct:__anon27
pos	src/utils/htslib/sam.c	/^    int32_t tid, pos, max_tid, max_pos;$/;"	m	struct:__bam_plp_t	file:
pos	src/utils/htslib/sam.c	/^    uint64_t min, *pos;$/;"	m	struct:__bam_mplp_t	file:
pos_sorted	src/utils/htslib/cram/cram_structs.h	/^    int pos_sorted;              \/\/ boolean, 1=>position sorted data$/;"	m	struct:cram_container
prefix	Makefile	/^prefix ?= \/usr\/local$/;"	m
prefix	src/utils/htslib/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/utils/htslib/cram/cram_structs.h	/^    char          *prefix;$/;"	m	struct:cram_fd
prefix	src/utils/htslib/hts_internal.h	/^    const char *pathdir, *prefix, *suffix;$/;"	m	struct:hts_path_itr
prefix_len	src/utils/htslib/hts_internal.h	/^    size_t prefix_len, suffix_len, entry_dir_l;$/;"	m	struct:hts_path_itr
preservation_map	src/utils/htslib/cram/cram_structs.h	/^    khash_t(map) *preservation_map;$/;"	m	struct:cram_block_compression_hdr
preset	src/utils/htslib/htslib/tbx.h	/^    int32_t preset;$/;"	m	struct:__anon36
prev	src/utils/htslib/cram/sam_header.h	/^    struct SAM_hdr_item_s *prev;$/;"	m	struct:SAM_hdr_item_s	typeref:struct:SAM_hdr_item_s::SAM_hdr_item_s
prev	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool_process *next, *prev;\/\/ to form circular linked list.$/;"	m	struct:hts_tpool_process	typeref:struct:hts_tpool_process::
prev_id	src/utils/htslib/cram/sam_header.h	/^    int prev_id;      \/\/ -1 if none$/;"	m	struct:__anon66
prev_seq	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int prev_seq, prev_start;$/;"	m	struct:_bcf_sr_regions_t
prev_start	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int prev_seq, prev_start;$/;"	m	struct:_bcf_sr_regions_t
print	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::print(string &outBuf, RecordKeyVector *keyList) const$/;"	f	class:BamRecord
print	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::print(string &outBuf, const string & start, const string & end, RecordKeyVector *keyList) const$/;"	f	class:BamRecord
print	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::print(string &outBuf, int start, int end, RecordKeyVector *keyList) const$/;"	f	class:BamRecord
print	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^void Bed12Interval::print(string &outBuf) const$/;"	f	class:Bed12Interval
print	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^void Bed12Interval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:Bed12Interval
print	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^void Bed12Interval::print(string &outBuf, int start, int end) const$/;"	f	class:Bed12Interval
print	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^void Bed3Interval::print(string &outBuf) const$/;"	f	class:Bed3Interval
print	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^void Bed3Interval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:Bed3Interval
print	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^void Bed3Interval::print(string &outBuf, int start, int end) const$/;"	f	class:Bed3Interval
print	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^void Bed4Interval::print(string &outBuf) const$/;"	f	class:Bed4Interval
print	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^void Bed4Interval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:Bed4Interval
print	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^void Bed4Interval::print(string &outBuf, int start, int end) const$/;"	f	class:Bed4Interval
print	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^void Bed5Interval::print(string &outBuf) const$/;"	f	class:Bed5Interval
print	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^void Bed5Interval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:Bed5Interval
print	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^void Bed5Interval::print(string &outBuf, int start, int end) const$/;"	f	class:Bed5Interval
print	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^void Bed6Interval::print(string &outBuf) const$/;"	f	class:Bed6Interval
print	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^void Bed6Interval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:Bed6Interval
print	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^void Bed6Interval::print(string &outBuf, int start, int end) const$/;"	f	class:Bed6Interval
print	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^void BedGraphInterval::print(string &outBuf) const$/;"	f	class:BedGraphInterval
print	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^void BedGraphInterval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:BedGraphInterval
print	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^void BedGraphInterval::print(string &outBuf, int start, int end) const$/;"	f	class:BedGraphInterval
print	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::print(string &outBuf) const$/;"	f	class:BedPlusInterval
print	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:BedPlusInterval
print	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::print(string &outBuf, int start, int end) const$/;"	f	class:BedPlusInterval
print	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^void GffPlusRecord::print(string &outBuf) const$/;"	f	class:GffPlusRecord
print	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^void GffPlusRecord::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:GffPlusRecord
print	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^void GffPlusRecord::print(string &outBuf, int start, int end) const$/;"	f	class:GffPlusRecord
print	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::print(string &outBuf) const$/;"	f	class:GffRecord
print	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::print(string &outBuf, const string & start, const string & end) const$/;"	f	class:GffRecord
print	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::print(string &outBuf, int start, int end) const$/;"	f	class:GffRecord
print	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^void NoPosPlusRecord::print(string &outBuf) const$/;"	f	class:NoPosPlusRecord
print	src/utils/FileRecordTools/Records/Record.cpp	/^void Record::print(FILE *fp, bool newline) const {$/;"	f	class:Record
print	src/utils/FileRecordTools/Records/Record.h	/^	virtual void print(string &) const {}$/;"	f	class:Record
print	src/utils/FileRecordTools/Records/Record.h	/^	virtual void print(string &, const string &, const string &) const {}$/;"	f	class:Record
print	src/utils/FileRecordTools/Records/Record.h	/^	virtual void print(string &, int, int ) const {}$/;"	f	class:Record
print	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::print(string &outBuf) const {$/;"	f	class:VcfRecord
print	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::print(string &outBuf, const string & start, const string & end) const {$/;"	f	class:VcfRecord
print	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::print(string &outBuf, int start, int end) const {$/;"	f	class:VcfRecord
printBamRecord	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^RecordOutputMgr::printBamType RecordOutputMgr::printBamRecord(RecordKeyVector &keyList, bool bamOutputOnly)$/;"	f	class:RecordOutputMgr
printBamType	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	typedef enum { NOT_BAM, BAM_AS_BAM, BAM_AS_BED} printBamType;$/;"	t	class:RecordOutputMgr	typeref:enum:RecordOutputMgr::__anon2
printBed6PlusFields	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::printBed6PlusFields(string &outBuf) const {$/;"	f	class:BedPlusInterval
printBed6PlusNullFields	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::printBed6PlusNullFields(string &outBuf) const {$/;"	f	class:BedPlusInterval
printClosest	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printClosest(RecordKeyVector &keyList, const vector<int> *dists) {$/;"	f	class:RecordOutputMgr
printFields	src/utils/FileRecordTools/Records/PlusFields.cpp	/^void PlusFields::printFields(string &outBuf) const {$/;"	f	class:PlusFields
printFullCols	src/utils/Contexts/ContextGroupBy.h	/^	bool printFullCols() const { return _printFullCols; }$/;"	f	class:ContextGroupBy
printKey	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printKey(const Record *key)$/;"	f	class:RecordOutputMgr
printKey	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printKey(const Record *key, const string & start, const string & end)$/;"	f	class:RecordOutputMgr
printKey	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printKey(const Record *key, int start, int end)$/;"	f	class:RecordOutputMgr
printKeyAndTerminate	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^bool RecordOutputMgr::printKeyAndTerminate(RecordKeyVector &keyList) {$/;"	f	class:RecordOutputMgr
printNull	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::printNull(string &outBuf) const$/;"	f	class:BamRecord
printNull	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^void Bed12Interval::printNull(string &outBuf) const$/;"	f	class:Bed12Interval
printNull	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^void Bed3Interval::printNull(string &outBuf) const {$/;"	f	class:Bed3Interval
printNull	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^void Bed4Interval::printNull(string &outBuf) const$/;"	f	class:Bed4Interval
printNull	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^void Bed5Interval::printNull(string &outBuf) const$/;"	f	class:Bed5Interval
printNull	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^void Bed6Interval::printNull(string &outBuf) const$/;"	f	class:Bed6Interval
printNull	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^void BedGraphInterval::printNull(string &outBuf) const$/;"	f	class:BedGraphInterval
printNull	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::printNull(string &outBuf) const$/;"	f	class:BedPlusInterval
printNull	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^void GffPlusRecord::printNull(string &outBuf) const$/;"	f	class:GffPlusRecord
printNull	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::printNull(string &outBuf) const$/;"	f	class:GffRecord
printNull	src/utils/FileRecordTools/Records/Record.h	/^	virtual void printNull(string &) const {}$/;"	f	class:Record
printNull	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::printNull(string &outBuf) const {$/;"	f	class:VcfRecord
printOtherFields	src/utils/FileRecordTools/Records/VcfRecord.cpp	/^void VcfRecord::printOtherFields(string &outBuf) const {$/;"	f	class:VcfRecord
printRecord	src/complementFile/complementFile.cpp	/^void ComplementFile::printRecord(int endPos)$/;"	f	class:ComplementFile
printRecord	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printRecord(Record *record)$/;"	f	class:RecordOutputMgr
printRecord	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printRecord(Record *record, const string & value)$/;"	f	class:RecordOutputMgr
printRecord	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printRecord(RecordKeyVector &keyList) {$/;"	f	class:RecordOutputMgr
printRecord	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::printRecord(RecordKeyVector &keyList, RecordKeyVector *blockList)$/;"	f	class:RecordOutputMgr
printRemainingBamFields	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::printRemainingBamFields(string &outBuf, RecordKeyVector *keyList) const$/;"	f	class:BamRecord
printRemainingFields	src/utils/FileRecordTools/Records/GffRecord.cpp	/^void GffRecord::printRemainingFields(string &outBuf) const$/;"	f	class:GffRecord
printUnmapped	src/utils/FileRecordTools/Records/BamRecord.cpp	/^void BamRecord::printUnmapped(string &outBuf) const {$/;"	f	class:BamRecord
printUnmapped	src/utils/FileRecordTools/Records/Record.h	/^	virtual void printUnmapped(string &) const {}$/;"	f	class:Record
print_empty_regions	src/multiIntersectBed/multiIntersectBed.h	/^    bool                     print_empty_regions;$/;"	m	class:MultiIntersectBed
print_empty_regions	src/unionBedGraphs/unionBedGraphs.h	/^    bool                     print_empty_regions;$/;"	m	class:UnionBedGraphs
print_header	src/utils/htslib/tabix.c	/^    int print_header, header_only;$/;"	m	struct:__anon99	file:
priority	src/utils/htslib/hfile.c	/^static inline int priority(const struct hFILE_scheme_handler *handler)$/;"	f	file:
priority	src/utils/htslib/hfile_internal.h	/^    int priority;$/;"	m	struct:hFILE_scheme_handler
probaln_glocal	src/utils/htslib/probaln.c	/^int probaln_glocal(const uint8_t *_ref, int l_ref, const uint8_t *_query, int l_query,$/;"	f
probaln_par_t	src/utils/htslib/htslib/hts.h	/^typedef struct probaln_par_t {$/;"	s
probaln_par_t	src/utils/htslib/htslib/hts.h	/^} probaln_par_t;$/;"	t	typeref:struct:probaln_par_t
processHits	src/closestFile/closestFile.cpp	/^void ClosestFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:ClosestFile
processHits	src/complementFile/complementFile.cpp	/^void ComplementFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:ComplementFile
processHits	src/coverageFile/coverageFile.cpp	/^void CoverageFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits) $/;"	f	class:CoverageFile
processHits	src/groupBy/groupBy.cpp	/^void GroupBy::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:GroupBy
processHits	src/intersectFile/intersectFile.cpp	/^void IntersectFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:IntersectFile
processHits	src/jaccard/jaccard.h	/^	virtual void processHits(RecordOutputMgr *, RecordKeyVector &) {}$/;"	f	class:Jaccard
processHits	src/mapFile/mapFile.cpp	/^void MapFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:MapFile
processHits	src/mergeFile/mergeFile.cpp	/^void MergeFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:MergeFile
processHits	src/sampleFile/sampleFile.h	/^	virtual void processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits) {}$/;"	f	class:SampleFile
processHits	src/spacingFile/spacingFile.cpp	/^void SpacingFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:SpacingFile
processHits	src/subtractFile/subtractFile.cpp	/^void SubtractFile::processHits(RecordOutputMgr *outputMgr, RecordKeyVector &hits)$/;"	f	class:SubtractFile
process_messages	src/utils/htslib/hfile_libcurl.c	/^static void process_messages(hFILE_libcurl *fp)$/;"	f	file:
process_one_read	src/utils/htslib/cram/cram_encode.c	/^static int process_one_read(cram_fd *fd, cram_container *c,$/;"	f	file:
project	docs/conf.py	/^project = u'bedtools'$/;"	v
projectOnGenome	src/utils/GenomeFile/GenomeFile.cpp	/^pair<string, uint32_t> GenomeFile::projectOnGenome(uint32_t genome_pos) {$/;"	f	class:GenomeFile
projectOnGenome	src/utils/GenomeFile/NewGenomeFile.cpp	/^bool NewGenomeFile::projectOnGenome(CHRPOS genome_pos, string &chrom, CHRPOS &start) {$/;"	f	class:NewGenomeFile
props	src/utils/BamTools/mapping/BamAlignment.py	/^props = {}$/;"	v
provider	src/utils/htslib/hfile_internal.h	/^    const char *provider;$/;"	m	struct:hFILE_scheme_handler
psize	src/utils/htslib/cram/pooled_alloc.h	/^    size_t psize;$/;"	m	struct:__anon57
ptr	src/utils/htslib/hfile_libcurl.c	/^        union { char *rd; const char *wr; } ptr;$/;"	m	struct:__anon102::__anon103	typeref:union:__anon102::__anon103::__anon104	file:
purgeDirectionType	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { NEITHER, FORWARD_ONLY, REVERSE_ONLY, BOTH } purgeDirectionType;$/;"	t	class:CloseSweep	typeref:enum:CloseSweep::__anon137
purgePointException	src/utils/NewChromsweep/CloseSweep.cpp	/^CloseSweep::purgeDirectionType CloseSweep::purgePointException() {$/;"	f	class:CloseSweep
push	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^void StrandQueue::push(Record *record) {$/;"	f	class:StrandQueue
pushBack	src/utils/general/PushBackStreamBuf.cpp	/^void PushBackStreamBuf::pushBack(const BTlist<int> &newBuf)$/;"	f	class:PushBackStreamBuf
push_back	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^void RecordKeyList::push_back(elemType item) {$/;"	f	class:RecordKeyList
push_back	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::push_back(elemType item) {$/;"	f	class:RecordKeyVector
push_back	src/utils/FileRecordTools/Records/RecordList.cpp	/^void RecordList::push_back(Record * &val) {$/;"	f	class:RecordList
push_back	src/utils/general/BTlist.h	/^	void push_back(const T &val) {$/;"	f	class:BTlist
push_digit	src/utils/htslib/hts.c	/^static inline long long push_digit(long long i, char c)$/;"	f	file:
push_vset	src/utils/htslib/bcf_sr_sort.c	/^void push_vset(sr_sort_t *srt, int ivset)$/;"	f
pygments_style	docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
q	src/utils/htslib/thread_pool.c	/^    hts_tpool_process *q;$/;"	m	struct:squareB_opt	file:
q	src/utils/htslib/thread_pool_internal.h	/^    struct hts_tpool_process *q;$/;"	m	struct:hts_tpool_job	typeref:struct:hts_tpool_job::hts_tpool_process
q1	src/utils/htslib/thread_pool.c	/^    hts_tpool_process *q1;$/;"	m	struct:__anon112	file:
q2	src/utils/htslib/thread_pool.c	/^    hts_tpool_process *q2;$/;"	m	struct:__anon112	file:
q3	src/utils/htslib/thread_pool.c	/^    hts_tpool_process *q3;$/;"	m	struct:__anon112	file:
q_head	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_process *q_head;$/;"	m	struct:hts_tpool
qpos	src/utils/htslib/htslib/sam.h	/^    int32_t qpos;$/;"	m	struct:__anon42
qs_included	src/utils/htslib/cram/cram_structs.h	/^    int qs_included;$/;"	m	struct:cram_block_compression_hdr
qsize	src/utils/htslib/htslib/hts.h	/^    int qsize;    \/\/ Size of I\/O queue to use for this fp$/;"	m	struct:__anon13
qsize	src/utils/htslib/thread_pool_internal.h	/^    int qsize;                       \/\/ max size of i\/o queues$/;"	m	struct:hts_tpool_process
qual	src/utils/htslib/cram/cram_structs.h	/^	    int qual;$/;"	m	struct:cram_feature::__anon83::__anon85
qual	src/utils/htslib/cram/cram_structs.h	/^	    int qual;$/;"	m	struct:cram_feature::__anon83::__anon87
qual	src/utils/htslib/cram/cram_structs.h	/^    int32_t qual;         \/\/ idx to s->qual_blk$/;"	m	struct:cram_record
qual	src/utils/htslib/htslib/sam.h	/^    uint8_t qual;$/;"	m	struct:__anon39
qual	src/utils/htslib/htslib/vcf.h	/^    float qual;   \/\/ QUAL$/;"	m	struct:__anon27
qual_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *qual_blk;$/;"	m	struct:cram_slice
queryChromAfterDbRec	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::queryChromAfterDbRec(const Record *dbRec)$/;"	f	class:NewChromSweep
query_chroms	src/utils/htslib/tabix.c	/^static int query_chroms(char *fname)$/;"	f	file:
query_regions	src/utils/htslib/tabix.c	/^static int query_regions(args_t *args, char *fname, char **regs, int nregs)$/;"	f	file:
queue	src/multiIntersectBed/multiIntersectBed.h	/^    POINT_PQUEUE queue;$/;"	m	class:MultiIntersectBed
queue	src/unionBedGraphs/unionBedGraphs.h	/^    POINTWITHDEPTH_PQUEUE queue;$/;"	m	class:UnionBedGraphs
queueType	src/utils/FileRecordTools/Records/StrandQueue.h	/^	typedef priority_queue<Record *, vector<Record *>, RecordPtrSortDescFunctor > queueType;$/;"	t	class:StrandQueue
random	src/utils/htslib/htslib/hts_os.h	56;"	d
random_alt	src/utils/htslib/test/test-bcf-sr.pl	/^sub random_alt$/;"	s
random_help	src/randomBed/randomBedMain.cpp	/^void random_help(void) {$/;"	f
random_main	src/randomBed/randomBedMain.cpp	/^int random_main(int argc, char* argv[]) {$/;"	f
range	src/utils/htslib/cram/cram_structs.h	/^    cram_range range;$/;"	m	struct:cram_fd
rans0_cnt	src/utils/htslib/cram/cram_structs.h	/^    int rans0_cnt;$/;"	m	struct:__anon82
rans0_extra	src/utils/htslib/cram/cram_structs.h	/^    double rans0_extra;$/;"	m	struct:__anon82
rans1_cnt	src/utils/htslib/cram/cram_structs.h	/^    int rans1_cnt;$/;"	m	struct:__anon82
rans1_extra	src/utils/htslib/cram/cram_structs.h	/^    double rans1_extra;$/;"	m	struct:__anon82
rans_compress	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_compress(unsigned char *in, unsigned int in_size,$/;"	f
rans_compress_O0	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_compress_O0(unsigned char *in, unsigned int in_size,$/;"	f
rans_compress_O1	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_compress_O1(unsigned char *in, unsigned int in_size,$/;"	f
rans_uncompress	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_uncompress(unsigned char *in, unsigned int in_size,$/;"	f
rans_uncompress_O0	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_uncompress_O0(unsigned char *in, unsigned int in_size,$/;"	f
rans_uncompress_O1	src/utils/htslib/cram/rANS_static.c	/^unsigned char *rans_uncompress_O1(unsigned char *in, unsigned int in_size,$/;"	f
rateOvlpType	src/utils/NewChromsweep/CloseSweep.h	/^ 	typedef enum { IGNORE, DELETE } rateOvlpType;$/;"	t	class:CloseSweep	typeref:enum:CloseSweep::__anon134
rcp_freq	src/utils/htslib/cram/rANS_byte.h	/^    uint32_t rcp_freq;  \/\/ Fixed-point reciprocal frequency$/;"	m	struct:__anon58
rcp_shift	src/utils/htslib/cram/rANS_byte.h	/^    uint16_t rcp_shift; \/\/ Reciprocal shift$/;"	m	struct:__anon58
rd	src/utils/htslib/hfile_libcurl.c	/^        union { char *rd; const char *wr; } ptr;$/;"	m	union:__anon102::__anon103::__anon104	file:
rdbuf	src/utils/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return &buf; }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
rdbuf	src/utils/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:GZSTREAM_NAMESPACE::igzstream
rdbuf	src/utils/gzstream/gzstream.h	/^    gzstreambuf* rdbuf() { return gzstreambase::rdbuf(); }$/;"	f	class:GZSTREAM_NAMESPACE::ogzstream
read	src/utils/BamTools/include/BamReader.hpp	/^		static ssize_t read(void* data, void* resbuf, size_t sz)$/;"	f	struct:BamTools::stream_data_t
read	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^int InputStreamMgr::read(char *data, size_t dataSize)$/;"	f	class:InputStreamMgr
read	src/utils/htslib/htslib/hfile.h	/^	ssize_t (*read)(void* cb_data, void* buf, size_t sz);$/;"	m	struct:hFILE_callback_ops
readEntry	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^bool BamFileReader::readEntry()$/;"	f	class:BamFileReader
readEntry	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^bool SingleLineDelimTextFileReader::readEntry()$/;"	f	class:SingleLineDelimTextFileReader
readFileChunk	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^bool BufferedStreamMgr::readFileChunk()$/;"	f	class:BufferedStreamMgr
readIndexFile	src/utils/Fasta/Fasta.cpp	/^void FastaIndex::readIndexFile(string fname) {$/;"	f	class:FastaIndex
readZipChunk	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^bool InputStreamMgr::readZipChunk()$/;"	f	class:InputStreamMgr
read_names_included	src/utils/htslib/cram/cram_structs.h	/^    int read_names_included;$/;"	m	struct:cram_block_compression_hdr
read_rest	src/utils/htslib/htslib/hts.h	/^    uint32_t read_rest:1, finished:1, is_cram:1, dummy:29;$/;"	m	struct:__anon16
reader	src/utils/BamTools/include/BamReader.hpp	/^			BamReader* reader;$/;"	m	struct:BamTools::BamReader::_SamFile
readers	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf_sr_t *readers;$/;"	m	struct:__anon33
readonly	src/utils/htslib/htslib/hfile.h	/^    unsigned at_eof:1, mobile:1, readonly:1;$/;"	m	struct:hFILE
readrec	src/utils/htslib/htslib/hts.h	/^    hts_readrec_func *readrec;$/;"	m	struct:__anon16
rec	src/utils/htslib/bcf_sr_sort.h	/^    bcf1_t **rec;           \/\/ list of VCF records in the readers$/;"	m	struct:__anon117
rec	src/utils/htslib/bcf_sr_sort.h	/^    bcf1_t **rec;$/;"	m	struct:__anon116
rec	src/utils/htslib/vcf_sweep.c	/^    bcf1_t *rec;            \/\/ bcf buffer$/;"	m	struct:_bcf_sweep_t	file:
recListIterType	src/utils/NewChromsweep/NewChromsweep.h	/^    typedef const RecordListNode *recListIterType;$/;"	t	class:NewChromSweep
recListType	src/utils/NewChromsweep/NewChromsweep.h	/^    typedef RecordList recListType;$/;"	t	class:NewChromSweep
rec_encoding_map	src/utils/htslib/cram/cram_structs.h	/^    struct cram_map *rec_encoding_map[CRAM_MAP_HASH];$/;"	m	struct:cram_block_compression_hdr	typeref:struct:cram_block_compression_hdr::cram_map
recordTypeHasName	src/utils/fileType/FileRecordTypeChecker.h	/^	bool recordTypeHasName(RECORD_TYPE type) const { return _hasName.find(type) != _hasName.end(); }$/;"	f	class:FileRecordTypeChecker
recordTypeHasScore	src/utils/fileType/FileRecordTypeChecker.h	/^	bool recordTypeHasScore(RECORD_TYPE type) const { return _hasScore.find(type) != _hasScore.end(); }$/;"	f	class:FileRecordTypeChecker
recordTypeHasStrand	src/utils/fileType/FileRecordTypeChecker.h	/^	bool recordTypeHasStrand(RECORD_TYPE type) const { return _hasStrand.find(type) != _hasStrand.end(); }$/;"	f	class:FileRecordTypeChecker
record_counter	src/utils/htslib/cram/cram_structs.h	/^    int64_t        record_counter;$/;"	m	struct:cram_fd
record_counter	src/utils/htslib/cram/cram_structs.h	/^    int64_t  record_counter;$/;"	m	struct:cram_container
record_counter	src/utils/htslib/cram/cram_structs.h	/^    int64_t record_counter;$/;"	m	struct:cram_block_slice_hdr
recordsHaveName	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool recordsHaveName() const {$/;"	f	class:FileRecordMgr
recordsHaveScore	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool recordsHaveScore() const {$/;"	f	class:FileRecordMgr
recordsHaveStrand	src/utils/FileRecordTools/FileRecordMgr.h	/^	bool recordsHaveStrand() const {$/;"	f	class:FileRecordMgr
recv_callback	src/utils/htslib/hfile_libcurl.c	/^static size_t recv_callback(char *ptr, size_t size, size_t nmemb, void *fpv)$/;"	f	file:
ref	src/utils/htslib/cram/cram_structs.h	/^    char *ref, *ref_free;      \/\/ current portion held in memory$/;"	m	struct:cram_fd
ref	src/utils/htslib/cram/cram_structs.h	/^    char *ref;                 \/\/ slice of current reference$/;"	m	struct:cram_slice
ref	src/utils/htslib/cram/cram_structs.h	/^    char *ref;$/;"	m	struct:cram_container
ref	src/utils/htslib/cram/sam_header.h	/^    SAM_SQ *ref;              \/\/!< Array of parsed \\@SQ lines$/;"	m	struct:__anon67
ref_base_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_base_id;    \/* if content_type == MAPPED_SLICE *\/$/;"	m	struct:cram_block_slice_hdr
ref_count	src/utils/htslib/cram/sam_header.h	/^    int ref_count;      \/\/ number of uses of this SAM_hdr$/;"	m	struct:__anon67
ref_count	src/utils/htslib/thread_pool_internal.h	/^    int ref_count;                   \/\/ used to track safe destruction$/;"	m	struct:hts_tpool_process
ref_end	src/utils/htslib/cram/cram_structs.h	/^    int   ref_end;$/;"	m	struct:cram_fd
ref_end	src/utils/htslib/cram/cram_structs.h	/^    int ref_end;               \/\/ end position of current reference;$/;"	m	struct:cram_slice
ref_end	src/utils/htslib/cram/cram_structs.h	/^    int ref_start, first_base, last_base, ref_id, ref_end;$/;"	m	struct:cram_container
ref_entry	src/utils/htslib/cram/cram_structs.h	/^typedef struct ref_entry {$/;"	s
ref_entry	src/utils/htslib/cram/cram_structs.h	/^} ref_entry;$/;"	t	typeref:struct:ref_entry
ref_entry_free_seq	src/utils/htslib/cram/cram_io.c	/^static void ref_entry_free_seq(ref_entry *e) {$/;"	f	file:
ref_fn	src/utils/htslib/cram/cram_structs.h	/^    char *ref_fn;   \/\/ reference fasta filename$/;"	m	struct:cram_fd
ref_free	src/utils/htslib/cram/cram_structs.h	/^    char *ref, *ref_free;      \/\/ current portion held in memory$/;"	m	struct:cram_fd
ref_hash	src/utils/htslib/cram/sam_header.h	/^    khash_t(m_s2i) *ref_hash; \/\/!< Maps SQ SN field to sq[] index$/;"	m	struct:__anon67
ref_id	src/utils/htslib/cram/cram_structs.h	/^    int   ref_id;$/;"	m	struct:cram_fd
ref_id	src/utils/htslib/cram/cram_structs.h	/^    int ref_id;$/;"	m	struct:cram_slice
ref_id	src/utils/htslib/cram/cram_structs.h	/^    int ref_start, first_base, last_base, ref_id, ref_end;$/;"	m	struct:cram_container
ref_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_id;       \/\/ fixed for all recs in slice?$/;"	m	struct:cram_record
ref_id	src/utils/htslib/cram/cram_structs.h	/^    ref_entry **ref_id;    \/\/ ref_entry*, index by ID$/;"	m	struct:__anon95
ref_lock	src/utils/htslib/cram/cram_structs.h	/^    pthread_mutex_t ref_lock;$/;"	m	struct:cram_fd
ref_seq_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t  ref_seq_id;$/;"	m	struct:cram_container
ref_seq_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_id;     \/* if content_type == MAPPED_SLICE *\/$/;"	m	struct:cram_block_slice_hdr
ref_seq_id	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_id;$/;"	m	struct:cram_block_compression_hdr
ref_seq_span	src/utils/htslib/cram/cram_structs.h	/^    int32_t  ref_seq_span;$/;"	m	struct:cram_container
ref_seq_span	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_span;   \/* if content_type == MAPPED_SLICE *\/$/;"	m	struct:cram_block_slice_hdr
ref_seq_span	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_span;$/;"	m	struct:cram_block_compression_hdr
ref_seq_start	src/utils/htslib/cram/cram_structs.h	/^    int32_t  ref_seq_start;$/;"	m	struct:cram_container
ref_seq_start	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_start;  \/* if content_type == MAPPED_SLICE *\/$/;"	m	struct:cram_block_slice_hdr
ref_seq_start	src/utils/htslib/cram/cram_structs.h	/^    int32_t ref_seq_start;$/;"	m	struct:cram_block_compression_hdr
ref_start	src/utils/htslib/cram/cram_structs.h	/^    int   ref_start;$/;"	m	struct:cram_fd
ref_start	src/utils/htslib/cram/cram_structs.h	/^    int ref_start, first_base, last_base, ref_id, ref_end;$/;"	m	struct:cram_container
ref_start	src/utils/htslib/cram/cram_structs.h	/^    int ref_start;             \/\/ start position of current reference;$/;"	m	struct:cram_slice
refid	src/utils/htslib/cram/cram_structs.h	/^    int     refid;  \/\/ 1.0                 1.1$/;"	m	struct:cram_index
refid	src/utils/htslib/cram/cram_structs.h	/^    int refid;$/;"	m	struct:__anon96
refill_buffer	src/utils/htslib/hfile.c	/^static ssize_t refill_buffer(hFILE *fp)$/;"	f	file:
refresh_idx	src/utils/BamTools/include/BamReader.hpp	/^			bool refresh_idx()$/;"	f	struct:BamTools::BamReader::_SamFile
refs	src/utils/htslib/cram/cram_structs.h	/^    refs_t *refs;              \/\/ ref meta-data structure$/;"	m	struct:cram_fd
refs2id	src/utils/htslib/cram/cram_io.c	/^int refs2id(refs_t *r, SAM_hdr *h) {$/;"	f
refs_create	src/utils/htslib/cram/cram_io.c	/^static refs_t *refs_create(void) {$/;"	f	file:
refs_free	src/utils/htslib/cram/cram_io.c	/^void refs_free(refs_t *r) {$/;"	f
refs_from_header	src/utils/htslib/cram/cram_io.c	/^static int refs_from_header(refs_t *r, cram_fd *fd, SAM_hdr *h) {$/;"	f	file:
refs_load_fai	src/utils/htslib/cram/cram_io.c	/^static refs_t *refs_load_fai(refs_t *r_orig, char *fn, int is_err) {$/;"	f	file:
refs_t	src/utils/htslib/cram/cram_structs.h	/^} refs_t;$/;"	t	typeref:struct:__anon95
refs_t	src/utils/htslib/htslib/cram.h	/^typedef struct refs_t refs_t;$/;"	t	typeref:struct:refs_t
refs_used	src/utils/htslib/cram/cram_structs.h	/^    int *refs_used;       \/\/ array of frequency of ref seq IDs$/;"	m	struct:cram_container
reg	src/utils/htslib/htslib/regidx.h	/^    reg_t *reg;$/;"	m	struct:__anon29
reg2bins	src/utils/htslib/hts.c	/^static inline int reg2bins(int64_t beg, int64_t end, hts_itr_t *itr, int min_shift, int n_lvls)$/;"	f	file:
reg_t	src/utils/htslib/htslib/regidx.h	/^reg_t;$/;"	t	typeref:struct:__anon28
regidx_destroy	src/utils/htslib/regidx.c	/^void regidx_destroy(regidx_t *idx)$/;"	f
regidx_free_f	src/utils/htslib/htslib/regidx.h	/^typedef void (*regidx_free_f)(void *payload);$/;"	t
regidx_init	src/utils/htslib/regidx.c	/^regidx_t *regidx_init(const char *fname, regidx_parse_f parser, regidx_free_f free_f, size_t payload_size, void *usr_dat)$/;"	f
regidx_insert	src/utils/htslib/regidx.c	/^int regidx_insert(regidx_t *idx, char *line)$/;"	f
regidx_nregs	src/utils/htslib/regidx.c	/^int regidx_nregs(regidx_t *idx)$/;"	f
regidx_overlap	src/utils/htslib/regidx.c	/^int regidx_overlap(regidx_t *idx, const char *chr, uint32_t from, uint32_t to, regitr_t *itr)$/;"	f
regidx_parse_bed	src/utils/htslib/regidx.c	/^int regidx_parse_bed(const char *line, char **chr_beg, char **chr_end, reg_t *reg, void *payload, void *usr)$/;"	f
regidx_parse_f	src/utils/htslib/htslib/regidx.h	/^typedef int  (*regidx_parse_f)(const char *line, char **chr_beg, char **chr_end, reg_t *reg, void *payload, void *usr);$/;"	t
regidx_parse_tab	src/utils/htslib/regidx.c	/^int regidx_parse_tab(const char *line, char **chr_beg, char **chr_end, reg_t *reg, void *payload, void *usr)$/;"	f
regidx_seq_names	src/utils/htslib/regidx.c	/^char **regidx_seq_names(regidx_t *idx, int *n)$/;"	f
regidx_seq_nregs	src/utils/htslib/regidx.c	/^int regidx_seq_nregs(regidx_t *idx, const char *seq)$/;"	f
regidx_t	src/utils/htslib/htslib/regidx.h	/^typedef struct _regidx_t regidx_t;$/;"	t	typeref:struct:_regidx_t
region1_t	src/utils/htslib/synced_bcf_reader.c	/^region1_t;$/;"	t	typeref:struct:__anon107	file:
region_list	src/utils/htslib/htslib/hts.h	/^    region_list,      \/\/ Coordinate intervals or regions -- BED, etc$/;"	e	enum:htsFormatCategory
region_t	src/utils/htslib/synced_bcf_reader.c	/^region_t;$/;"	t	typeref:struct:_region_t	file:
regions	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf_sr_regions_t *regions, *targets;    \/\/ see bcf_sr_set_[targets|regions] for description$/;"	m	struct:__anon33
regions_fname	src/utils/htslib/tabix.c	/^    char *regions_fname, *targets_fname;$/;"	m	struct:__anon99	file:
regitr_t	src/utils/htslib/htslib/regidx.h	/^regitr_t;$/;"	t	typeref:struct:__anon29
reglist_t	src/utils/htslib/regidx.c	/^reglist_t;$/;"	t	typeref:struct:__anon43	file:
regress_test_main	src/regressTest/regressTestMain.cpp	/^int regress_test_main(int argc, char **argv) {$/;"	f
regs	src/utils/htslib/htslib/synced_bcf_reader.h	/^    struct _region_t *regs; \/\/ the regions$/;"	m	struct:_bcf_sr_regions_t	typeref:struct:_bcf_sr_regions_t::_region_t
regs	src/utils/htslib/regidx.c	/^    reg_t *regs;$/;"	m	struct:__anon43	file:
regs	src/utils/htslib/synced_bcf_reader.c	/^    region1_t *regs;$/;"	m	struct:_region_t	file:
reheader_file	src/utils/htslib/tabix.c	/^int reheader_file(const char *fname, const char *header, int ftype, tbx_conf_t *conf)$/;"	f
reldist_help	src/reldist/reldistMain.cpp	/^void reldist_help(void) {$/;"	f
reldist_main	src/reldist/reldistMain.cpp	/^int reldist_main(int argc, char* argv[]) {$/;"	f
release	docs/conf.py	/^release = '2.27.0'$/;"	v
release	src/utils/general/QuickString.cpp	/^void string::release() {$/;"	f	class:string
remove_vset	src/utils/htslib/bcf_sr_sort.c	/^void remove_vset(sr_sort_t *srt, int jvset)$/;"	f
reopen	src/utils/htslib/test/hfile.c	/^void reopen(const char *infname, const char *outfname)$/;"	f
reopen_callback	src/utils/htslib/test/hfile.c	/^void reopen_callback(const char* infname, const char* outfilename)$/;"	f
reportBedNewLine	src/utils/bedFile/bedFile.h	/^     inline void reportBedNewLine(const T &bed) {$/;"	f	class:BedFile
reportBedPENewLine	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::reportBedPENewLine(const BEDPE &a) {$/;"	f	class:BedFilePE
reportBedPETab	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::reportBedPETab(const BEDPE &a) {$/;"	f	class:BedFilePE
reportBedRangeNewLine	src/utils/bedFile/bedFile.h	/^    inline void reportBedRangeNewLine(const T &bed, CHRPOS start, CHRPOS end) {$/;"	f	class:BedFile
reportBedRangeTab	src/utils/bedFile/bedFile.h	/^    inline void reportBedRangeTab(const T &bed, CHRPOS start, CHRPOS end) {$/;"	f	class:BedFile
reportBedTab	src/utils/bedFile/bedFile.h	/^    inline void reportBedTab(const T &bed) {$/;"	f	class:BedFile
reportDistance	src/utils/Contexts/ContextClosest.h	/^    bool reportDistance() const { return _reportDistance; }$/;"	f	class:ContextClosest
reportNullBedNewLine	src/utils/bedFile/bedFile.h	/^    void reportNullBedNewLine() {$/;"	f	class:BedFile
reportNullBedTab	src/utils/bedFile/bedFile.h	/^    void reportNullBedTab() {$/;"	f	class:BedFile
reportOverlapDetail	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::reportOverlapDetail(const Record *keyRecord, const Record *hitRecord, int hitIdx)$/;"	f	class:RecordOutputMgr
reportOverlapSummary	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^void RecordOutputMgr::reportOverlapSummary(RecordKeyVector &keyList)$/;"	f	class:RecordOutputMgr
reportToFileBedNewLine	src/utils/bedFile/bedFile.h	/^    inline void reportToFileBedNewLine(FILE* out,const T &bed) {$/;"	f	class:BedFile
require_index	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int require_index;  \/\/ Some tools do not need random access$/;"	m	struct:__anon33
required_fields	src/utils/htslib/cram/cram_structs.h	/^    unsigned int required_fields;$/;"	m	struct:cram_fd
reserve	src/utils/general/QuickString.cpp	/^void string::reserve(size_t newLen) {$/;"	f	class:string
reserved	src/utils/htslib/htslib/bgzf.h	/^    unsigned errcode:16, reserved:1, is_write:1, no_eof_block:1, is_be:1;$/;"	m	struct:BGZF
reset	src/utils/htslib/cram/cram_codecs.h	/^    void (*reset)(struct cram_codec *codec); \/\/ used between slices in a container$/;"	m	struct:cram_codec
resetNonNumErrFlag	src/utils/KeyListOps/KeyListOpsMethods.h	/^    void resetNonNumErrFlag() {$/;"	f	class:KeyListOpsMethods
resetStream	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^bool InputStreamMgr::resetStream()$/;"	f	class:InputStreamMgr
reset_all_codecs	src/utils/htslib/cram/cram_decode.c	/^static void reset_all_codecs(cram_block_compression_hdr *hdr) {$/;"	f	file:
resize	src/utils/general/QuickString.cpp	/^void string::resize(size_t newSize, char fillChar)$/;"	f	class:string
resolve_cigar2	src/utils/htslib/sam.c	/^static inline int resolve_cigar2(bam_pileup1_t *p, int32_t pos, cstate_t *s)$/;"	f	file:
response	src/utils/htslib/htslib/knetfile.h	/^	char *response, *retr, *size_cmd;$/;"	m	struct:knetFile_s
retr	src/utils/htslib/htslib/knetfile.h	/^	char *response, *retr, *size_cmd;$/;"	m	struct:knetFile_s
reverseComplement	src/utils/sequenceUtilities/sequenceUtils.cpp	/^void reverseComplement(string &seq) {$/;"	f
reverseSequence	src/utils/sequenceUtilities/sequenceUtils.cpp	/^void reverseSequence(string &seq) {$/;"	f
revised_method	src/utils/htslib/cram/cram_structs.h	/^    int revised_method;$/;"	m	struct:__anon82
rg	src/utils/htslib/cram/cram_structs.h	/^    int32_t rg;           \/\/ RG$/;"	m	struct:cram_record
rg	src/utils/htslib/cram/sam_header.h	/^    SAM_RG *rg;               \/\/!< Array of parsed \\@RG lines$/;"	m	struct:__anon67
rg_hash	src/utils/htslib/cram/sam_header.h	/^    khash_t(m_s2i) *rg_hash;  \/\/!< Maps RG ID field to rg[] index$/;"	m	struct:__anon67
rid	src/utils/htslib/htslib/vcf.h	/^    int32_t rid;  \/\/ CHROM$/;"	m	struct:__anon27
rid_prev	src/utils/htslib/regidx.c	/^    int rid_prev, start_prev, end_prev;$/;"	m	struct:_regidx_t	file:
right	src/utils/htslib/htslib/ksort.h	/^	void *left, *right;$/;"	m	struct:__anon35
rlen	src/utils/htslib/htslib/vcf.h	/^    int32_t rlen; \/\/ length of REF$/;"	m	struct:__anon27
rqueue	src/utils/htslib/cram/cram_structs.h	/^    hts_tpool_process *rqueue;$/;"	m	struct:cram_fd
run	src/utils/htslib/test/cross_validate.sh	/^run() {$/;"	f
runTests	src/regressTest/RegressTest.cpp	/^bool RegressTest::runTests() {$/;"	f	class:RegressTest
run_out	src/utils/htslib/test/cross_validate.sh	/^run_out() {$/;"	f
run_test	src/utils/htslib/test/tabix/test-tabix.sh	/^run_test() {$/;"	f
run_test	src/utils/htslib/test/test-bcf-sr.pl	/^sub run_test$/;"	s
s	src/utils/htslib/cram/cram_decode.c	/^    cram_slice *s;$/;"	m	struct:__anon97	file:
s	src/utils/htslib/cram/cram_structs.h	/^    struct cram_slice *s; \/\/ Filled out by cram_decode only$/;"	m	struct:cram_record	typeref:struct:cram_record::cram_slice
s	src/utils/htslib/htslib/bgzf.h	/^    char *s;$/;"	m	struct:__kstring_t
s	src/utils/htslib/htslib/hts.h	/^        char *s;$/;"	m	union:hts_opt::__anon14
s	src/utils/htslib/htslib/hts.h	/^    char *s;$/;"	m	struct:__kstring_t
s	src/utils/htslib/htslib/kseq.h	/^	char *s;$/;"	m	struct:__kstring_t
s	src/utils/htslib/htslib/kstring.h	/^	char *s;$/;"	m	struct:__kstring_t
s	src/utils/htslib/sam.c	/^    cstate_t s;$/;"	m	struct:__linkbuf_t	file:
s	test/fisher/sim.py	/^        s = randint(0, genome_size - maxA)$/;"	v
s3_auth_data	src/utils/htslib/hfile_s3.c	/^} s3_auth_data;$/;"	t	typeref:struct:__anon55	file:
s3_open	src/utils/htslib/hfile_s3.c	/^static hFILE *s3_open(const char *url, const char *mode)$/;"	f	file:
s3_rewrite	src/utils/htslib/hfile_s3.c	/^static hFILE * s3_rewrite(const char *s3url, const char *mode, va_list *argsp)$/;"	f	file:
s3_sign	src/utils/htslib/hfile_s3.c	/^s3_sign(unsigned char *digest, kstring_t *key, kstring_t *message)$/;"	f	file:
s3_vopen	src/utils/htslib/hfile_s3.c	/^static hFILE *s3_vopen(const char *url, const char *mode_colon, va_list args0)$/;"	f	file:
s_num_bases	src/utils/htslib/cram/cram_structs.h	/^    uint64_t s_num_bases; \/\/ number of bases in this slice$/;"	m	struct:cram_container
safe_itf8_get	src/utils/htslib/cram/cram_io.h	/^static inline int safe_itf8_get(const char *cp, const char *endp,$/;"	f
safe_ltf8_get	src/utils/htslib/cram/cram_io.h	/^static inline int safe_ltf8_get(const char *cp, const char *endp,$/;"	f
safe_tempdir	src/utils/htslib/test/test.pl	/^sub safe_tempdir$/;"	s
sam	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
samFile	src/utils/htslib/htslib/sam.h	/^    typedef htsFile samFile;$/;"	t
sam_bam_cram_readrec	src/utils/htslib/sam.c	/^static int sam_bam_cram_readrec(BGZF *bgzfp, void *fpv, void *bv, int *tid, int *beg, int *end)$/;"	f	file:
sam_cap_mapq	src/utils/htslib/realn.c	/^int sam_cap_mapq(bam1_t *b, const char *ref, int ref_len, int thres)$/;"	f
sam_close	src/utils/htslib/htslib/sam.h	364;"	d
sam_fields	src/utils/htslib/htslib/hts.h	/^enum sam_fields {$/;"	g
sam_format1	src/utils/htslib/sam.c	/^int sam_format1(const bam_hdr_t *h, const bam1_t *b, kstring_t *str)$/;"	f
sam_hdr_PG_ID	src/utils/htslib/cram/sam_header.c	/^const char *sam_hdr_PG_ID(SAM_hdr *sh, const char *name) {$/;"	f
sam_hdr_add	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_add(SAM_hdr *sh, const char *type, ...) {$/;"	f
sam_hdr_add_PG	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_add_PG(SAM_hdr *sh, const char *name, ...) {$/;"	f
sam_hdr_add_lines	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_add_lines(SAM_hdr *sh, const char *lines, int len) {$/;"	f
sam_hdr_decr_ref	src/utils/htslib/cram/sam_header.c	/^void sam_hdr_decr_ref(SAM_hdr *hdr) {$/;"	f
sam_hdr_dump	src/utils/htslib/cram/sam_header.c	/^void sam_hdr_dump(SAM_hdr *hdr) {$/;"	f
sam_hdr_dup	src/utils/htslib/cram/sam_header.c	/^SAM_hdr *sam_hdr_dup(SAM_hdr *hdr) {$/;"	f
sam_hdr_error	src/utils/htslib/cram/sam_header.c	/^static void sam_hdr_error(char *msg, char *line, int len, int lno) {$/;"	f	file:
sam_hdr_find	src/utils/htslib/cram/sam_header.c	/^SAM_hdr_type *sam_hdr_find(SAM_hdr *hdr, char *type,$/;"	f
sam_hdr_find_key	src/utils/htslib/cram/sam_header.c	/^SAM_hdr_tag *sam_hdr_find_key(SAM_hdr *sh,$/;"	f
sam_hdr_find_line	src/utils/htslib/cram/sam_header.c	/^char *sam_hdr_find_line(SAM_hdr *hdr, char *type,$/;"	f
sam_hdr_find_rg	src/utils/htslib/cram/sam_header.c	/^SAM_RG *sam_hdr_find_rg(SAM_hdr *hdr, const char *rg) {$/;"	f
sam_hdr_free	src/utils/htslib/cram/sam_header.c	/^void sam_hdr_free(SAM_hdr *hdr) {$/;"	f
sam_hdr_incr_ref	src/utils/htslib/cram/sam_header.c	/^void sam_hdr_incr_ref(SAM_hdr *hdr) {$/;"	f
sam_hdr_length	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_length(SAM_hdr *hdr) {$/;"	f
sam_hdr_link_pg	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_link_pg(SAM_hdr *hdr) {$/;"	f
sam_hdr_name2ref	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_name2ref(SAM_hdr *hdr, const char *ref) {$/;"	f
sam_hdr_new	src/utils/htslib/cram/sam_header.c	/^SAM_hdr *sam_hdr_new() {$/;"	f
sam_hdr_parse	src/utils/htslib/sam.c	/^bam_hdr_t *sam_hdr_parse(int l_text, const char *text)$/;"	f
sam_hdr_parse_	src/utils/htslib/cram/sam_header.c	/^SAM_hdr *sam_hdr_parse_(const char *hdr, int len) {$/;"	f
sam_hdr_parse_sort_order	src/utils/htslib/cram/sam_header.c	/^static enum sam_sort_order sam_hdr_parse_sort_order(SAM_hdr *hdr) {$/;"	f	file:
sam_hdr_read	src/utils/htslib/sam.c	/^bam_hdr_t *sam_hdr_read(htsFile *fp)$/;"	f
sam_hdr_rebuild	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_rebuild(SAM_hdr *hdr) {$/;"	f
sam_hdr_sanitise	src/utils/htslib/sam.c	/^static bam_hdr_t *sam_hdr_sanitise(bam_hdr_t *h) {$/;"	f	file:
sam_hdr_sort_order	src/utils/htslib/cram/sam_header.c	/^enum sam_sort_order sam_hdr_sort_order(SAM_hdr *hdr) {$/;"	f
sam_hdr_str	src/utils/htslib/cram/sam_header.c	/^char *sam_hdr_str(SAM_hdr *hdr) {$/;"	f
sam_hdr_update	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_update(SAM_hdr *hdr, SAM_hdr_type *type, ...) {$/;"	f
sam_hdr_update_hashes	src/utils/htslib/cram/sam_header.c	/^static int sam_hdr_update_hashes(SAM_hdr *sh,$/;"	f	file:
sam_hdr_vadd	src/utils/htslib/cram/sam_header.c	/^int sam_hdr_vadd(SAM_hdr *sh, const char *type, va_list ap, ...) {$/;"	f
sam_hdr_write	src/utils/htslib/sam.c	/^int sam_hdr_write(htsFile *fp, const bam_hdr_t *h)$/;"	f
sam_index_build	src/utils/htslib/sam.c	/^int sam_index_build(const char *fn, int min_shift)$/;"	f
sam_index_build2	src/utils/htslib/sam.c	/^int sam_index_build2(const char *fn, const char *fnidx, int min_shift)$/;"	f
sam_index_build3	src/utils/htslib/sam.c	/^int sam_index_build3(const char *fn, const char *fnidx, int min_shift, int nthreads)$/;"	f
sam_index_load	src/utils/htslib/sam.c	/^hts_idx_t *sam_index_load(htsFile *fp, const char *fn)$/;"	f
sam_index_load2	src/utils/htslib/sam.c	/^hts_idx_t *sam_index_load2(htsFile *fp, const char *fn, const char *fnidx)$/;"	f
sam_itr_destroy	src/utils/htslib/htslib/sam.h	353;"	d
sam_itr_next	src/utils/htslib/htslib/sam.h	356;"	d
sam_itr_queryi	src/utils/htslib/sam.c	/^hts_itr_t *sam_itr_queryi(const hts_idx_t *idx, int tid, int beg, int end)$/;"	f
sam_itr_querys	src/utils/htslib/sam.c	/^hts_itr_t *sam_itr_querys(const hts_idx_t *idx, bam_hdr_t *hdr, const char *region)$/;"	f
sam_open	src/utils/htslib/htslib/sam.h	362;"	d
sam_open_format	src/utils/htslib/htslib/sam.h	363;"	d
sam_open_mode	src/utils/htslib/sam.c	/^int sam_open_mode(char *mode, const char *fn, const char *format)$/;"	f
sam_open_mode_opts	src/utils/htslib/sam.c	/^char *sam_open_mode_opts(const char *fn,$/;"	f
sam_parse1	src/utils/htslib/sam.c	/^int sam_parse1(kstring_t *s, bam_hdr_t *h, bam1_t *b)$/;"	f
sam_prob_realn	src/utils/htslib/realn.c	/^int sam_prob_realn(bam1_t *b, const char *ref, int ref_len, int flag)$/;"	f
sam_read1	src/utils/htslib/sam.c	/^int sam_read1(htsFile *fp, bam_hdr_t *h, bam1_t *b)$/;"	f
sam_sort_order	src/utils/htslib/cram/sam_header.h	/^enum sam_sort_order {$/;"	g
sam_to_Ccram	src/utils/htslib/test/cross_validate.sh	/^sam_to_Ccram() {$/;"	f
sam_to_Jcram	src/utils/htslib/test/cross_validate.sh	/^sam_to_Jcram() {$/;"	f
sam_write1	src/utils/htslib/sam.c	/^int sam_write1(htsFile *fp, const bam_hdr_t *h, const bam1_t *b)$/;"	f
sameChrom	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::sameChrom(const Record *other) const {$/;"	f	class:Record
sameChromIntersects	src/utils/FileRecordTools/Records/Record.cpp	/^bool Record::sameChromIntersects(const Record *record,$/;"	f	class:Record
sample_help	src/sampleFile/sampleHelp.cpp	/^void sample_help(void) {$/;"	f
samples	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char **samples; \/\/ List of samples$/;"	m	struct:__anon33
samples	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int *samples, n_smpl;   \/\/ list of columns in the order consistent with bcf_srs_t.samples$/;"	m	struct:__anon31
samples	src/utils/htslib/htslib/vcf.h	/^    char **samples;$/;"	m	struct:__anon21
samrecord_layout	src/utils/htslib/test/sam.c	/^static void samrecord_layout(void)$/;"	f	file:
sanitise_SQ_lines	src/utils/htslib/cram/cram_io.c	/^static void sanitise_SQ_lines(cram_fd *fd) {$/;"	f	file:
saveBedItems	src/split/splitBed.cpp	/^ void BedSplit::saveBedItems(void* data,size_t file_index)$/;"	f	class:BedSplit
saveFileChunk	src/split/splitBed.cpp	/^std::FILE* BedSplit::saveFileChunk(std::string& filename,size_t file_index)$/;"	f	class:BedSplit
save_bin	src/utils/htslib/hts.c	/^        uint32_t last_bin, save_bin;$/;"	m	struct:__hts_idx_t::__anon5	file:
save_off	src/utils/htslib/hts.c	/^        uint64_t last_off, save_off;$/;"	m	struct:__hts_idx_t::__anon5	file:
save_tid	src/utils/htslib/hts.c	/^        int last_coor, last_tid, save_tid, finished;$/;"	m	struct:__hts_idx_t::__anon5	file:
save_vcf	src/utils/htslib/test/test-bcf-sr.pl	/^sub save_vcf$/;"	s
sbumpc	src/utils/general/PushBackStreamBuf.cpp	/^int PushBackStreamBuf::sbumpc()$/;"	f	class:PushBackStreamBuf
sc	src/utils/htslib/htslib/tbx.h	/^    int32_t sc, bc, ec; \/\/ seq col., beg col. and end col.$/;"	m	struct:__anon36
scanBuffer	src/utils/fileType/FileRecordTypeChecker.cpp	/^bool FileRecordTypeChecker::scanBuffer(const char *buffer, size_t len, bool eofHit, bool isCompressed)$/;"	f	class:FileRecordTypeChecker
scanCache	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::scanCache(int dbIdx, RecordKeyVector &retList) {$/;"	f	class:CloseSweep
scanCache	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::scanCache(int dbIdx, RecordKeyVector &retList) {$/;"	f	class:NewChromSweep
scan_keyword	src/utils/htslib/hts.c	/^scan_keyword(const char *str, char delim, char *buf, size_t buflen)$/;"	f	file:
score	src/utils/bedFile/bedFile.h	/^    string score;$/;"	m	struct:BED
score	src/utils/bedFile/bedFile.h	/^    string score;$/;"	m	struct:BEDCOV
score	src/utils/bedFile/bedFile.h	/^    string score;$/;"	m	struct:BEDCOVLIST
score	src/utils/bedFilePE/bedFilePE.h	/^    string score;$/;"	m	struct:BEDPE
score	src/utils/htslib/bcf_sr_sort.h	/^    uint8_t score[256];$/;"	m	struct:__anon120
sdict	src/utils/htslib/htslib/sam.h	/^    void *sdict;$/;"	m	struct:__anon38
sdict_t	src/utils/htslib/sam.c	/^typedef khash_t(s2i) sdict_t;$/;"	t	file:
se	src/utils/htslib/tbx.c	/^    char *ss, *se;$/;"	m	struct:__anon115	file:
secret	src/utils/htslib/hfile_s3.c	/^    kstring_t secret;$/;"	m	struct:__anon55	file:
seek	src/utils/htslib/htslib/hfile.h	/^	off_t (*seek)(void* cb_data, off_t ofs, int whence);$/;"	m	struct:hFILE_callback_ops
seek_offset	src/utils/htslib/htslib/knetfile.h	/^	int64_t seek_offset; \/\/ for lazy seek$/;"	m	struct:knetFile_s
send_callback	src/utils/htslib/hfile_libcurl.c	/^static size_t send_callback(char *ptr, size_t size, size_t nmemb, void *fpv)$/;"	f	file:
sep	src/utils/htslib/htslib/kstring.h	/^	int sep, finished;$/;"	m	struct:__anon34
seq	src/utils/htslib/cram/cram_structs.h	/^    char *seq;$/;"	m	struct:ref_entry
seq	src/utils/htslib/cram/cram_structs.h	/^    int32_t seq;          \/\/ idx to s->seqs_blk$/;"	m	struct:cram_record
seq	src/utils/htslib/regidx.c	/^    reglist_t *seq;     \/\/ regions for each sequence$/;"	m	struct:_regidx_t	file:
seq2regs	src/utils/htslib/regidx.c	/^    void *seq2regs;     \/\/ hash for fast lookup from chr name to regions$/;"	m	struct:_regidx_t	file:
seq_hash	src/utils/htslib/htslib/synced_bcf_reader.h	/^    void *seq_hash;         \/\/ keys: sequence names, values: index to seqs$/;"	m	struct:_bcf_sr_regions_t
seq_idx	src/utils/htslib/cram/cram_structs.h	/^	    int seq_idx; \/\/ index to s->seqs_blk$/;"	m	struct:cram_feature::__anon83::__anon86
seq_idx	src/utils/htslib/cram/cram_structs.h	/^	    int seq_idx; \/\/ insertion multiple bases$/;"	m	struct:cram_feature::__anon83::__anon89
seq_idx	src/utils/htslib/cram/cram_structs.h	/^	    int seq_idx; \/\/ soft-clip multiple bases$/;"	m	struct:cram_feature::__anon83::__anon88
seq_names	src/utils/htslib/htslib/synced_bcf_reader.h	/^    char **seq_names;       \/\/ sequence names$/;"	m	struct:_bcf_sr_regions_t
seq_names	src/utils/htslib/regidx.c	/^    char **seq_names;$/;"	m	struct:_regidx_t	file:
seq_nt16_int	src/utils/htslib/hts.c	/^const int seq_nt16_int[] = { 4, 0, 1, 4, 2, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4 };$/;"	v
seq_nt16_str	src/utils/htslib/hts.c	/^const char seq_nt16_str[] = "=ACMGRSVTWYHKDBN";$/;"	v
seq_nt16_table	src/utils/htslib/hts.c	/^const unsigned char seq_nt16_table[256] = {$/;"	v
seqs_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *seqs_blk;$/;"	m	struct:cram_slice
seqs_per_slice	src/utils/htslib/cram/cram_structs.h	/^    int seqs_per_slice;$/;"	m	struct:cram_fd
sequenceLength	src/utils/Fasta/Fasta.cpp	/^long unsigned int FastaReference::sequenceLength(string seqname) {$/;"	f	class:FastaReference
sequenceNameStartingWith	src/utils/Fasta/Fasta.cpp	/^string FastaReference::sequenceNameStartingWith(string seqnameStart) {$/;"	f	class:FastaReference
sequenceNames	src/utils/Fasta/Fasta.h	/^        vector<string> sequenceNames;$/;"	m	class:FastaIndex
sequence_data	src/utils/htslib/htslib/hts.h	/^    sequence_data,    \/\/ Sequence data -- SAM, BAM, CRAM, etc$/;"	e	enum:htsFormatCategory
serial	src/utils/htslib/thread_pool_internal.h	/^    uint64_t serial; \/\/ sequential number for ordering$/;"	m	struct:hts_tpool_result
serial	src/utils/htslib/thread_pool_internal.h	/^    uint64_t serial;$/;"	m	struct:hts_tpool_job
serialize_float_array	src/utils/htslib/vcf.c	/^static inline int serialize_float_array(kstring_t *s, size_t n, const float *a) {$/;"	f	file:
set	src/utils/general/QuickString.cpp	/^void string::set(const char *inBuf, size_t newLen) {$/;"	f	class:string
setAnyHit	src/utils/Contexts/ContextIntersect.h	/^	void setAnyHit(bool val) { _anyHit = val; }$/;"	f	class:ContextIntersect
setBam	src/utils/fileType/FileRecordTypeChecker.cpp	/^void FileRecordTypeChecker::setBam()$/;"	f	class:FileRecordTypeChecker
setBamReader	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	void setBamReader(BamTools::BamReader *bamReader) { _bamReader = bamReader; }$/;"	f	class:BamFileReader
setBed12	src/utils/bedFile/bedFile.cpp	/^void BedFile::setBed12 (bool isBed12) { this->isBed12 = isBed12; }$/;"	f	class:BedFile
setBedType	src/utils/bedFile/bedFile.cpp	/^void BedFile::setBedType (int colNums) { bedType = colNums; }$/;"	f	class:BedFile
setBlockCount	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setBlockCount(int blockCount) { _blockCount = blockCount; }$/;"	f	class:Bed12Interval
setBlockSizes	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setBlockSizes(const char *blockSizes) { _blockSizes = blockSizes; }$/;"	f	class:Bed12Interval
setBlockSizes	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setBlockSizes(const string & blockSizes) { _blockSizes = blockSizes; }$/;"	f	class:Bed12Interval
setBlockStarts	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setBlockStarts(const char *blockStarts) { _blockStarts = blockStarts; }$/;"	f	class:Bed12Interval
setBlockStarts	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setBlockStarts(const string & blockStarts) { _blockStarts = blockStarts; }$/;"	f	class:Bed12Interval
setBreakOnDeletionOps	src/utils/FileRecordTools/Records/BlockMgr.h	/^	void setBreakOnDeletionOps(bool val) { _breakOnDeletionOps = val; }$/;"	f	class:BlockMgr
setBreakOnSkipOps	src/utils/FileRecordTools/Records/BlockMgr.h	/^	void setBreakOnSkipOps(bool val) { _breakOnSkipOps = val; }$/;"	f	class:BlockMgr
setChrName	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setChrName(const char *chr) { _chrName = chr; }$/;"	f	class:Record
setChrName	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setChrName(const string &chr) { _chrName = chr; }$/;"	f	class:Record
setChromId	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setChromId(int id) { _chrId = id; }$/;"	f	class:Record
setColumn	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void setColumn(int col) { _column = col; }$/;"	f	class:KeyListOpsMethods
setColumnOpsMethods	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::setColumnOpsMethods(bool val)$/;"	f	class:ContextBase
setColumns	src/utils/KeyListOps/KeyListOps.h	/^	void setColumns(const string &columns) { _columns = columns; }$/;"	f	class:KeyListOps
setDBfileType	src/utils/KeyListOps/KeyListOps.h	/^	void setDBfileType(FileRecordTypeChecker::FILE_TYPE type) { _dbFileType = type; }$/;"	f	class:KeyListOps
setDelim	src/utils/VectorOps/VectorOps.h	/^    void setDelim(const string &str) { _delimStr = str; }$/;"	f	class:VectorOps
setDelimStr	src/utils/KeyListOps/KeyListOps.h	/^	void setDelimStr(const string & delimStr) { _methods.setDelimStr(delimStr); }$/;"	f	class:KeyListOps
setDelimStr	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void setDelimStr(const string &delimStr) { _delimStr = delimStr; }$/;"	f	class:KeyListOpsMethods
setDiffStrand	src/utils/Contexts/ContextIntersect.h	/^	void setDiffStrand(bool val) { _diffStrand = val; }$/;"	f	class:ContextIntersect
setEitherFraction	src/utils/Contexts/ContextIntersect.h	/^	void setEitherFraction(bool val) { _eitherFraction = val; }$/;"	f	class:ContextIntersect
setEndPos	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setEndPos(int endPos) { _endPos = endPos; }$/;"	f	class:Record
setEndPosStr	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setEndPosStr(const string &str) { _endPosStr = str; }$/;"	f	class:Record
setErrorMessage	src/utils/Contexts/ContextBase.h	/^	void setErrorMessage(const string &errorMsg) { _errorMsg = errorMsg; }$/;"	f	class:ContextBase
setErrorMsg	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::setErrorMsg(string &msg, bool onlyWarn, const Record * record, string str1, const string str2, const string str3) {$/;"	f	class:ContextBase
setExcludeFile	src/utils/Contexts/ContextFisher.h	/^	void setExcludeFile(string excludeFile) { _excludeFile = excludeFile; }$/;"	f	class:ContextFisher
setExplicitBedOutput	src/utils/Contexts/ContextBase.h	/^    void setExplicitBedOutput(bool val) { _explicitBedOutput = val; }$/;"	f	class:ContextBase
setFileIdx	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	virtual void setFileIdx(int fileIdx) { _fileIdx = fileIdx; }$/;"	f	class:FileReader
setFileIdx	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setFileIdx(int fileIdx) { _fileIdx = fileIdx; }$/;"	f	class:FileRecordMgr
setFileIdx	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setFileIdx(int fileIdx) { _fileIdx = fileIdx; }$/;"	f	class:Record
setFileName	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	void setFileName(const string &filename) { _filename = filename; }$/;"	f	class:FileReader
setFileRecordManager	src/utils/FileRecordTools/Records/Record.cpp	/^void Record::setFileRecordManager(FileRecordMgr *frm)$/;"	f	class:Record
setFileType	src/utils/bedFile/bedFile.cpp	/^void BedFile::setFileType (FileType type) {$/;"	f	class:BedFile
setFileType	src/utils/fileType/FileRecordTypeChecker.h	/^	void setFileType(FILE_TYPE type) { _fileType = type; }$/;"	f	class:FileRecordTypeChecker
setFilename	src/utils/fileType/FileRecordTypeChecker.h	/^	void setFilename(const string & filename) { _filename = filename; }$/;"	f	class:FileRecordTypeChecker
setFilesPerRun	src/regressTest/RegressTest.h	/^	void setFilesPerRun(int numFiles) { _filesPerRun = numFiles; }$/;"	f	class:RegressTest
setFreeListBlockSize	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setFreeListBlockSize(int blockSize) { _freeListBlockSize = blockSize; }$/;"	f	class:FileRecordMgr
setFullBamFlags	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setFullBamFlags(bool flag) { _useFullBamTags = flag; }$/;"	f	class:FileRecordMgr
setGenomeFile	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setGenomeFile(NewGenomeFile *genomeFile) {$/;"	f	class:FileRecordMgr
setGff	src/utils/bedFile/bedFile.cpp	/^void BedFile::setGff (bool gff) { this->_isGff = gff; }$/;"	f	class:BedFile
setHaveFractionA	src/utils/Contexts/ContextIntersect.h	/^	void setHaveFractionA(bool val) { _haveFractionA = val; }$/;"	f	class:ContextIntersect
setHaveFractionB	src/utils/Contexts/ContextIntersect.h	/^	void setHaveFractionB(bool val) { _haveFractionB = val; }$/;"	f	class:ContextIntersect
setInHeader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.h	/^	virtual void setInHeader(bool val) { _inheader = val; }$/;"	f	class:SingleLineDelimTextFileReader
setInHeader	src/utils/fileType/FileRecordTypeChecker.h	/^	void setInHeader(bool val) { _inheader = val; }$/;"	f	class:FileRecordTypeChecker
setInputStream	src/utils/FileRecordTools/FileReaders/FileReader.h	/^	void setInputStream(BufferedStreamMgr *bufStreamMgr) {$/;"	f	class:FileReader
setIoBufSize	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.h	/^	void setIoBufSize(int val) { _useBufSize = val; }$/;"	f	class:BufferedStreamMgr
setIoBufSize	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setIoBufSize(int val) { _ioBufSize = val; }$/;"	f	class:FileRecordMgr
setIsBam	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void setIsBam(bool isBam) { _isBam = isBam; }$/;"	f	class:KeyListOpsMethods
setIsGroupBy	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setIsGroupBy(bool val) { _isGroupBy = val; }$/;"	f	class:FileRecordMgr
setIsGroupBy	src/utils/fileType/FileRecordTypeChecker.h	/^	void setIsGroupBy(bool val) { _isGroupBy = val; } \/\/ When using groupBy,$/;"	f	class:FileRecordTypeChecker
setIsSorted	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setIsSorted(bool val) { _isSortedInput = val; }$/;"	f	class:FileRecordMgr
setItemRGB	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setItemRGB(const char *rgb) { _itemRGB = rgb; }$/;"	f	class:Bed12Interval
setItemRGB	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setItemRGB(const string & rgb) { _itemRGB = rgb; }$/;"	f	class:Bed12Interval
setKeepFinalIncompleteElem	src/utils/general/Tokenizer.cpp	/^void Tokenizer::setKeepFinalIncompleteElem(lastElemCode code) {$/;"	f	class:Tokenizer
setKey	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^void RecordKeyList::setKey(elemType key) {$/;"	f	class:RecordKeyList
setKey	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::setKey(elemType key) {$/;"	f	class:RecordKeyVector
setKeyList	src/utils/KeyListOps/KeyListOps.h	/^	void setKeyList(RecordKeyVector *keyList) { _methods.setKeyList(keyList); }$/;"	f	class:KeyListOps
setKeyList	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void setKeyList(RecordKeyVector *keyList) { _keyList = keyList; }$/;"	f	class:KeyListOpsMethods
setLeftClosestEndPos	src/utils/NewChromsweep/CloseSweep.cpp	/^void CloseSweep::setLeftClosestEndPos(int dbIdx)$/;"	f	class:CloseSweep
setLeftJoin	src/utils/Contexts/ContextIntersect.h	/^	void setLeftJoin(bool val) { _leftJoin = val; }$/;"	f	class:ContextIntersect
setListNoCopy	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^void RecordKeyList::setListNoCopy(listType &list) {$/;"	f	class:RecordKeyList
setMaxDistance	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	void setMaxDistance(int maxDistance) { _maxDistance = maxDistance; }$/;"	f	class:FileRecordMergeMgr
setMaxNumDatabaseFields	src/utils/Contexts/ContextIntersect.h	/^	void setMaxNumDatabaseFields(int val) { _maxNumDatabaseFields = val; }$/;"	f	class:ContextIntersect
setName	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setName(const char *chr) { _name = chr; }$/;"	f	class:Record
setName	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setName(const string &name) { _name = name; }$/;"	f	class:Record
setNameCheckDisabled	src/utils/Contexts/ContextBase.h	/^    virtual void setNameCheckDisabled(bool val) { _nameCheckDisabled = val; }$/;"	f	class:ContextBase
setNoEnforceCoordSort	src/utils/Contexts/ContextBase.h	/^    void setNoEnforceCoordSort(bool val) { _noEnforceCoordSort = val; }$/;"	f	class:ContextBase
setNoEnforceCoordSort	src/utils/FileRecordTools/FileRecordMgr.h	/^	void setNoEnforceCoordSort(bool val) { _noEnforceCoordSort = val; }$/;"	f	class:FileRecordMgr
setNoHit	src/utils/Contexts/ContextIntersect.h	/^	void setNoHit(bool val) { _noHit = val; }$/;"	f	class:ContextIntersect
setNullValue	src/utils/KeyListOps/KeyListOps.h	/^	void setNullValue(const string & nullValue) { _methods.setNullValue(nullValue); }$/;"	f	class:KeyListOps
setNullValue	src/utils/KeyListOps/KeyListOpsMethods.h	/^	void setNullValue(const string & nullVal) { _nullVal = nullVal; }$/;"	f	class:KeyListOpsMethods
setNumExpectedItems	src/utils/general/Tokenizer.cpp	/^void Tokenizer::setNumExpectedItems(int newSize) {$/;"	f	class:Tokenizer
setNumFields	src/utils/FileRecordTools/Records/GffRecord.h	/^	virtual void setNumFields(int val) { _numFields = val; }$/;"	f	class:GffRecord
setNumFixedFields	src/utils/FileRecordTools/Records/BedPlusInterval.cpp	/^void BedPlusInterval::setNumFixedFields(int numFields) {$/;"	f	class:BedPlusInterval
setNumOffsetFields	src/utils/FileRecordTools/Records/PlusFields.h	/^	void setNumOffsetFields(int numOffsetFields) { _numOffsetFields = numOffsetFields; }$/;"	f	class:PlusFields
setNumOutputRecords	src/utils/Contexts/ContextBase.h	/^    virtual void setNumOutputRecords(int val) { _numOutputRecords = val; }$/;"	f	class:ContextBase
setNumPrintFields	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	virtual void setNumPrintFields(int num) { _numPrintFields = num; }$/;"	f	class:BedPlusInterval
setNumPrintFields	src/utils/FileRecordTools/Records/GffPlusRecord.h	/^	virtual void setNumPrintFields(int num) { _numPrintFields = num; }$/;"	f	class:GffPlusRecord
setObeySplits	src/utils/Contexts/ContextBase.h	/^	void setObeySplits(bool val) { _obeySplits = val; }$/;"	f	class:ContextBase
setOneWayOptions	src/regressTest/regressTestMain.cpp	/^void setOneWayOptions(RegressTest *regressTest) {$/;"	f
setOperations	src/utils/KeyListOps/KeyListOps.h	/^	void setOperations(const string & operation) { _operations = operation; }$/;"	f	class:KeyListOps
setOutputFileType	src/utils/Contexts/ContextBase.h	/^	void setOutputFileType(ContextFileType fileType) { _outputFileType = fileType; }$/;"	f	class:ContextBase
setOverlapFractionA	src/utils/Contexts/ContextIntersect.h	/^	void setOverlapFractionA(float fraction) { _overlapFractionA = fraction; }$/;"	f	class:ContextIntersect
setOverlapFractionB	src/utils/Contexts/ContextIntersect.h	/^	void setOverlapFractionB(float fraction) { _overlapFractionB = fraction; }$/;"	f	class:ContextIntersect
setPrecision	src/utils/KeyListOps/KeyListOps.h	/^	void setPrecision(int val) { _precision = val; }$/;"	f	class:KeyListOps
setPrintHeader	src/utils/Contexts/ContextBase.h	/^    virtual void setPrintHeader(bool val) { _printHeader = val; }$/;"	f	class:ContextBase
setPrintable	src/utils/Contexts/ContextBase.h	/^    virtual void setPrintable(bool val) { _printable = val; }$/;"	f	class:ContextBase
setProgram	src/utils/Contexts/ContextBase.h	/^	void setProgram(PROGRAM_TYPE program) { _program = program; }$/;"	f	class:ContextBase
setQueryFileIdx	src/utils/Contexts/ContextIntersect.h	/^	void setQueryFileIdx(int idx) { _queryFileIdx = idx; }$/;"	f	class:ContextIntersect
setReciprocalFraction	src/utils/Contexts/ContextIntersect.h	/^	void setReciprocalFraction(bool val) { _reciprocalFraction = val; }$/;"	f	class:ContextIntersect
setRecordType	src/utils/fileType/FileRecordTypeChecker.h	/^	void setRecordType(RECORD_TYPE type) { _recordType = type; }$/;"	f	class:FileRecordTypeChecker
setRunToQueryEnd	src/utils/Contexts/ContextIntersect.h	/^	void setRunToQueryEnd(bool val) { _runToQueryEnd = val; }$/;"	f	class:ContextIntersect
setSameStrand	src/utils/Contexts/ContextIntersect.h	/^	void setSameStrand(bool val) { _sameStrand = val; }$/;"	f	class:ContextIntersect
setSameStrand	src/utils/Contexts/ContextSample.h	/^	void setSameStrand(bool val) { _sameStrand = val; }$/;"	f	class:ContextSample
setScore	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setScore(const char *chr) { _score = chr; }$/;"	f	class:Record
setScore	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setScore(const string &score) { _score = score; }$/;"	f	class:Record
setShowHelp	src/utils/Contexts/ContextBase.h	/^	void setShowHelp(bool val) { _showHelp = val; }$/;"	f	class:ContextBase
setSortOutput	src/utils/Contexts/ContextBase.h	/^    virtual void setSortOutput(bool val) { _sortOutput = val; }$/;"	f	class:ContextBase
setSortedInput	src/utils/Contexts/ContextBase.h	/^    virtual void setSortedInput(bool val) { _sortedInput = val; }$/;"	f	class:ContextBase
setStartPos	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setStartPos(int startPos) { _startPos = startPos; }$/;"	f	class:Record
setStartPosStr	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setStartPosStr(const string &str) { _startPosStr = str; }$/;"	f	class:Record
setStrand	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setStrand(char val) { _strand = val;$/;"	f	class:Record
setStrand	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setStrand(const string &val) { _strand = val;$/;"	f	class:Record
setStrandType	src/utils/FileRecordTools/FileRecordMergeMgr.h	/^	void setStrandType(WANTED_STRAND_TYPE strand) { _desiredStrand = strand; }$/;"	f	class:FileRecordMergeMgr
setSubtractFraction	src/utils/Contexts/ContextSubtract.h	/^    void setSubtractFraction(float fraction) { _fractionalSubtract = fraction; }$/;"	f	class:ContextSubtract
setThickEnd	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setThickEnd(int thickEnd) { _thickEnd = thickEnd; }$/;"	f	class:Bed12Interval
setThickStart	src/utils/FileRecordTools/Records/Bed12Interval.h	/^	virtual void setThickStart(int thickStart)  { _thickStart = thickStart; }$/;"	f	class:Bed12Interval
setTwoWayOptions	src/regressTest/regressTestMain.cpp	/^void setTwoWayOptions(RegressTest *regressTest) {$/;"	f
setUncompressedBam	src/utils/Contexts/ContextBase.h	/^    void setUncompressedBam(bool val) { _uncompressedBam = val; }$/;"	f	class:ContextBase
setUseBufferedOutput	src/utils/Contexts/ContextBase.h	/^    void setUseBufferedOutput(bool val) { _useBufferedOutput = val; }$/;"	f	class:ContextBase
setUseDBfileNames	src/utils/Contexts/ContextBase.h	/^    virtual void setUseDBfileNames(bool val) { _reportDBfileNames = val; }$/;"	f	class:ContextBase
setUseDBnameTags	src/utils/Contexts/ContextBase.h	/^    virtual void setUseDBnameTags(bool val) { _reportDBnameTags = val; }$/;"	f	class:ContextBase
setUseFullBamTags	src/utils/Contexts/ContextBase.h	/^    virtual void setUseFullBamTags(bool val) { _useFullBamTags = val; }$/;"	f	class:ContextBase
setUseMergedIntervals	src/utils/Contexts/ContextBase.h	/^	void setUseMergedIntervals(bool val) { _useMergedIntervals = val; }$/;"	f	class:ContextBase
setUseTags	src/utils/FileRecordTools/FileReaders/BamFileReader.h	/^	virtual void setUseTags(bool flag) { _useTags = flag; }$/;"	f	class:BamFileReader
setValid	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setValid(const bool valid)  { _isValidHit = valid; }$/;"	f	class:Record
setVcf	src/utils/bedFile/bedFile.cpp	/^void BedFile::setVcf (bool vcf) { this->_isVcf = vcf; }$/;"	f	class:BedFile
setVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::setVector(vecType *vec) {$/;"	f	class:RecordKeyVector
setWriteA	src/utils/Contexts/ContextIntersect.h	/^	void setWriteA(bool val) { _writeA = val; }$/;"	f	class:ContextIntersect
setWriteAllOverlap	src/utils/Contexts/ContextIntersect.h	/^	void setWriteAllOverlap(bool val) { _writeAllOverlap = val; }$/;"	f	class:ContextIntersect
setWriteB	src/utils/Contexts/ContextIntersect.h	/^	void setWriteB(bool val) { _writeB = val; }$/;"	f	class:ContextIntersect
setWriteCount	src/utils/Contexts/ContextIntersect.h	/^	void setWriteCount(bool val) { _writeCount = val; }$/;"	f	class:ContextIntersect
setWriteOverlap	src/utils/Contexts/ContextIntersect.h	/^	void setWriteOverlap(bool val) { _writeOverlap = val; }$/;"	f	class:ContextIntersect
setZeroBased	src/utils/bedFile/bedFile.cpp	/^void BedFile::setZeroBased(bool zeroBased) { this->isZeroBased = zeroBased; }$/;"	f	class:BedFile
setZeroLength	src/utils/FileRecordTools/Records/Record.h	/^	virtual void setZeroLength(bool val) { _zeroLength = val; }$/;"	f	class:Record
set_range	src/utils/BamTools/include/BamReader.hpp	/^			bool set_range(BamRegion& reg)$/;"	f	struct:BamTools::BamReader::_SamFile
set_u	src/utils/htslib/probaln.c	44;"	d	file:
setup	src/utils/htslib/test/test_bgzf.c	/^static int setup(const char *src, Files *f) {$/;"	f	file:
share	src/utils/htslib/hfile_libcurl.c	/^    CURLSH *share;$/;"	m	struct:__anon105	file:
share_lock	src/utils/htslib/hfile_libcurl.c	/^static void share_lock(CURL *handle, curl_lock_data data,$/;"	f	file:
share_unlock	src/utils/htslib/hfile_libcurl.c	/^static void share_unlock(CURL *handle, curl_lock_data data, void *userptr) {$/;"	f	file:
shared	src/utils/htslib/htslib/vcf.h	/^    kstring_t shared, indiv;$/;"	m	struct:__anon27
shared_dirty	src/utils/htslib/htslib/vcf.h	/^    int shared_dirty;   \/\/ if set, shared.s must be recreated on BCF output$/;"	m	struct:__anon26
shared_ref	src/utils/htslib/cram/cram_structs.h	/^    int shared_ref;$/;"	m	struct:cram_fd
shift_help	src/shiftBed/shiftBedMain.cpp	/^void shift_help(void) {$/;"	f
shift_main	src/shiftBed/shiftBedMain.cpp	/^int shift_main(int argc, char* argv[]) {$/;"	f
showErrors	src/bedtools.cpp	/^void showErrors(const string &errors) $/;"	f
showHelp	src/bedtools.cpp	/^void showHelp(const string &subCmd) {$/;"	f
show_headers	src/utils/htslib/htsfile.c	/^int show_headers = 1;$/;"	v
shuffle_help	src/shuffleBed/shuffleBedMain.cpp	/^void shuffle_help(void) {$/;"	f
shuffle_main	src/shuffleBed/shuffleBedMain.cpp	/^int shuffle_main(int argc, char* argv[]) {$/;"	f
shutdown	src/utils/htslib/thread_pool_internal.h	/^    int shutdown;                    \/\/ true if pool is being destroyed$/;"	m	struct:hts_tpool_process
shutdown	src/utils/htslib/thread_pool_internal.h	/^    int shutdown; \/\/ true if pool is being destroyed$/;"	m	struct:hts_tpool
signDistance	src/utils/Contexts/ContextClosest.h	/^    bool signDistance() const { return _signDistance; }$/;"	f	class:ContextClosest
size	src/split/splitBed.cpp	/^		vector<BED*>::size_type size() const$/;"	f	class:BedSplitItems
size	src/utils/BamTools/include/BamAlignment.hpp	/^				size_t      size;$/;"	m	struct:BamTools::BamAlignment::_SupportData::__anon126
size	src/utils/BamTools/include/BamReader.hpp	/^			uint32_t size;$/;"	m	struct:BamTools::BamReader::_MetaData
size	src/utils/FileRecordTools/Records/PlusFields.h	/^	virtual size_t size() const { return _fields.size(); }$/;"	f	class:PlusFields
size	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^size_t RecordKeyList::size() const {$/;"	f	class:RecordKeyList
size	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^size_t RecordKeyVector::size() const {$/;"	f	class:RecordKeyVector
size	src/utils/FileRecordTools/Records/RecordList.h	/^	size_t size() const { return _size; }$/;"	f	class:RecordList
size	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^size_t StrandQueue::size() {$/;"	f	class:StrandQueue
size	src/utils/bedFile/bedFile.h	/^    int size() const {$/;"	f	struct:BED
size	src/utils/general/BTlist.h	/^	size_t size() const { return _size; }$/;"	f	class:BTlist
size	src/utils/general/QuickString.h	/^	size_t size() const { return _currSize; }$/;"	f	class:string
size	src/utils/htslib/bgzf.c	/^    int size;$/;"	m	struct:__anon53	file:
size	src/utils/htslib/cram/cram_structs.h	/^    int size;   \/* Size *\/$/;"	m	struct:cram_map
size	src/utils/htslib/cram/mFILE.h	/^    size_t size;$/;"	m	struct:__anon60
size	src/utils/htslib/hfile_libcurl.c	/^    unsigned int size;$/;"	m	struct:__anon100	file:
size	src/utils/htslib/htslib/vcf.h	/^    int n, size, type;  \/\/ n: number of values per-sample; size: number of bytes per-sample; type: one of BCF_BT_* types$/;"	m	struct:__anon23
size	src/utils/htslib/vcf.c	/^    int key, max_m, size, offset;$/;"	m	struct:__anon52	file:
sizeWeightedSearch	src/utils/bedFile/bedFile.cpp	/^BED * BedFile::sizeWeightedSearch(double val) {$/;"	f	class:BedFile
size_cmd	src/utils/htslib/htslib/knetfile.h	/^	char *response, *retr, *size_cmd;$/;"	m	struct:knetFile_s
skip_aux	src/utils/htslib/sam.c	/^static inline uint8_t *skip_aux(uint8_t *s, uint8_t *end)$/;"	f	file:
skip_value	src/utils/htslib/textutils.c	/^static char skip_value(char type, hts_json_nextfn *next, void *arg1, void *arg2)$/;"	f	file:
slice	src/utils/htslib/cram/cram_structs.h	/^    int     slice;  \/\/ 1.0 landmark index, 1.1 landmark value$/;"	m	struct:cram_index
slice	src/utils/htslib/cram/cram_structs.h	/^    struct cram_slice **slices, *slice;$/;"	m	struct:cram_container	typeref:struct:cram_container::
slice_rec	src/utils/htslib/cram/cram_structs.h	/^    int slice_rec;               \/\/ rec no. for start of this slice$/;"	m	struct:cram_container
slices	src/utils/htslib/cram/cram_structs.h	/^    struct cram_slice **slices, *slice;$/;"	m	struct:cram_container	typeref:struct:cram_container::cram_slice
slices_per_container	src/utils/htslib/cram/cram_structs.h	/^    int slices_per_container;$/;"	m	struct:cram_fd
slop_help	src/slopBed/slopBedMain.cpp	/^void slop_help(void) {$/;"	f
slop_main	src/slopBed/slopBedMain.cpp	/^int slop_main(int argc, char* argv[]) {$/;"	f
slurp	src/utils/htslib/test/hfile.c	/^char *slurp(const char *filename)$/;"	f
snext	src/utils/htslib/textutils.c	/^static char snext(void *arg1, void *arg2, hts_json_token *token)$/;"	f	file:
socket_connect	src/utils/htslib/knetfile.c	/^static SOCKET socket_connect(const char *host, const char *port)$/;"	f	file:
socket_connect	src/utils/htslib/knetfile.c	/^static int socket_connect(const char *host, const char *port)$/;"	f	file:
socket_wait	src/utils/htslib/knetfile.c	/^static int socket_wait(int fd, int is_read)$/;"	f	file:
soft_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *soft_blk;$/;"	m	struct:cram_slice
sort	src/utils/FileRecordTools/Records/RecordKeyList.h	/^    void sort() { _list.sort(); }$/;"	f	class:RecordKeyList
sort	src/utils/FileRecordTools/Records/RecordList.h	/^	void sort() { mergeSort(&_begin); }$/;"	f	class:RecordList
sort	src/utils/htslib/synced_bcf_reader.c	/^    sr_sort_t sort;$/;"	m	struct:__anon108	file:
sortArray	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^void KeyListOpsMethods::sortArray(bool useNum, bool ascOrder)$/;"	f	class:KeyListOpsMethods
sortByChrom	src/utils/bedFile/bedFile.cpp	/^bool sortByChrom(BED const &a, BED const &b) {$/;"	f
sortByScoreAsc	src/utils/bedFile/bedFile.cpp	/^bool sortByScoreAsc(const BED &a, const BED &b) {$/;"	f
sortByScoreDesc	src/utils/bedFile/bedFile.cpp	/^bool sortByScoreDesc(const BED &a, const BED &b) {$/;"	f
sortBySizeAsc	src/utils/bedFile/bedFile.cpp	/^bool sortBySizeAsc(const BED &a, const BED &b) {$/;"	f
sortBySizeDesc	src/utils/bedFile/bedFile.cpp	/^bool sortBySizeDesc(const BED &a, const BED &b) {$/;"	f
sortByStart	src/utils/bedFile/bedFile.cpp	/^bool sortByStart(const BED &a, const BED &b) {$/;"	f
sortByWeight	src/utils/bedFile/bedFile.cpp	/^bool sortByWeight(const BED &a, const BED &b) {$/;"	f
sortError	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::sortError(const Record *record, bool genomeFileError)$/;"	f	class:FileRecordMgr
sortVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::sortVector() {$/;"	f	class:RecordKeyVector
sort_help	src/sortBed/sortMain.cpp	/^void sort_help(void) {$/;"	f
sort_main	src/sortBed/sortMain.cpp	/^int sort_main(int argc, char* argv[]) {$/;"	f
sort_order	src/utils/htslib/cram/sam_header.h	/^    enum sam_sort_order sort_order; \/\/!< @HD SO: field$/;"	m	struct:__anon67	typeref:enum:__anon67::sam_sort_order
sortedHelp	src/utils/general/CommonHelp.cpp	/^void sortedHelp() {$/;"	f
sortedMerge	src/utils/FileRecordTools/Records/RecordList.cpp	/^RecordListNode* RecordList::sortedMerge(RecordListNode * a, RecordListNode * b) {$/;"	f	class:RecordList
source_index	src/utils/Point/Point.h	/^      int source_index;           \/\/ which source BedGraph file this came from$/;"	m	class:PointWithDepth
source_index	src/utils/Point/Point.h	/^    int source_index;           \/\/ which source BedGraph file this came from$/;"	m	class:Point
source_suffix	docs/conf.py	/^source_suffix = '.rst'$/;"	v
spacing_help	src/spacingFile/spacingHelp.cpp	/^void spacing_help(void) {$/;"	f
spare_bams	src/utils/htslib/cram/cram_structs.h	/^typedef struct spare_bams {$/;"	s
spare_bams	src/utils/htslib/cram/cram_structs.h	/^} spare_bams;$/;"	t	typeref:struct:spare_bams
specific	src/utils/htslib/htslib/hts.h	/^    void *specific;  \/\/ format specific options; see struct hts_opt.$/;"	m	struct:htsFormat
split	src/utils/Fasta/split.cpp	/^std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {$/;"	f
split	src/utils/Fasta/split.cpp	/^std::vector<std::string> &split(const std::string &s, const std::string& delims, std::vector<std::string> &elems) {$/;"	f
split	src/utils/Fasta/split.cpp	/^std::vector<std::string> split(const std::string &s, char delim) {$/;"	f
split	src/utils/Fasta/split.cpp	/^std::vector<std::string> split(const std::string &s, const std::string& delims) {$/;"	f
splitBedPEIntoBeds	src/utils/bedFilePE/bedFilePE.cpp	/^void BedFilePE::splitBedPEIntoBeds(const BEDPE &bedpeEntry, const int &lineNum, MATE *bedEntry1, MATE *bedEntry2) {$/;"	f	class:BedFilePE
split_main	src/split/splitBedMain.cpp	/^int split_main(int argc, char* argv[])$/;"	f
squareB_opt	src/utils/htslib/thread_pool.c	/^struct squareB_opt {$/;"	s	file:
sr	src/utils/htslib/bcf_sr_sort.h	/^    bcf_srs_t *sr;$/;"	m	struct:__anon120
sr_sort_t	src/utils/htslib/bcf_sr_sort.h	/^sr_sort_t;$/;"	t	typeref:struct:__anon120
srand48	src/utils/htslib/htslib/hts_os.h	36;"	d
srandom	src/utils/htslib/htslib/hts_os.h	55;"	d
src_bgzf	src/utils/htslib/test/test_bgzf.c	/^    char *src_bgzf;$/;"	m	struct:__anon50	file:
src_idx	src/utils/htslib/test/test_bgzf.c	/^    char *src_idx;$/;"	m	struct:__anon50	file:
src_plain	src/utils/htslib/test/test_bgzf.c	/^    char *src_plain;$/;"	m	struct:__anon50	file:
ss	src/utils/htslib/tbx.c	/^    char *ss, *se;$/;"	m	struct:__anon115	file:
sscan_string	src/utils/htslib/textutils.c	/^static char *sscan_string(char *s)$/;"	f	file:
start	src/utils/bedFile/bedFile.h	/^    CHRPOS start;$/;"	m	struct:BED
start	src/utils/bedFile/bedFile.h	/^    CHRPOS start;$/;"	m	struct:BEDCOV
start	src/utils/bedFile/bedFile.h	/^    CHRPOS start;$/;"	m	struct:BEDCOVLIST
start	src/utils/bedGraphFile/bedGraphFile.h	/^    CHRPOS start;$/;"	m	class:BEDGRAPH
start	src/utils/htslib/cram/cram_structs.h	/^    int     start;  \/\/ 1.0                 1.1$/;"	m	struct:cram_index
start	src/utils/htslib/cram/cram_structs.h	/^    int start;$/;"	m	struct:__anon96
start	src/utils/htslib/cram/rANS_byte.h	/^    uint16_t start;     \/\/ Start of range.$/;"	m	struct:__anon59
start	src/utils/htslib/htslib/regidx.h	/^    uint32_t start, end;$/;"	m	struct:__anon28
start	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int start, end;         \/\/ current position: start, end of the region (0-based)$/;"	m	struct:_bcf_sr_regions_t
start	src/utils/htslib/synced_bcf_reader.c	/^    uint32_t start, end;$/;"	m	struct:__anon107	file:
start1	src/utils/bedFilePE/bedFilePE.h	/^    CHRPOS start1;$/;"	m	struct:BEDPE
start2	src/utils/bedFilePE/bedFilePE.h	/^    CHRPOS start2;$/;"	m	struct:BEDPE
startMemoryProfile	src/regressTest/RegressTest.cpp	/^bool RegressTest::startMemoryProfile(bool isBedops)$/;"	f	class:RegressTest
start_prev	src/utils/htslib/regidx.c	/^    int rid_prev, start_prev, end_prev;$/;"	m	struct:_regidx_t	file:
starts	src/utils/bedFile/bedFile.h	/^    UINT starts;$/;"	m	struct:DEPTH
stats	src/utils/htslib/cram/cram_structs.h	/^    cram_stats *stats[DS_END];$/;"	m	struct:cram_container
status	src/utils/htslib/htsfile.c	/^int status = EXIT_SUCCESS;  \/* Exit status from main *\/$/;"	v
status	src/utils/htslib/test/sam.c	/^int status;$/;"	v
status_flag	src/utils/general/InflateStreamBuf.h	/^	int status_flag;$/;"	m	class:InflateStreamBuf
stl_basename	src/multiIntersectBed/multiIntersectBedMain.cpp	/^std::string stl_basename(const std::string& path)$/;"	f
stop	src/utils/htslib/cram/cram_codecs.h	/^    unsigned char stop;$/;"	m	struct:__anon78
store	src/utils/htslib/cram/cram_codecs.h	/^    int (*store)(struct cram_codec *codec, cram_block *b, char *prefix,$/;"	m	struct:cram_codec
store_bits_MSB	src/utils/htslib/cram/cram_codecs.c	/^static int store_bits_MSB(cram_block *block, unsigned int val, int nbits) {$/;"	f	file:
str	src/utils/general/QuickString.h	/^	const string str() const { return _buffer; }$/;"	f	class:string
str	src/utils/htslib/bcf_sr_sort.h	/^    char *str;      \/\/ "A>C" for biallelic records or "A>C,A>CC" for multiallelic records$/;"	m	struct:__anon117
str	src/utils/htslib/bcf_sr_sort.h	/^    kstring_t str;$/;"	m	struct:__anon120
str	src/utils/htslib/cram/sam_header.h	/^    char *str;$/;"	m	struct:SAM_hdr_tag_s
str	src/utils/htslib/cram/string_alloc.h	/^    char *str;$/;"	m	struct:__anon62
str	src/utils/htslib/hts_internal.h	/^    char *str;    \/\/\/< Value as a C string (filled in for all token types)$/;"	m	struct:hts_json_token
str	src/utils/htslib/regidx.c	/^    kstring_t str;$/;"	m	struct:_regidx_t	file:
str	src/utils/htslib/test/sam.c	102;"	d	file:
str2chrPos	src/utils/general/ParseTools.cpp	/^int str2chrPos(const char *str, size_t ulen) {$/;"	f
str2chrPos	src/utils/general/ParseTools.cpp	/^int str2chrPos(const string &str) {$/;"	f
str_pool	src/utils/htslib/cram/sam_header.h	/^    string_alloc_t *str_pool; \/\/!< Pool of SAM_hdr_tag->str strings$/;"	m	struct:__anon67
strand	src/utils/bedFile/bedFile.h	/^    string strand;$/;"	m	struct:BED
strand	src/utils/bedFile/bedFile.h	/^    string strand;$/;"	m	struct:BEDCOV
strand	src/utils/bedFile/bedFile.h	/^    string strand;$/;"	m	struct:BEDCOVLIST
strand1	src/utils/bedFilePE/bedFilePE.h	/^    string strand1;$/;"	m	struct:BEDPE
strand2	src/utils/bedFilePE/bedFilePE.h	/^    string strand2;$/;"	m	struct:BEDPE
strandComplies	src/sampleFile/sampleFile.cpp	/^bool SampleFile::strandComplies(const Record * record) {$/;"	f	class:SampleFile
strandType	src/utils/FileRecordTools/Records/Record.h	/^	typedef enum { FORWARD, REVERSE, UNKNOWN } strandType;$/;"	t	class:Record	typeref:enum:Record::__anon124
strandedDistanceModeType	src/utils/Contexts/ContextClosest.h	/^    typedef enum { REF_DIST, A_DIST, B_DIST} strandedDistanceModeType;$/;"	t	class:ContextClosest	typeref:enum:ContextClosest::__anon128
strandedToolSupported	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::strandedToolSupported() {$/;"	f	class:ContextBase
strat	src/utils/htslib/cram/cram_structs.h	/^    int strat;$/;"	m	struct:__anon82
stream	src/utils/BamTools/include/BamReader.hpp	/^		std::istream& stream;$/;"	m	struct:BamTools::stream_data_t
streamDirType	src/utils/NewChromsweep/CloseSweep.h	/^    typedef enum { UPSTREAM, INTERSECT, DOWNSTREAM } streamDirType;$/;"	t	class:CloseSweep	typeref:enum:CloseSweep::__anon136
stream_data_t	src/utils/BamTools/include/BamReader.hpp	/^		stream_data_t(std::istream& is) : stream(is){}$/;"	f	struct:BamTools::stream_data_t
stream_data_t	src/utils/BamTools/include/BamReader.hpp	/^	struct stream_data_t {$/;"	s	namespace:BamTools
streaming	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int streaming;      \/\/ reading mode: index-jumping or streaming$/;"	m	struct:__anon33
stricmp	src/utils/general/QuickString.cpp	/^bool string::stricmp(const string &str) const {$/;"	f	class:string
string	src/utils/general/QuickString.cpp	/^string::string(char c)$/;"	f	class:string
string	src/utils/general/QuickString.cpp	/^string::string(const char *inBuf)$/;"	f	class:string
string	src/utils/general/QuickString.cpp	/^string::string(const string &inString)$/;"	f	class:string
string	src/utils/general/QuickString.cpp	/^string::string(const string &qs)$/;"	f	class:string
string	src/utils/general/QuickString.cpp	/^string::string(size_t capacity)$/;"	f	class:string
string	src/utils/general/QuickString.h	/^class string {$/;"	c
string_H_	src/utils/general/QuickString.h	9;"	d
string_alloc	src/utils/htslib/cram/string_alloc.c	/^char *string_alloc(string_alloc_t *a_str, size_t length) {$/;"	f
string_alloc_t	src/utils/htslib/cram/string_alloc.h	/^} string_alloc_t;$/;"	t	typeref:struct:__anon63
string_dup	src/utils/htslib/cram/string_alloc.c	/^char *string_dup(string_alloc_t *a_str, char *instr) {$/;"	f
string_ndup	src/utils/htslib/cram/string_alloc.c	/^char *string_ndup(string_alloc_t *a_str, char *instr, size_t len) {$/;"	f
string_pool_create	src/utils/htslib/cram/string_alloc.c	/^string_alloc_t *string_pool_create(size_t max_length) {$/;"	f
string_pool_destroy	src/utils/htslib/cram/string_alloc.c	/^void string_pool_destroy(string_alloc_t *a_str) {$/;"	f
string_t	src/utils/htslib/cram/string_alloc.h	/^} string_t;$/;"	t	typeref:struct:__anon62
stringify_argv	src/utils/htslib/cram/sam_header.c	/^char *stringify_argv(int argc, char *argv[]) {$/;"	f
strings	src/utils/htslib/cram/string_alloc.h	/^    string_t *strings;$/;"	m	struct:__anon63
strm	src/utils/general/InflateStreamBuf.h	/^	z_stream strm;$/;"	m	class:InflateStreamBuf
strtoint64	src/utils/htslib/knetfile.c	/^int64_t strtoint64(const char *buf)$/;"	f
subMain	src/utils/driver/BedtoolsDriver.cpp	/^bool BedtoolsDriver::subMain(int argc, char **argv) $/;"	f	class:BedtoolsDriver
sub_idx	src/utils/htslib/cram/cram_encode.c	/^static int sub_idx(char *key, char val) {$/;"	f	file:
subexp	src/utils/htslib/cram/cram_codecs.h	/^	cram_subexp_decoder          subexp;$/;"	m	union:cram_codec::__anon80
substitution_matrix	src/utils/htslib/cram/cram_structs.h	/^    char substitution_matrix[5][4];$/;"	m	struct:cram_block_compression_hdr
substr	src/utils/general/QuickString.cpp	/^void string::substr (string &newStr, size_t pos, size_t len) const$/;"	f	class:string
subtractHits	src/subtractFile/subtractFile.cpp	/^void SubtractFile::subtractHits(RecordKeyVector &hits) {$/;"	f	class:SubtractFile
subtract_help	src/subtractFile/subtractHelp.cpp	/^void subtract_help(void) {$/;"	f
suffix	src/utils/htslib/hts_internal.h	/^    const char *pathdir, *prefix, *suffix;$/;"	m	struct:hts_path_itr
suffix_len	src/utils/htslib/hts_internal.h	/^    size_t prefix_len, suffix_len, entry_dir_l;$/;"	m	struct:hts_path_itr
supportType	src/utils/driver/BedtoolsDriver.h	/^	typedef set<string> supportType;$/;"	t	class:BedtoolsDriver
supports	src/utils/driver/BedtoolsDriver.cpp	/^bool BedtoolsDriver::supports(const string &tool) {$/;"	f	class:BedtoolsDriver
sw_fill_buffer	src/utils/htslib/vcf_sweep.c	/^static void sw_fill_buffer(bcf_sweep_t *sw)$/;"	f	file:
sw_rec_equal	src/utils/htslib/vcf_sweep.c	/^static inline int sw_rec_equal(bcf_sweep_t *sw, bcf1_t *rec)$/;"	f	file:
sw_rec_save	src/utils/htslib/vcf_sweep.c	/^static void sw_rec_save(bcf_sweep_t *sw, bcf1_t *rec)$/;"	f	file:
sw_seek	src/utils/htslib/vcf_sweep.c	/^static void sw_seek(bcf_sweep_t *sw, int direction)$/;"	f	file:
swap	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^void RecordKeyVector::swap(RecordKeyVector &other)$/;"	f	class:RecordKeyVector
swap_bins	src/utils/htslib/hts.c	/^static inline void swap_bins(bins_t *p)$/;"	f	file:
swap_data	src/utils/htslib/sam.c	/^static void swap_data(const bam1_core_t *c, int l_data, uint8_t *data, int is_host)$/;"	f	file:
symbol	src/utils/htslib/cram/cram_codecs.h	/^    int32_t symbol;$/;"	m	struct:__anon70
sync	src/utils/gzstream/gzstream.C	/^int gzstreambuf::sync() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
sysconf	src/utils/htslib/cram/os.h	210;"	d
sz_bzip2	src/utils/htslib/cram/cram_structs.h	/^    int sz_bzip2;$/;"	m	struct:__anon82
sz_gz_def	src/utils/htslib/cram/cram_structs.h	/^    int sz_gz_def;$/;"	m	struct:__anon82
sz_gz_rle	src/utils/htslib/cram/cram_structs.h	/^    int sz_gz_rle;$/;"	m	struct:__anon82
sz_lzma	src/utils/htslib/cram/cram_structs.h	/^    int sz_lzma;$/;"	m	struct:__anon82
sz_rans0	src/utils/htslib/cram/cram_structs.h	/^    int sz_rans0;$/;"	m	struct:__anon82
sz_rans1	src/utils/htslib/cram/cram_structs.h	/^    int sz_rans1;$/;"	m	struct:__anon82
t	src/utils/htslib/thread_pool_internal.h	/^    hts_tpool_worker *t;$/;"	m	struct:hts_tpool
t16_bit	src/utils/htslib/test/hts_endian.c	/^static int t16_bit(int verbose) {$/;"	f	file:
t32_bit	src/utils/htslib/test/hts_endian.c	/^static int t32_bit(int verbose) {$/;"	f	file:
t64_bit	src/utils/htslib/test/hts_endian.c	/^static int t64_bit(int verbose) {$/;"	f	file:
t_double	src/utils/htslib/test/hts_endian.c	/^int t_double(int verbose) {$/;"	f
t_float	src/utils/htslib/test/hts_endian.c	/^int t_float(int verbose) {$/;"	f
t_stack	src/utils/htslib/thread_pool_internal.h	/^    int *t_stack, t_stack_top;$/;"	m	struct:hts_tpool
t_stack_top	src/utils/htslib/thread_pool_internal.h	/^    int *t_stack, t_stack_top;$/;"	m	struct:hts_tpool
tab	src/utils/RecordOutputMgr/RecordOutputMgr.h	/^	void tab() { _outBuf.append("\\t"); }$/;"	f	class:RecordOutputMgr
tab	src/utils/htslib/htslib/kstring.h	/^	uint64_t tab[4];$/;"	m	struct:__anon34
tabix_test	src/utils/htslib/test/tabix/test-tabix.sh	/^tabix_test() {$/;"	f
tag	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_tag  *tag;$/;"	m	struct:__anon64
tag	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_tag  *tag;$/;"	m	struct:__anon65
tag	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_tag  *tag;$/;"	m	struct:__anon66
tag	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_tag *tag;            \/\/ first tag$/;"	m	struct:SAM_hdr_item_s
tag_encoding_map	src/utils/htslib/cram/cram_structs.h	/^    struct cram_map *tag_encoding_map[CRAM_MAP_HASH];$/;"	m	struct:cram_block_compression_hdr	typeref:struct:cram_block_compression_hdr::cram_map
tag_pool	src/utils/htslib/cram/sam_header.h	/^    pool_alloc_t   *tag_pool; \/\/!< Pool of SAM_hdr_tag structs$/;"	m	struct:__anon67
tagbam_help	src/tagBam/tagBamMain.cpp	/^void tagbam_help(void) {$/;"	f
tagbam_main	src/tagBam/tagBamMain.cpp	/^int tagbam_main(int argc, char* argv[]) {$/;"	f
tags_used	src/utils/htslib/cram/cram_structs.h	/^    khash_t(m_metrics) *tags_used; \/\/ cram_metrics[], per tag types in use.$/;"	m	struct:cram_fd
tags_used	src/utils/htslib/cram/cram_structs.h	/^    khash_t(m_tagmap) *tags_used; \/\/ set of tag types in use, for tag encoding map$/;"	m	struct:cram_container
tail	src/utils/htslib/sam.c	/^    lbnode_t *head, *tail;$/;"	m	struct:__bam_plp_t	file:
target_len	src/utils/htslib/htslib/sam.h	/^    uint32_t *target_len;$/;"	m	struct:__anon38
target_name	src/utils/htslib/htslib/sam.h	/^    char **target_name;$/;"	m	struct:__anon38
targets	src/utils/htslib/htslib/synced_bcf_reader.h	/^    bcf_sr_regions_t *regions, *targets;    \/\/ see bcf_sr_set_[targets|regions] for description$/;"	m	struct:__anon33
targets_als	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int targets_als;    \/\/ subset to targets not only by position but also by alleles?$/;"	m	struct:__anon33
targets_exclude	src/utils/htslib/htslib/synced_bcf_reader.h	/^    int targets_exclude;$/;"	m	struct:__anon33
targets_fname	src/utils/htslib/tabix.c	/^    char *regions_fname, *targets_fname;$/;"	m	struct:__anon99	file:
tbi	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
tbx	src/utils/htslib/htslib/synced_bcf_reader.h	/^    tbx_t *tbx;             \/\/ tabix index$/;"	m	struct:_bcf_sr_regions_t
tbx_bgzf_itr_next	src/utils/htslib/htslib/tbx.h	61;"	d
tbx_conf_bed	src/utils/htslib/tbx.c	/^const tbx_conf_t tbx_conf_bed = { TBX_UCSC, 1, 2, 3, '#', 0 };$/;"	v
tbx_conf_psltbl	src/utils/htslib/tbx.c	/^const tbx_conf_t tbx_conf_psltbl = { TBX_UCSC, 15, 17, 18, '#', 0 };$/;"	v
tbx_conf_sam	src/utils/htslib/tbx.c	/^const tbx_conf_t tbx_conf_sam = { TBX_SAM, 3, 4, 0, '@', 0 };$/;"	v
tbx_conf_t	src/utils/htslib/htslib/tbx.h	/^} tbx_conf_t;$/;"	t	typeref:struct:__anon36
tbx_conf_vcf	src/utils/htslib/tbx.c	/^const tbx_conf_t tbx_conf_vcf = { TBX_VCF, 1, 2, 0, '#', 0 };$/;"	v
tbx_destroy	src/utils/htslib/tbx.c	/^void tbx_destroy(tbx_t *tbx)$/;"	f
tbx_idx	src/utils/htslib/htslib/synced_bcf_reader.h	/^    tbx_t *tbx_idx;$/;"	m	struct:__anon31
tbx_index	src/utils/htslib/tbx.c	/^tbx_t *tbx_index(BGZF *fp, int min_shift, const tbx_conf_t *conf)$/;"	f
tbx_index_build	src/utils/htslib/tbx.c	/^int tbx_index_build(const char *fn, int min_shift, const tbx_conf_t *conf)$/;"	f
tbx_index_build2	src/utils/htslib/tbx.c	/^int tbx_index_build2(const char *fn, const char *fnidx, int min_shift, const tbx_conf_t *conf)$/;"	f
tbx_index_build3	src/utils/htslib/tbx.c	/^int tbx_index_build3(const char *fn, const char *fnidx, int min_shift, int n_threads, const tbx_conf_t *conf)$/;"	f
tbx_index_load	src/utils/htslib/tbx.c	/^tbx_t *tbx_index_load(const char *fn)$/;"	f
tbx_index_load2	src/utils/htslib/tbx.c	/^tbx_t *tbx_index_load2(const char *fn, const char *fnidx)$/;"	f
tbx_intv_t	src/utils/htslib/tbx.c	/^} tbx_intv_t;$/;"	t	typeref:struct:__anon115	file:
tbx_itr_destroy	src/utils/htslib/htslib/tbx.h	57;"	d
tbx_itr_next	src/utils/htslib/htslib/tbx.h	60;"	d
tbx_itr_queryi	src/utils/htslib/htslib/tbx.h	58;"	d
tbx_itr_querys	src/utils/htslib/htslib/tbx.h	59;"	d
tbx_name2id	src/utils/htslib/tbx.c	/^int tbx_name2id(tbx_t *tbx, const char *ss)$/;"	f
tbx_parse1	src/utils/htslib/tbx.c	/^int tbx_parse1(const tbx_conf_t *conf, int len, char *line, tbx_intv_t *intv)$/;"	f
tbx_readrec	src/utils/htslib/tbx.c	/^int tbx_readrec(BGZF *fp, void *tbxv, void *sv, int *tid, int *beg, int *end)$/;"	f
tbx_seqnames	src/utils/htslib/tbx.c	/^const char **tbx_seqnames(tbx_t *tbx, int *n)$/;"	f
tbx_set_meta	src/utils/htslib/tbx.c	/^void tbx_set_meta(tbx_t *tbx)$/;"	f
tbx_t	src/utils/htslib/htslib/tbx.h	/^} tbx_t;$/;"	t	typeref:struct:__anon37
templates_path	docs/conf.py	/^templates_path = ['templates']$/;"	v
testChromOrder	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::testChromOrder(const Record *rec)$/;"	f	class:NewChromSweep
testCmdArgs	src/utils/Contexts/ContextBase.cpp	/^bool ContextBase::testCmdArgs(int argc, char **argv) {$/;"	f	class:ContextBase
testDualQueue	src/nekSandbox1/nekSandboxMain.cpp	/^void testDualQueue(Context *context) {$/;"	f
testInputSortOrder	src/utils/FileRecordTools/FileRecordMgr.cpp	/^void FileRecordMgr::testInputSortOrder(Record *record)$/;"	f	class:FileRecordMgr
testLexicoQueryAfterDb	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::testLexicoQueryAfterDb(const Record *queryRec, const Record *dbRec)$/;"	f	class:NewChromSweep
testNameConventions	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::testNameConventions(const Record *record) {$/;"	f	class:ContextBase
testThatAllDbChromsExistInQuery	src/utils/NewChromsweep/NewChromsweep.cpp	/^void NewChromSweep::testThatAllDbChromsExistInQuery()$/;"	f	class:NewChromSweep
testType	src/utils/Contexts/ContextBase.h	/^	typedef enum { YES, NO, UNTESTED } testType;$/;"	t	class:ContextBase	typeref:enum:ContextBase::__anon131
test_and_fetch	src/utils/htslib/hts.c	/^static int test_and_fetch(const char *fn, const char **local_fn)$/;"	f	file:
test_bcf_sr_sort	src/utils/htslib/test/test.pl	/^sub test_bcf_sr_sort$/;"	s
test_bgzf_getline	src/utils/htslib/test/test_bgzf.c	/^static int test_bgzf_getline(Files *f, const char *mode, int nthreads) {$/;"	f	file:
test_check_EOF	src/utils/htslib/test/test_bgzf.c	/^static int test_check_EOF(char *name, int expected) {$/;"	f	file:
test_cmd	src/utils/htslib/test/test.pl	/^sub test_cmd$/;"	s
test_command	src/utils/htslib/test/test.pl	/^sub test_command$/;"	s
test_convert_padded_header	src/utils/htslib/test/test.pl	/^sub test_convert_padded_header$/;"	s
test_embed_eof	src/utils/htslib/test/test_bgzf.c	/^static int test_embed_eof(Files *f, const char *mode, int nthreads) {$/;"	f	file:
test_get_format_values	src/utils/htslib/test/test-vcf-api.c	/^void test_get_format_values(const char *fname)$/;"	f
test_get_info_values	src/utils/htslib/test/test-vcf-api.c	/^void test_get_info_values(const char *fname)$/;"	f
test_index_load_dump	src/utils/htslib/test/test_bgzf.c	/^static int test_index_load_dump(Files *f) {$/;"	f	file:
test_index_seek_getc	src/utils/htslib/test/test_bgzf.c	/^static int test_index_seek_getc(Files *f, const char *mode,$/;"	f	file:
test_logging	src/utils/htslib/test/test.pl	/^sub test_logging$/;"	s
test_op	src/utils/htslib/test/test_view.c	/^enum test_op {$/;"	g	file:
test_pipe	src/utils/htslib/thread_pool.c	/^int test_pipe(int n) {$/;"	f
test_read	src/utils/htslib/test/test_bgzf.c	/^static int test_read(Files *f) {$/;"	f	file:
test_rebgzip	src/utils/htslib/test/test.pl	/^sub test_rebgzip$/;"	s
test_square	src/utils/htslib/thread_pool.c	/^int test_square(int n) {$/;"	f
test_squareB	src/utils/htslib/thread_pool.c	/^int test_squareB(int n) {$/;"	f
test_squareB_dispatcher	src/utils/htslib/thread_pool.c	/^static void *test_squareB_dispatcher(void *arg) {$/;"	f	file:
test_square_u	src/utils/htslib/thread_pool.c	/^int test_square_u(int n) {$/;"	f
test_streams	src/nekSandbox1/nekSandboxMain.cpp	/^void test_streams()$/;"	f
test_vcf_api	src/utils/htslib/test/test.pl	/^sub test_vcf_api$/;"	s
test_vcf_sweep	src/utils/htslib/test/test.pl	/^sub test_vcf_sweep$/;"	s
test_vcf_various	src/utils/htslib/test/test.pl	/^sub test_vcf_various$/;"	s
test_view	src/utils/htslib/test/test.pl	/^sub test_view$/;"	s
test_write_read	src/utils/htslib/test/test_bgzf.c	/^static int test_write_read(Files *f, const char *mode, Open_method method,$/;"	f	file:
tests_16_bit	src/utils/htslib/test/hts_endian.c	/^Test16 tests_16_bit[] = {$/;"	v
tests_32_bit	src/utils/htslib/test/hts_endian.c	/^Test32 tests_32_bit[] = {$/;"	v
tests_64_bit	src/utils/htslib/test/hts_endian.c	/^Test64 tests_64_bit[] = {$/;"	v
tests_double	src/utils/htslib/test/hts_endian.c	/^Test_double tests_double[] = {$/;"	v
tests_float	src/utils/htslib/test/hts_endian.c	/^Test_float tests_float[] = {$/;"	v
testv	src/utils/htslib/test/test.pl	/^sub testv {$/;"	s
text	src/utils/htslib/cram/sam_header.h	/^    kstring_t text;           \/\/!< concatenated text, indexed by SAM_hdr_tag$/;"	m	struct:__anon67
text	src/utils/htslib/htslib/sam.h	/^    char *text;$/;"	m	struct:__anon38
text	src/utils/htslib/test/test_bgzf.c	/^    const unsigned char *text;$/;"	m	struct:__anon50	file:
text_format	src/utils/htslib/htslib/hts.h	/^    binary_format, text_format,$/;"	e	enum:htsExactFormat
thread_pool_internal_h	src/utils/htslib/Makefile	/^thread_pool_internal_h = thread_pool_internal.h $(htslib_thread_pool_h)$/;"	m
tid	src/utils/htslib/htslib/hts.h	/^    int tid, beg, end, n_off, i;$/;"	m	struct:__anon16
tid	src/utils/htslib/htslib/sam.h	/^    int32_t tid;$/;"	m	struct:__anon39
tid	src/utils/htslib/sam.c	/^    int32_t tid, pos, max_tid, max_pos;$/;"	m	struct:__bam_plp_t	file:
tid	src/utils/htslib/tbx.c	/^    int tid;$/;"	m	struct:__anon115	file:
tid	src/utils/htslib/thread_pool_internal.h	/^    pthread_t tid;$/;"	m	struct:__anon8
tid_l	src/utils/BamTools/include/BamReader.hpp	/^			int tid_l, tid_r;$/;"	m	struct:BamTools::BamReader::_SamFile
tid_r	src/utils/BamTools/include/BamReader.hpp	/^			int tid_l, tid_r;$/;"	m	struct:BamTools::BamReader::_SamFile
tieModeType	src/utils/Contexts/ContextClosest.h	/^    typedef enum { FIRST_TIE, LAST_TIE, ALL_TIES} tieModeType;$/;"	t	class:ContextClosest	typeref:enum:ContextClosest::__anon127
titles	src/multiIntersectBed/multiIntersectBed.h	/^    vector<string>  titles;$/;"	m	class:MultiIntersectBed
titles	src/unionBedGraphs/unionBedGraphs.h	/^    vector<string>  titles;$/;"	m	class:UnionBedGraphs
tlen	src/utils/htslib/cram/cram_structs.h	/^    int32_t tlen;         \/\/ TS$/;"	m	struct:cram_record
tlen_approx	src/utils/htslib/cram/cram_structs.h	/^    int tlen_approx;                    \/\/ max TLEN calculation offset.$/;"	m	struct:cram_fd
tlen_zero	src/utils/htslib/cram/cram_structs.h	/^    int tlen_zero;                      \/\/ If true, permit tlen 0 (=> tlen calculated)$/;"	m	struct:cram_fd
tmp_bgzf	src/utils/htslib/test/test_bgzf.c	/^    char *tmp_bgzf;$/;"	m	struct:__anon50	file:
tmp_idx	src/utils/htslib/test/test_bgzf.c	/^    char *tmp_idx;$/;"	m	struct:__anon50	file:
tmp_suffix	src/utils/htslib/test/test_bgzf.c	/^const char *tmp_suffix  = ".tmp";$/;"	v
tmps	src/utils/htslib/htslib/synced_bcf_reader.h	/^    kstring_t tmps;$/;"	m	struct:__anon33
tn	src/utils/htslib/cram/cram_structs.h	/^    int32_t tn;           \/\/ idx to s->tn_blk$/;"	m	struct:cram_record
tn_blk	src/utils/htslib/cram/cram_structs.h	/^    cram_block *tn_blk;$/;"	m	struct:cram_slice
tn_id	src/utils/htslib/cram/cram_structs.h	/^    int tn_id;$/;"	m	struct:cram_slice
toArray	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^void KeyListOpsMethods::toArray(bool useNum, SORT_TYPE sortVal) {$/;"	f	class:KeyListOpsMethods
toLower	src/utils/stringUtilities/stringUtilities.h	/^string toLower(const string& s) {$/;"	f
toLowerCase	src/utils/sequenceUtilities/sequenceUtils.cpp	/^void toLowerCase(std::string &seq)$/;"	f
toStr	src/utils/general/BTlist.h	/^	void toStr(string &str, bool append = false) const $/;"	f	class:BTlist
toUpperCase	src/utils/sequenceUtilities/sequenceUtils.cpp	/^void toUpperCase(std::string &seq)$/;"	f
to_hex	src/utils/htslib/test/hts_endian.c	/^static char * to_hex(uint8_t *buf, int len) {$/;"	f	file:
token	src/utils/htslib/hfile_s3.c	/^    kstring_t token;$/;"	m	struct:__anon55	file:
token_type	src/utils/htslib/textutils.c	/^static char token_type(hts_json_token *token)$/;"	f	file:
tokenise_search_path	src/utils/htslib/cram/open_trace_file.c	/^char *tokenise_search_path(char *searchpath) {$/;"	f
tokenize	src/utils/general/Tokenizer.cpp	/^int Tokenizer::tokenize(const string &str, char delimiter, bool eofHit, bool isCompressed) {$/;"	f	class:Tokenizer
tolower_c	src/utils/htslib/hts_internal.h	/^static inline char tolower_c(char c) { return tolower((unsigned char) c); }$/;"	f
top	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^Record * StrandQueue::top(Record::strandType strand) {$/;"	f	class:StrandQueue
top	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^Record *StrandQueue::top()$/;"	f	class:StrandQueue
totalSize	src/utils/NewChromsweep/CloseSweep.h	/^	size_t totalSize() const { return _totalRecs; }$/;"	f	class:RecDistList
total_time	src/utils/htslib/thread_pool_internal.h	/^    long long total_time, wait_time;$/;"	m	struct:hts_tpool
toupper_c	src/utils/htslib/hts_internal.h	/^static inline char toupper_c(char c) { return toupper((unsigned char) c); }$/;"	f
tpool_worker	src/utils/htslib/thread_pool.c	/^static void *tpool_worker(void *arg) {$/;"	f	file:
transl	src/utils/htslib/htslib/vcf.h	/^    int ntransl, *transl[2];    \/\/ for bcf_translate()$/;"	m	struct:__anon21
trial	src/utils/htslib/cram/cram_structs.h	/^    int trial;$/;"	m	struct:__anon82
tryToAddRecord	src/utils/NewChromsweep/CloseSweep.cpp	/^CloseSweep::rateOvlpType CloseSweep::tryToAddRecord(Record *cacheRec, int dist, int dbIdx, bool &stopScanning, chromDirType chromDir, streamDirType streamDir) {$/;"	f	class:CloseSweep
tryToTakeFromStorage	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^Record *FileRecordMergeMgr::tryToTakeFromStorage() {$/;"	f	class:FileRecordMergeMgr
tryToTakeFromStorage	src/utils/FileRecordTools/FileRecordMergeMgr.cpp	/^Record *FileRecordMergeMgr::tryToTakeFromStorage(Record::strandType strand) {$/;"	f	class:FileRecordMergeMgr
try_bgzf_close	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_close(BGZF **bgz, const char *name, const char *func) {$/;"	f	file:
try_bgzf_compression	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_compression(BGZF *fp, int expect,$/;"	f	file:
try_bgzf_dopen	src/utils/htslib/test/test_bgzf.c	/^static BGZF * try_bgzf_dopen(const char *name, const char *mode,$/;"	f	file:
try_bgzf_getc	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_getc(BGZF *fp, size_t pos, int expected,$/;"	f	file:
try_bgzf_hopen	src/utils/htslib/test/test_bgzf.c	/^static BGZF * try_bgzf_hopen(const char *name, const char *mode,$/;"	f	file:
try_bgzf_index_build_init	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_index_build_init(BGZF *bgz,$/;"	f	file:
try_bgzf_index_dump	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_index_dump(BGZF *fp, const char *bname, const char *suffix,$/;"	f	file:
try_bgzf_index_load	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_index_load(BGZF *fp, const char *bname, const char *suffix,$/;"	f	file:
try_bgzf_mt	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_mt(BGZF *bgz, int nthreads, const char *func) {$/;"	f	file:
try_bgzf_open	src/utils/htslib/test/test_bgzf.c	/^static BGZF * try_bgzf_open(const char *name, const char *mode,$/;"	f	file:
try_bgzf_read	src/utils/htslib/test/test_bgzf.c	/^static ssize_t try_bgzf_read(BGZF *fp, void *data, size_t length,$/;"	f	file:
try_bgzf_useek	src/utils/htslib/test/test_bgzf.c	/^static int try_bgzf_useek(BGZF *fp, long uoffset, int where,$/;"	f	file:
try_bgzf_write	src/utils/htslib/test/test_bgzf.c	/^static ssize_t try_bgzf_write(BGZF *fp, const void *data, size_t length,$/;"	f	file:
try_fclose	src/utils/htslib/test/test_bgzf.c	/^static int try_fclose(FILE **file, const char *name, const char *func) {$/;"	f	file:
try_fopen	src/utils/htslib/test/test_bgzf.c	/^static FILE * try_fopen(const char *name, const char *mode) {$/;"	f	file:
try_fread	src/utils/htslib/test/test_bgzf.c	/^static ssize_t try_fread(FILE *in, void *buf, size_t len,$/;"	f	file:
try_fseek_start	src/utils/htslib/test/test_bgzf.c	/^static int try_fseek_start(FILE *f, const char *name, const char *func) {$/;"	f	file:
tsize	src/utils/htslib/thread_pool_internal.h	/^    int tsize;    \/\/ maximum number of jobs$/;"	m	struct:hts_tpool
tweak_overlap_quality	src/utils/htslib/sam.c	/^static void tweak_overlap_quality(bam1_t *a, bam1_t *b)$/;"	f	file:
ty	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_type *ty;$/;"	m	struct:__anon64
ty	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_type *ty;$/;"	m	struct:__anon65
ty	src/utils/htslib/cram/sam_header.h	/^    SAM_hdr_type *ty;$/;"	m	struct:__anon66
type	src/utils/htslib/bcf_sr_sort.h	/^    int type;       \/\/ VCF_SNP, VCF_REF, etc.$/;"	m	struct:__anon117
type	src/utils/htslib/cram/cram_codecs.h	/^    enum cram_external_type type;$/;"	m	struct:__anon76	typeref:enum:__anon76::cram_external_type
type	src/utils/htslib/hts_internal.h	/^    char type;    \/\/\/< Token type$/;"	m	struct:hts_json_token
type	src/utils/htslib/htslib/knetfile.h	/^	int type, fd;$/;"	m	struct:knetFile_s
type	src/utils/htslib/htslib/vcf.h	/^    int n, size, type;  \/\/ n: number of values per-sample; size: number of bytes per-sample; type: one of BCF_BT_* types$/;"	m	struct:__anon23
type	src/utils/htslib/htslib/vcf.h	/^    int type, len;  \/\/ type: one of BCF_BT_* types; len: vector length, 1 for scalars$/;"	m	struct:__anon24
type	src/utils/htslib/htslib/vcf.h	/^    int type, n;    \/\/ variant type and the number of bases affected, negative for deletions$/;"	m	struct:__anon22
type	src/utils/htslib/htslib/vcf.h	/^    int type;       \/\/ One of the BCF_HL_* type$/;"	m	struct:__anon18
type_pool	src/utils/htslib/cram/sam_header.h	/^    pool_alloc_t   *type_pool;\/\/!< Pool of SAM_hdr_type structs$/;"	m	struct:__anon67
u	src/utils/htslib/htslib/hts.h	/^    uint64_t u, v;$/;"	m	struct:__anon15
u16	src/utils/htslib/test/hts_endian.c	/^    uint16_t u16;$/;"	m	struct:__anon45	file:
u16_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void u16_to_le(uint16_t val, uint8_t *buf) {$/;"	f
u32	src/utils/htslib/test/hts_endian.c	/^    uint32_t u32;$/;"	m	struct:__anon46	file:
u32_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void u32_to_le(uint32_t val, uint8_t *buf) {$/;"	f
u64	src/utils/htslib/test/hts_endian.c	/^    uint64_t u64;$/;"	m	struct:__anon47	file:
u64_to_le	src/utils/htslib/htslib/hts_endian.h	/^static inline void u64_to_le(uint64_t val, uint8_t *buf) {$/;"	f
u8	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8[2];$/;"	m	struct:__anon45	file:
u8	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8[4];$/;"	m	struct:__anon46	file:
u8	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8[4];$/;"	m	struct:__anon48	file:
u8	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8[8];$/;"	m	struct:__anon47	file:
u8	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8[8];$/;"	m	struct:__anon49	file:
u8_unaligned	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8_unaligned[3];$/;"	m	struct:__anon45	file:
u8_unaligned	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8_unaligned[5];$/;"	m	struct:__anon46	file:
u8_unaligned	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8_unaligned[5];$/;"	m	struct:__anon48	file:
u8_unaligned	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8_unaligned[9];$/;"	m	struct:__anon47	file:
u8_unaligned	src/utils/htslib/test/hts_endian.c	/^    uint8_t u8_unaligned[9];$/;"	m	struct:__anon49	file:
uaddr	src/utils/htslib/bgzf.c	/^    uint64_t uaddr;  \/\/ offset w.r.t. uncompressed data$/;"	m	struct:__anon54	file:
ubg_stl_basename	src/unionBedGraphs/unionBedGraphsMain.cpp	/^std::string ubg_stl_basename(const std::string& path)$/;"	f
ublock_addr	src/utils/htslib/bgzf.c	/^    uint64_t ublock_addr;   \/\/ offset of the current block (uncompressed data)$/;"	m	struct:__bgzidx_t	file:
ubyte_t	src/utils/htslib/kstring.c	/^typedef unsigned char ubyte_t;$/;"	t	file:
uc	src/utils/htslib/cram/cram_structs.h	/^typedef unsigned char uc;$/;"	t
uflow	src/utils/general/PushBackStreamBuf.h	/^	int uflow() { return sbumpc(); }$/;"	f	class:PushBackStreamBuf
uint16_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint16_t uint16_u __attribute__ ((__aligned__ (1)));$/;"	t
uint16_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint16_t uint16_u;$/;"	t
uint32_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint32_t uint32_u __attribute__ ((__aligned__ (1)));$/;"	t
uint32_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint32_t uint32_u;$/;"	t
uint64_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint64_t uint64_u __attribute__ ((__aligned__ (1)));$/;"	t
uint64_u	src/utils/htslib/htslib/hts_endian.h	/^typedef uint64_t uint64_u;$/;"	t
uncomp	src/utils/htslib/cram/cram_structs.h	/^    char *uncomp; \/\/ A single block of uncompressed data$/;"	m	struct:cram_block_compression_hdr
uncomp_alloc	src/utils/htslib/cram/cram_structs.h	/^    size_t uncomp_size, uncomp_alloc;$/;"	m	struct:cram_block_compression_hdr
uncomp_data	src/utils/htslib/bgzf.c	/^    unsigned char uncomp_data[BGZF_MAX_BLOCK_SIZE];$/;"	m	struct:bgzf_job	file:
uncomp_len	src/utils/htslib/bgzf.c	/^    size_t uncomp_len;$/;"	m	struct:bgzf_job	file:
uncomp_size	src/utils/htslib/cram/cram_structs.h	/^    int32_t  uncomp_size;$/;"	m	struct:cram_block
uncomp_size	src/utils/htslib/cram/cram_structs.h	/^    size_t uncomp_size, uncomp_alloc;$/;"	m	struct:cram_block_compression_hdr
uncompressed_address	src/utils/htslib/htslib/bgzf.h	/^    int64_t block_address, uncompressed_address;$/;"	m	struct:BGZF
uncompressed_block	src/utils/htslib/htslib/bgzf.h	/^    void *uncompressed_block, *compressed_block;$/;"	m	struct:BGZF
underflow	src/utils/general/InflateStreamBuf.h	/^	virtual int underflow () {$/;"	f	class:InflateStreamBuf
underflow	src/utils/general/PushBackStreamBuf.cpp	/^int PushBackStreamBuf::underflow()$/;"	f	class:PushBackStreamBuf
underflow	src/utils/gzstream/gzstream.C	/^int gzstreambuf::underflow() { \/\/ used for input buffer only$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
undoZeroLength	src/utils/FileRecordTools/Records/Record.cpp	/^void Record::undoZeroLength()$/;"	f	class:Record
unionbedgraphs_help	src/unionBedGraphs/unionBedGraphsMain.cpp	/^void unionbedgraphs_help(void) {$/;"	f
unionbedgraphs_main	src/unionBedGraphs/unionBedGraphsMain.cpp	/^int unionbedgraphs_main(int argc, char* argv[])$/;"	f
unionbedgraphs_showexamples	src/unionBedGraphs/unionBedGraphsMain.cpp	/^void unionbedgraphs_showexamples()$/;"	f
uniqueSize	src/utils/NewChromsweep/CloseSweep.h	/^	int uniqueSize() const { return _currNumIdxs; }$/;"	f	class:RecDistList
unknown_category	src/utils/htslib/htslib/hts.h	/^    unknown_category,$/;"	e	enum:htsFormatCategory
unknown_format	src/utils/htslib/htslib/hts.h	/^    unknown_format,$/;"	e	enum:htsExactFormat
unmapped_placed	src/utils/htslib/cram/cram_structs.h	/^    int unmapped_placed;$/;"	m	struct:cram_block_compression_hdr
unmapped_qs_included	src/utils/htslib/cram/cram_structs.h	/^    int unmapped_qs_included;$/;"	m	struct:cram_block_compression_hdr
unpackInt16	src/utils/htslib/bgzf.c	/^static inline int unpackInt16(const uint8_t *buffer)$/;"	f	file:
unpack_size	src/utils/htslib/htslib/vcf.h	/^    int unpack_size[3];     \/\/ the original block size of ID, REF+ALT and FILTER$/;"	m	struct:__anon27
unpacked	src/utils/htslib/htslib/vcf.h	/^    int unpacked;           \/\/ remember what has been unpacked to allow calling bcf_unpack() repeatedly without redoing the work$/;"	m	struct:__anon27
unsorted	src/utils/htslib/cram/cram_structs.h	/^    int unsorted;		 \/\/ true is AP_delta is 0.$/;"	m	struct:cram_container
unsorted	src/utils/htslib/cram/cram_structs.h	/^    int unsorted;$/;"	m	struct:cram_fd
unused1	src/utils/htslib/htslib/sam.h	/^    uint8_t unused1;$/;"	m	struct:__anon39
upCast	src/closestFile/closestFile.h	/^	virtual ContextClosest *upCast(ContextBase *context) { return static_cast<ContextClosest *>(context); }$/;"	f	class:ClosestFile
upCast	src/complementFile/complementFile.h	/^	virtual ContextComplement *upCast(ContextBase *context) { return static_cast<ContextComplement *>(context); }$/;"	f	class:ComplementFile
upCast	src/coverageFile/coverageFile.h	/^	virtual ContextCoverage *upCast(ContextBase *context) { return static_cast<ContextCoverage*>(context); }$/;"	f	class:CoverageFile
upCast	src/fisher/fisher.h	/^    virtual ContextFisher *upCast(ContextBase *context) { return static_cast<ContextFisher *>(context); }$/;"	f	class:Fisher
upCast	src/groupBy/groupBy.h	/^	virtual ContextGroupBy *upCast(ContextBase *context) { return static_cast<ContextGroupBy *>(context); }$/;"	f	class:GroupBy
upCast	src/intersectFile/intersectFile.h	/^	virtual ContextIntersect *upCast(ContextBase *context) { return static_cast<ContextIntersect *>(context); }$/;"	f	class:IntersectFile
upCast	src/jaccard/jaccard.h	/^	virtual ContextJaccard *upCast(ContextBase *context) { return static_cast<ContextJaccard *>(context); }$/;"	f	class:Jaccard
upCast	src/mapFile/mapFile.h	/^	virtual ContextMap *upCast(ContextBase *context) { return static_cast<ContextMap *>(context); }$/;"	f	class:MapFile
upCast	src/mergeFile/mergeFile.h	/^	virtual ContextMerge *upCast(ContextBase *context) { return static_cast<ContextMerge *>(context); }$/;"	f	class:MergeFile
upCast	src/sampleFile/sampleFile.h	/^	virtual ContextSample *upCast(ContextBase *context) { return static_cast<ContextSample *>(context); }$/;"	f	class:SampleFile
upCast	src/spacingFile/spacingFile.h	/^    virtual ContextSpacing *upCast(ContextBase *context) { return static_cast<ContextSpacing *>(context); }$/;"	f	class:SpacingFile
upCast	src/subtractFile/subtractFile.h	/^	virtual ContextSubtract *upCast(ContextBase *context) { return static_cast<ContextSubtract *>(context); }$/;"	f	class:SubtractFile
upCastFRM	src/jaccard/jaccard.h	/^	virtual FileRecordMergeMgr *upCastFRM(FileRecordMgr *frm) { return static_cast<FileRecordMergeMgr *>(frm); }$/;"	f	class:Jaccard
upCastSweep	src/closestFile/closestFile.h	/^	virtual CloseSweep *upCastSweep() { return static_cast<CloseSweep *>(_sweep); }$/;"	f	class:ClosestFile
update_loff	src/utils/htslib/hts.c	/^static void update_loff(hts_idx_t *idx, int i, int free_lidx)$/;"	f	file:
update_range	src/utils/BamTools/include/BamReader.hpp	/^			bool update_range()$/;"	f	struct:BamTools::BamReader::_SamFile
url	src/utils/htslib/multipart.c	/^    char *url;$/;"	m	struct:hfile_part	file:
urldecode_kput	src/utils/htslib/hfile_s3.c	/^urldecode_kput(const char *s, int len, kstring_t *str)$/;"	f	file:
usage	src/regressTest/RegressTest.cpp	/^void RegressTest::usage() const {$/;"	f	class:RegressTest
usage	src/regressTest/regressTestMain.cpp	/^void usage()  {$/;"	f
usage	src/split/splitBed.cpp	/^void BedSplit::usage(std::ostream& out)$/;"	f	class:BedSplit
usage	src/utils/htslib/htsfile.c	/^static void usage(FILE *fp, int status)$/;"	f	file:
usage	src/utils/htslib/tabix.c	/^static int usage(void)$/;"	f	file:
usage	src/utils/htslib/test/test-bcf-sr.c	/^void usage(void)$/;"	f
useFullHeader	src/utils/Fasta/Fasta.h	/^	bool useFullHeader;$/;"	m	class:FastaIndex
useFullHeader	src/utils/Fasta/Fasta.h	/^	bool useFullHeader;$/;"	m	class:FastaIndexEntry
use_bz2	src/utils/htslib/cram/cram_structs.h	/^    int use_bz2;$/;"	m	struct:cram_fd
use_lzma	src/utils/htslib/cram/cram_structs.h	/^    int use_lzma;$/;"	m	struct:cram_fd
use_rans	src/utils/htslib/cram/cram_structs.h	/^    int use_rans;$/;"	m	struct:cram_fd
used	src/utils/htslib/cram/pooled_alloc.h	/^    size_t  used;$/;"	m	struct:__anon56
used	src/utils/htslib/cram/string_alloc.h	/^    size_t used;$/;"	m	struct:__anon62
useragent	src/utils/htslib/hfile_libcurl.c	/^    kstring_t useragent;$/;"	m	struct:__anon105	file:
usingfullheader	src/utils/Fasta/Fasta.h	/^	bool usingfullheader;$/;"	m	class:FastaReference
usingmmap	src/utils/Fasta/Fasta.h	/^        bool usingmmap;$/;"	m	class:FastaReference
usr	src/utils/htslib/regidx.c	/^    void *usr;              \/\/ user data to pass to regidx_parse_f$/;"	m	struct:_regidx_t	file:
v	src/utils/htslib/htslib/hts.h	/^    uint64_t u, v;$/;"	m	struct:__anon15
v1	src/utils/htslib/htslib/vcf.h	/^    } v1; \/\/ only set if $len==1; for easier access$/;"	m	struct:__anon24	typeref:union:__anon24::__anon25
val	src/utils/htslib/htslib/hts.h	/^    } val;$/;"	m	struct:hts_opt	typeref:union:hts_opt::__anon14
val	src/utils/htslib/htslib/vcf.h	/^    const bcf_idinfo_t *val;$/;"	m	struct:__anon20
val2code	src/utils/htslib/cram/cram_codecs.h	/^    int val2code[MAX_HUFF+1]; \/\/ value to code lookup for small values$/;"	m	struct:__anon72
val_codec	src/utils/htslib/cram/cram_codecs.h	/^    struct cram_codec *val_codec;$/;"	m	struct:__anon77	typeref:struct:__anon77::cram_codec
val_codec	src/utils/htslib/cram/cram_codecs.h	/^    struct cram_codec *val_codec;$/;"	m	struct:__anon79	typeref:struct:__anon79::cram_codec
val_dat	src/utils/htslib/cram/cram_codecs.h	/^    void *val_dat;$/;"	m	struct:__anon79
val_encoding	src/utils/htslib/cram/cram_codecs.h	/^    enum cram_encoding val_encoding;$/;"	m	struct:__anon79	typeref:enum:__anon79::cram_encoding
vals	src/utils/htslib/htslib/vcf.h	/^    char **keys, **vals;    \/\/ The key=value pairs$/;"	m	struct:__anon18
vals	test/fisher/sim.py	/^    vals = []$/;"	v
value	src/utils/FileRecordTools/Records/RecordList.h	/^	Record * value() const { return _val; }$/;"	f	class:RecordListNode
value	src/utils/general/BTlist.h	/^	const T &value() const { return _val; }$/;"	f	class:BTlistNode
value	src/utils/htslib/htslib/vcf.h	/^    char *value;    \/\/ Set only for generic lines, NULL for FILTER\/INFO, etc.$/;"	m	struct:__anon18
var	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ list of compatible variants that can be output together$/;"	m	struct:__anon119
var	src/utils/htslib/bcf_sr_sort.h	/^    int nvar, mvar, *var;   \/\/ the variants and their type$/;"	m	struct:__anon118
var	src/utils/htslib/bcf_sr_sort.h	/^    var_t *var;             \/\/ list of all variants from all readers$/;"	m	struct:__anon120
var	src/utils/htslib/htslib/vcf.h	/^    variant_t *var;     \/\/ $var and $var_type set only when set_variant_types called$/;"	m	struct:__anon26
var_str2int	src/utils/htslib/bcf_sr_sort.h	/^    void *var_str2int;$/;"	m	struct:__anon120
var_t	src/utils/htslib/bcf_sr_sort.h	/^var_t;$/;"	t	typeref:struct:__anon117
var_type	src/utils/htslib/htslib/vcf.h	/^    int n_var, var_type;$/;"	m	struct:__anon26
var_type	src/utils/htslib/test/test-bcf-sr.pl	/^sub var_type$/;"	s
variant_data	src/utils/htslib/htslib/hts.h	/^    variant_data,     \/\/ Variant calling data -- VCF, BCF, etc$/;"	e	enum:htsFormatCategory
variant_t	src/utils/htslib/htslib/vcf.h	/^} variant_t;$/;"	t	typeref:struct:__anon22
varset_t	src/utils/htslib/bcf_sr_sort.h	/^varset_t;$/;"	t	typeref:struct:__anon119
vcf	src/utils/htslib/bcf_sr_sort.h	/^    int nvcf, mvcf, *vcf;   \/\/ the list of readers with the same variants$/;"	m	struct:__anon117
vcf	src/utils/htslib/htslib/hts.h	/^    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,$/;"	e	enum:htsExactFormat
vcfFile	src/utils/htslib/htslib/vcf.h	/^    typedef htsFile vcfFile;$/;"	t
vcf_buf	src/utils/htslib/bcf_sr_sort.h	/^    vcf_buf_t *vcf_buf;     \/\/ records sorted in output order, for each VCF$/;"	m	struct:__anon120
vcf_buf_t	src/utils/htslib/bcf_sr_sort.h	/^vcf_buf_t;$/;"	t	typeref:struct:__anon116
vcf_close	src/utils/htslib/htslib/vcf.h	288;"	d
vcf_format	src/utils/htslib/vcf.c	/^int vcf_format(const bcf_hdr_t *h, const bcf1_t *v, kstring_t *s)$/;"	f
vcf_format1	src/utils/htslib/htslib/vcf.h	249;"	d
vcf_hdr_read	src/utils/htslib/vcf.c	/^bcf_hdr_t *vcf_hdr_read(htsFile *fp)$/;"	f
vcf_hdr_write	src/utils/htslib/vcf.c	/^int vcf_hdr_write(htsFile *fp, const bcf_hdr_t *h)$/;"	f
vcf_open	src/utils/htslib/htslib/vcf.h	286;"	d
vcf_parse	src/utils/htslib/vcf.c	/^int vcf_parse(kstring_t *s, const bcf_hdr_t *h, bcf1_t *v)$/;"	f
vcf_parse1	src/utils/htslib/htslib/vcf.h	247;"	d
vcf_parse_error	src/utils/htslib/htslib/synced_bcf_reader.h	/^    header_error, no_eof, no_memory, vcf_parse_error, bcf_read_error$/;"	e	enum:__anon32
vcf_parse_format	src/utils/htslib/vcf.c	/^static int vcf_parse_format(kstring_t *s, const bcf_hdr_t *h, bcf1_t *v, char *p, char *q)$/;"	f	file:
vcf_read	src/utils/htslib/vcf.c	/^int vcf_read(htsFile *fp, const bcf_hdr_t *h, bcf1_t *v)$/;"	f
vcf_read1	src/utils/htslib/htslib/vcf.h	242;"	d
vcf_write	src/utils/htslib/vcf.c	/^int vcf_write(htsFile *fp, const bcf_hdr_t *h, bcf1_t *v)$/;"	f
vcf_write1	src/utils/htslib/htslib/vcf.h	244;"	d
vcf_write_line	src/utils/htslib/vcf.c	/^int vcf_write_line(htsFile *fp, kstring_t *line)$/;"	f
vdict_t	src/utils/htslib/vcf.c	/^typedef khash_t(vdict) vdict_t;$/;"	t	file:
vecType	src/utils/FileRecordTools/Records/RecordKeyVector.h	/^	typedef vector<Record *> vecType;$/;"	t	class:RecordKeyVector
vectorIntToStr	src/utils/general/ParseTools.cpp	/^string vectorIntToStr(const vector<int> &vec) {$/;"	f
verbose	src/utils/htslib/htsfile.c	/^int verbose = 0;$/;"	v
verifyChromOrderMismatch	src/utils/NewChromsweep/NewChromsweep.cpp	/^bool NewChromSweep::verifyChromOrderMismatch(const string & chrom, const string &prevChrom, int skipFile) {$/;"	f	class:NewChromSweep
version	docs/conf.py	/^version = '2.27.0'$/;"	v
version	src/utils/htslib/cram/cram_structs.h	/^    int            version;$/;"	m	struct:cram_fd
version	src/utils/htslib/htslib/hts.h	/^    struct { short major, minor; } version;$/;"	m	struct:htsFormat	typeref:struct:htsFormat::__anon10
vhopen_libcurl	src/utils/htslib/hfile_libcurl.c	/^static hFILE *vhopen_libcurl(const char *url, const char *modes, va_list args)$/;"	f	file:
view_all	src/utils/htslib/htsfile.c	/^enum { identify, view_headers, view_all } mode = identify;$/;"	e	enum:__anon98	file:
view_headers	src/utils/htslib/htsfile.c	/^enum { identify, view_headers, view_all } mode = identify;$/;"	e	enum:__anon98	file:
view_raw	src/utils/htslib/htsfile.c	/^static void view_raw(hFILE *fp, const char *filename)$/;"	f	file:
view_sam	src/utils/htslib/htsfile.c	/^static void view_sam(samFile *in, const char *filename)$/;"	f	file:
view_vcf	src/utils/htslib/htsfile.c	/^static void view_vcf(vcfFile *in, const char *filename)$/;"	f	file:
vptr	src/utils/htslib/htslib/vcf.h	/^    uint8_t *vptr;          \/\/ pointer to data array in bcf1_t->shared.s, excluding the size+type and tag id bytes$/;"	m	struct:__anon24
vptr_free	src/utils/htslib/htslib/vcf.h	/^            vptr_free:1;    \/\/ indicates that vptr-vptr_off must be freed; set only when modified and the new$/;"	m	struct:__anon24
vptr_len	src/utils/htslib/htslib/vcf.h	/^    uint32_t vptr_len;      \/\/ length of the vptr block or, when set, of the vptr_mod block, excluding offset$/;"	m	struct:__anon24
vptr_off	src/utils/htslib/htslib/vcf.h	/^    uint32_t vptr_off:31,   \/\/ vptr offset, i.e., the size of the INFO key plus size+type bytes$/;"	m	struct:__anon24
vset	src/utils/htslib/bcf_sr_sort.h	/^    varset_t *vset;         \/\/ list of variant sets - combinations of compatible variants across multiple groups ready for output$/;"	m	struct:__anon120
wait_perform	src/utils/htslib/hfile_libcurl.c	/^static int wait_perform(hFILE_libcurl *fp)$/;"	f	file:
wait_time	src/utils/htslib/thread_pool_internal.h	/^    long long total_time, wait_time;$/;"	m	struct:hts_tpool
wake_dispatch	src/utils/htslib/thread_pool_internal.h	/^    int wake_dispatch;               \/\/ unblocks waiting dispatchers$/;"	m	struct:hts_tpool_process
wake_next_worker	src/utils/htslib/thread_pool.c	/^static void wake_next_worker(hts_tpool_process *q, int locked) {$/;"	f	file:
warn	src/utils/Contexts/ContextBase.cpp	/^void ContextBase::warn(const Record *record, const string str1, const string str2, const string str3) {$/;"	f	class:ContextBase
weight	src/utils/bedFile/bedFile.h	/^    double weight;$/;"	m	struct:BED
window_help	src/windowBed/windowMain.cpp	/^void window_help(void) {$/;"	f
window_main	src/windowBed/windowMain.cpp	/^int window_main(int argc, char* argv[]) {$/;"	f
windowmaker_help	src/windowMaker/windowMakerMain.cpp	/^void windowmaker_help(void) {$/;"	f
windowmaker_main	src/windowMaker/windowMakerMain.cpp	/^int windowmaker_main(int argc, char* argv[]) {$/;"	f
worker_id	src/utils/htslib/thread_pool.c	/^static int worker_id(hts_tpool *p) {$/;"	f	file:
wr	src/utils/htslib/hfile_libcurl.c	/^        union { char *rd; const char *wr; } ptr;$/;"	m	union:__anon102::__anon103::__anon104	file:
write	src/utils/htslib/htslib/hfile.h	/^	ssize_t (*write)(void* cb_data, const void* buf, size_t sz);$/;"	m	struct:hFILE_callback_ops
writeIndexFile	src/utils/Fasta/Fasta.cpp	/^void FastaIndex::writeIndexFile(string fname) {$/;"	f	class:FastaIndex
write_bcf	src/utils/htslib/test/test-vcf-api.c	/^void write_bcf(char *fname)$/;"	f
write_format_values	src/utils/htslib/test/test-vcf-api.c	/^void write_format_values(const char *fname)$/;"	f
writebuffer_is_nonempty	src/utils/htslib/hfile.c	/^static inline int writebuffer_is_nonempty(hFILE *fp)$/;"	f	file:
x	src/utils/htslib/cram/pooled_alloc.c	/^    int x, y, z;$/;"	m	struct:__anon68	file:
x	src/utils/htslib/sam.c	/^    int k, x, y, end;$/;"	m	struct:__anon6	file:
x	src/utils/htslib/thread_pool.c	/^    unsigned int x;$/;"	m	struct:__anon113	file:
x	test/fisher/plot.py	/^x = -np.log10(1 - np.minimum(1-1e-6, df.fisher))$/;"	v
x	test/fisher/plot.py	/^x = -np.log10(df.fisher)$/;"	v
x_max	src/utils/htslib/cram/rANS_byte.h	/^    uint32_t x_max;     \/\/ (Exclusive) upper bound of pre-normalization interval$/;"	m	struct:__anon58
xstr	src/utils/htslib/test/sam.c	103;"	d	file:
xyz	src/utils/htslib/cram/pooled_alloc.c	/^} xyz;$/;"	t	typeref:struct:__anon68	file:
y	src/utils/htslib/cram/pooled_alloc.c	/^    int x, y, z;$/;"	m	struct:__anon68	file:
y	src/utils/htslib/sam.c	/^    int k, x, y, end;$/;"	m	struct:__anon6	file:
y	src/utils/htslib/vcf.c	/^    uint32_t y;$/;"	m	struct:__anon52	file:
y	test/fisher/plot.py	/^y = -np.log10(1 - np.minimum(1-1e-6, df.shuffled))$/;"	v
y	test/fisher/plot.py	/^y = -np.log10(df.shuffled)$/;"	v
z	src/utils/htslib/cram/pooled_alloc.c	/^    int x, y, z;$/;"	m	struct:__anon68	file:
z	src/utils/htslib/hts.c	/^    } z; \/\/ keep internal states$/;"	m	struct:__hts_idx_t	typeref:struct:__hts_idx_t::__anon5	file:
zeroLength	src/utils/bedFile/bedFile.h	/^    bool   zeroLength;$/;"	m	struct:BED
zeroLength	src/utils/bedFile/bedFile.h	/^    bool   zeroLength;$/;"	m	struct:BEDCOV
zeroLength	src/utils/bedFile/bedFile.h	/^    bool   zeroLength;$/;"	m	struct:BEDCOVLIST
zlib_mem_deflate	src/utils/htslib/cram/cram_io.c	/^static char *zlib_mem_deflate(char *data, size_t size, size_t *cdata_size,$/;"	f	file:
zlib_mem_inflate	src/utils/htslib/cram/cram_io.c	/^char *zlib_mem_inflate(char *cdata, size_t csize, size_t *size) {$/;"	f
~BTlist	src/utils/general/BTlist.h	/^	~BTlist() {$/;"	f	class:BTlist
~BamAlignment	src/utils/BamTools/include/BamAlignment.hpp	/^		~BamAlignment() $/;"	f	class:BamTools::BamAlignment
~BamFileReader	src/utils/FileRecordTools/FileReaders/BamFileReader.cpp	/^BamFileReader::~BamFileReader()$/;"	f	class:BamFileReader
~BamRecord	src/utils/FileRecordTools/Records/BamRecord.cpp	/^BamRecord::~BamRecord()$/;"	f	class:BamRecord
~BamToFastq	src/bamToFastq/bamToFastq.cpp	/^BamToFastq::~BamToFastq(void) {}$/;"	f	class:BamToFastq
~Bed12Interval	src/utils/FileRecordTools/Records/Bed12Interval.cpp	/^Bed12Interval::~Bed12Interval()$/;"	f	class:Bed12Interval
~Bed2Fa	src/fastaFromBed/fastaFromBed.cpp	/^Bed2Fa::~Bed2Fa(void) {$/;"	f	class:Bed2Fa
~Bed3Interval	src/utils/FileRecordTools/Records/Bed3Interval.cpp	/^Bed3Interval::~Bed3Interval()$/;"	f	class:Bed3Interval
~Bed4Interval	src/utils/FileRecordTools/Records/Bed4Interval.cpp	/^Bed4Interval::~Bed4Interval()$/;"	f	class:Bed4Interval
~Bed5Interval	src/utils/FileRecordTools/Records/Bed5Interval.cpp	/^Bed5Interval::~Bed5Interval()$/;"	f	class:Bed5Interval
~Bed6Interval	src/utils/FileRecordTools/Records/Bed6Interval.cpp	/^Bed6Interval::~Bed6Interval()$/;"	f	class:Bed6Interval
~BedAnnotate	src/annotateBed/annotateBed.cpp	/^BedAnnotate::~BedAnnotate(void) {$/;"	f	class:BedAnnotate
~BedCluster	src/clusterBed/clusterBed.cpp	/^BedCluster::~BedCluster(void) $/;"	f	class:BedCluster
~BedFile	src/utils/bedFile/bedFile.cpp	/^BedFile::~BedFile(void) {$/;"	f	class:BedFile
~BedFilePE	src/utils/bedFilePE/bedFilePE.cpp	/^BedFilePE::~BedFilePE(void) {$/;"	f	class:BedFilePE
~BedFlank	src/flankBed/flankBed.cpp	/^BedFlank::~BedFlank(void) {$/;"	f	class:BedFlank
~BedGenomeCoverage	src/genomeCoverageBed/genomeCoverageBed.cpp	/^BedGenomeCoverage::~BedGenomeCoverage(void) {$/;"	f	class:BedGenomeCoverage
~BedGraphFile	src/utils/bedGraphFile/bedGraphFile.cpp	/^BedGraphFile::~BedGraphFile() {$/;"	f	class:BedGraphFile
~BedGraphInterval	src/utils/FileRecordTools/Records/BedGraphInterval.cpp	/^BedGraphInterval::~BedGraphInterval()$/;"	f	class:BedGraphInterval
~BedIntersectPE	src/pairToBed/pairToBed.cpp	/^BedIntersectPE::~BedIntersectPE(void) {$/;"	f	class:BedIntersectPE
~BedLinks	src/linksBed/linksBed.cpp	/^BedLinks::~BedLinks(void) {$/;"	f	class:BedLinks
~BedPlusInterval	src/utils/FileRecordTools/Records/BedPlusInterval.h	/^	virtual ~BedPlusInterval() {}$/;"	f	class:BedPlusInterval
~BedRandom	src/randomBed/randomBed.cpp	/^BedRandom::~BedRandom(void) $/;"	f	class:BedRandom
~BedShift	src/shiftBed/shiftBed.cpp	/^BedShift::~BedShift(void) {}$/;"	f	class:BedShift
~BedShuffle	src/shuffleBed/shuffleBed.cpp	/^BedShuffle::~BedShuffle(void) {$/;"	f	class:BedShuffle
~BedSlop	src/slopBed/slopBed.cpp	/^BedSlop::~BedSlop(void) {$/;"	f	class:BedSlop
~BedSort	src/sortBed/sortBed.cpp	/^BedSort::~BedSort(void) {$/;"	f	class:BedSort
~BedSplit	src/split/splitBed.cpp	/^BedSplit::~BedSplit(void) {$/;"	f	class:BedSplit
~BedSplitItems	src/split/splitBed.cpp	/^		~BedSplitItems()$/;"	f	class:BedSplitItems
~BedWindow	src/windowBed/windowBed.cpp	/^BedWindow::~BedWindow(void) {$/;"	f	class:BedWindow
~BinTree	src/utils/BinTree/BinTree.cpp	/^BinTree::~BinTree() {$/;"	f	class:BinTree
~BlockMgr	src/utils/FileRecordTools/Records/BlockMgr.cpp	/^BlockMgr::~BlockMgr()$/;"	f	class:BlockMgr
~BufferedStreamMgr	src/utils/FileRecordTools/FileReaders/BufferedStreamMgr.cpp	/^BufferedStreamMgr::~BufferedStreamMgr()$/;"	f	class:BufferedStreamMgr
~ChromSweep	src/utils/chromsweep/chromsweep.cpp	/^ChromSweep::~ChromSweep(void) {$/;"	f	class:ChromSweep
~CloseSweep	src/utils/NewChromsweep/CloseSweep.cpp	/^CloseSweep::~CloseSweep(void) {$/;"	f	class:CloseSweep
~ComplementFile	src/complementFile/complementFile.cpp	/^ComplementFile::~ComplementFile() {$/;"	f	class:ComplementFile
~ContextBase	src/utils/Contexts/ContextBase.cpp	/^ContextBase::~ContextBase()$/;"	f	class:ContextBase
~ContextClosest	src/utils/Contexts/ContextClosest.cpp	/^ContextClosest::~ContextClosest(){$/;"	f	class:ContextClosest
~ContextComplement	src/utils/Contexts/ContextComplement.cpp	/^ContextComplement::~ContextComplement()$/;"	f	class:ContextComplement
~ContextCoverage	src/utils/Contexts/ContextCoverage.cpp	/^ContextCoverage::~ContextCoverage() {$/;"	f	class:ContextCoverage
~ContextFisher	src/utils/Contexts/ContextFisher.cpp	/^ContextFisher::~ContextFisher() {$/;"	f	class:ContextFisher
~ContextGroupBy	src/utils/Contexts/ContextGroupBy.cpp	/^ContextGroupBy::~ContextGroupBy()$/;"	f	class:ContextGroupBy
~ContextIntersect	src/utils/Contexts/ContextIntersect.cpp	/^ContextIntersect::~ContextIntersect()$/;"	f	class:ContextIntersect
~ContextJaccard	src/utils/Contexts/ContextJaccard.cpp	/^ContextJaccard::~ContextJaccard() {$/;"	f	class:ContextJaccard
~ContextMap	src/utils/Contexts/ContextMap.cpp	/^ContextMap::~ContextMap()$/;"	f	class:ContextMap
~ContextMerge	src/utils/Contexts/ContextMerge.cpp	/^ContextMerge::~ContextMerge()$/;"	f	class:ContextMerge
~ContextSample	src/utils/Contexts/ContextSample.cpp	/^ContextSample::~ContextSample()$/;"	f	class:ContextSample
~ContextSpacing	src/utils/Contexts/ContextSpacing.cpp	/^ContextSpacing::~ContextSpacing()$/;"	f	class:ContextSpacing
~ContextSubtract	src/utils/Contexts/ContextSubtract.cpp	/^ContextSubtract::~ContextSubtract()$/;"	f	class:ContextSubtract
~CoverageFile	src/coverageFile/coverageFile.cpp	/^CoverageFile::~CoverageFile() {$/;"	f	class:CoverageFile
~EmptyRecord	src/utils/FileRecordTools/Records/EmptyRecord.cpp	/^EmptyRecord::~EmptyRecord() {$/;"	f	class:EmptyRecord
~FastaIndex	src/utils/Fasta/Fasta.cpp	/^FastaIndex::~FastaIndex(void) {$/;"	f	class:FastaIndex
~FastaIndexEntry	src/utils/Fasta/Fasta.cpp	/^FastaIndexEntry::~FastaIndexEntry(void)$/;"	f	class:FastaIndexEntry
~FastaReference	src/utils/Fasta/Fasta.cpp	/^FastaReference::~FastaReference(void) {$/;"	f	class:FastaReference
~FileReader	src/utils/FileRecordTools/FileReaders/FileReader.cpp	/^FileReader::~FileReader() {$/;"	f	class:FileReader
~FileRecordMgr	src/utils/FileRecordTools/FileRecordMgr.cpp	/^FileRecordMgr::~FileRecordMgr()$/;"	f	class:FileRecordMgr
~FileRecordTypeChecker	src/utils/fileType/FileRecordTypeChecker.h	/^	~FileRecordTypeChecker() {}$/;"	f	class:FileRecordTypeChecker
~FreeList	src/utils/general/FreeList.h	/^	~FreeList() {$/;"	f	class:FreeList
~GenomeFile	src/utils/GenomeFile/GenomeFile.cpp	/^GenomeFile::~GenomeFile(void) {$/;"	f	class:GenomeFile
~GffPlusRecord	src/utils/FileRecordTools/Records/GffPlusRecord.cpp	/^GffPlusRecord::~GffPlusRecord() {$/;"	f	class:GffPlusRecord
~GffRecord	src/utils/FileRecordTools/Records/GffRecord.cpp	/^GffRecord::~GffRecord() {$/;"	f	class:GffRecord
~GroupBy	src/groupBy/groupBy.cpp	/^GroupBy::~GroupBy()$/;"	f	class:GroupBy
~InflateStreamBuf	src/utils/general/InflateStreamBuf.h	/^	virtual ~InflateStreamBuf() {$/;"	f	class:InflateStreamBuf
~InputStreamMgr	src/utils/FileRecordTools/FileReaders/InputStreamMgr.cpp	/^InputStreamMgr::~InputStreamMgr() {$/;"	f	class:InputStreamMgr
~IntersectFile	src/intersectFile/intersectFile.cpp	/^IntersectFile::~IntersectFile(void) {$/;"	f	class:IntersectFile
~KeyListOpsMethods	src/utils/KeyListOps/KeyListOpsMethods.cpp	/^KeyListOpsMethods::~KeyListOpsMethods() {$/;"	f	class:KeyListOpsMethods
~MaskFastaFromBed	src/maskFastaFromBed/maskFastaFromBed.cpp	/^MaskFastaFromBed::~MaskFastaFromBed(void) {$/;"	f	class:MaskFastaFromBed
~MergeFile	src/mergeFile/mergeFile.cpp	/^MergeFile::~MergeFile() {$/;"	f	class:MergeFile
~MultiCovBam	src/multiBamCov/multiBamCov.cpp	/^MultiCovBam::~MultiCovBam(void) $/;"	f	class:MultiCovBam
~MultiIntersectBed	src/multiIntersectBed/multiIntersectBed.cpp	/^MultiIntersectBed::~MultiIntersectBed() {$/;"	f	class:MultiIntersectBed
~NewChromSweep	src/utils/NewChromsweep/NewChromsweep.cpp	/^NewChromSweep::~NewChromSweep(void) {$/;"	f	class:NewChromSweep
~NewGenomeFile	src/utils/GenomeFile/NewGenomeFile.cpp	/^NewGenomeFile::~NewGenomeFile(void) {$/;"	f	class:NewGenomeFile
~NoPosPlusRecord	src/utils/FileRecordTools/Records/NoPosPlusRecord.cpp	/^NoPosPlusRecord::~NoPosPlusRecord() {$/;"	f	class:NoPosPlusRecord
~NucBed	src/nucBed/nucBed.cpp	/^NucBed::~NucBed(void) $/;"	f	class:NucBed
~PairToPair	src/pairToPair/pairToPair.cpp	/^PairToPair::~PairToPair(void) {$/;"	f	class:PairToPair
~PlusFields	src/utils/FileRecordTools/Records/PlusFields.h	/^	virtual ~PlusFields() {}$/;"	f	class:PlusFields
~PushBackStreamBuf	src/utils/general/PushBackStreamBuf.cpp	/^PushBackStreamBuf::~PushBackStreamBuf()$/;"	f	class:PushBackStreamBuf
~RecDistList	src/utils/NewChromsweep/CloseSweep.cpp	/^RecDistList::~RecDistList() {$/;"	f	class:RecDistList
~Record	src/utils/FileRecordTools/Records/Record.cpp	/^Record::~Record()$/;"	f	class:Record
~RecordKeyList	src/utils/FileRecordTools/Records/RecordKeyList.cpp	/^RecordKeyList::~RecordKeyList() {$/;"	f	class:RecordKeyList
~RecordKeyVector	src/utils/FileRecordTools/Records/RecordKeyVector.cpp	/^RecordKeyVector::~RecordKeyVector() $/;"	f	class:RecordKeyVector
~RecordList	src/utils/FileRecordTools/Records/RecordList.h	/^	~RecordList() { clear(); }$/;"	f	class:RecordList
~RecordMgr	src/utils/FileRecordTools/Records/RecordMgr.cpp	/^RecordMgr::~RecordMgr()$/;"	f	class:RecordMgr
~RecordOutputMgr	src/utils/RecordOutputMgr/RecordOutputMgr.cpp	/^RecordOutputMgr::~RecordOutputMgr()$/;"	f	class:RecordOutputMgr
~RegressTest	src/regressTest/RegressTest.cpp	/^RegressTest::~RegressTest()$/;"	f	class:RegressTest
~RelativeDistance	src/reldist/reldist.cpp	/^RelativeDistance::~RelativeDistance(void) {$/;"	f	class:RelativeDistance
~SampleFile	src/sampleFile/sampleFile.cpp	/^SampleFile::~SampleFile()$/;"	f	class:SampleFile
~SingleLineDelimTextFileReader	src/utils/FileRecordTools/FileReaders/SingleLineDelimTextFileReader.cpp	/^SingleLineDelimTextFileReader::~SingleLineDelimTextFileReader()$/;"	f	class:SingleLineDelimTextFileReader
~SingleLineDelimTransferBuffer	src/utils/FileRecordTools/FileReaders/SingleLineDelimTransferBuffer.cpp	/^SingleLineDelimTransferBuffer::~SingleLineDelimTransferBuffer()$/;"	f	class:SingleLineDelimTransferBuffer
~SpacingFile	src/spacingFile/spacingFile.cpp	/^SpacingFile::~SpacingFile()$/;"	f	class:SpacingFile
~StrandQueue	src/utils/FileRecordTools/Records/StrandQueue.cpp	/^StrandQueue::~StrandQueue() {$/;"	f	class:StrandQueue
~SubtractFile	src/subtractFile/subtractFile.cpp	/^SubtractFile::~SubtractFile() {$/;"	f	class:SubtractFile
~TabFile	src/utils/tabFile/tabFile.cpp	/^TabFile::~TabFile(void) {$/;"	f	class:TabFile
~TagBam	src/tagBam/tagBam.cpp	/^TagBam::~TagBam(void) {$/;"	f	class:TagBam
~Tokenizer	src/utils/general/Tokenizer.cpp	/^Tokenizer::~Tokenizer() {$/;"	f	class:Tokenizer
~ToolBase	src/utils/ToolBase/ToolBase.h	/^	virtual ~ToolBase() {}$/;"	f	class:ToolBase
~UnionBedGraphs	src/unionBedGraphs/unionBedGraphs.cpp	/^UnionBedGraphs::~UnionBedGraphs() {$/;"	f	class:UnionBedGraphs
~VectorOps	src/utils/VectorOps/VectorOps.cpp	/^VectorOps::~VectorOps(void) {$/;"	f	class:VectorOps
~WindowMaker	src/windowMaker/windowMaker.cpp	/^WindowMaker::~WindowMaker(void) {}$/;"	f	class:WindowMaker
~_SamFile	src/utils/BamTools/include/BamReader.hpp	/^			~_SamFile() $/;"	f	struct:BamTools::BamReader::_SamFile
~gzstreambase	src/utils/gzstream/gzstream.C	/^gzstreambase::~gzstreambase() {$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambase
~gzstreambuf	src/utils/gzstream/gzstream.h	/^    ~gzstreambuf() { close(); }$/;"	f	class:GZSTREAM_NAMESPACE::gzstreambuf
~string	src/utils/general/QuickString.cpp	/^string::~string(){$/;"	f	class:string
